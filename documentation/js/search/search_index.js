var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/AppComponent.html",[0,0.033,1,0.665]],["body/components/AppComponent.html",[0,0.055,1,1.222,2,1.151,3,0.758,4,0.625,5,1.08,6,0.909,7,1.08,8,0.625,9,2.226,10,0.758,11,1.398,12,3.674,13,3.674,14,3.674,15,3.674,16,1.08,17,1.814,18,1.192,19,2.881,20,1.657,21,4.074,22,1.151,23,1.398,24,3.674,25,1.969,26,3.674,27,0.625,28,0.809,29,3.5,30,0.758,31,0.068,32,1.28,33,0.625,34,0.758,35,2.881,36,0.909,37,2.838,38,2.359,39,3.674,40,2.881,41,1.089,42,0.625,43,1.28,44,2.838,45,0.758,46,0.758,47,1.08,48,1.398,49,1.398,50,1.08,51,1.64,52,1.08,53,0.982,54,1.08,55,0.758,56,1.08,57,1.08,58,0.909,59,1.08,60,0.758,61,1.08,62,0.758,63,1.08,64,0.625,65,1.08,66,1.08,67,0.909,68,1.08,69,0.049,70,0.049]],["title/components/AuthButtonComponent.html",[0,0.033,55,0.665]],["body/components/AuthButtonComponent.html",[0,0.047,1,0.309,2,0.506,3,0.818,4,0.255,5,0.44,6,0.37,7,0.44,8,0.255,10,0.742,11,0.72,16,0.44,17,1.426,18,0.309,20,0.854,22,0.309,23,0.72,25,1.014,27,0.255,28,0.417,30,0.927,31,0.069,32,0.854,33,0.417,34,0.506,36,1.367,41,0.878,42,0.255,45,0.309,46,0.309,47,0.44,48,1.056,49,0.72,50,0.44,51,1.056,52,0.44,53,0.968,54,0.44,55,0.742,56,0.914,57,0.44,58,0.37,59,0.44,60,0.309,61,0.44,62,0.309,63,0.44,64,0.611,65,0.44,66,0.44,67,0.37,68,0.44,69,0.025,70,0.025,71,0.907,72,2.401,73,1.782,74,3.5,75,2.578,76,3.475,77,1.215,78,1.691,79,1.85,80,1.892,81,1.215,82,0.72,83,2.402,84,1.883,85,1.892,86,1.892,87,3.47,88,2.402,89,2.402,90,2.402,91,2.177,92,1.883,93,2.721,94,0.854,95,2.776,96,2.776,97,1.892,98,1.892,99,2.776,100,2.776,101,1.782,102,1.487,103,0.907,104,3.856,105,1.892,106,1.892,107,1.083,108,1.083,109,1.215,110,1.215,111,1.014,112,2.402,113,1.542,114,3.062,115,1.892,116,1.892,117,1.892,118,2.994,119,1.892,120,1.156,121,3.161,122,3.621,123,1.927,124,2.884,125,1.892,126,4.03,127,1.156,128,1.892,129,1.156,130,4.431,131,3.621,132,2.776,133,2.177,134,2.177,135,2.84,136,1.892,137,1.156,138,1.156,139,3.621,140,1.156,141,1.156,142,3.621,143,2.177,144,2.325,145,2.84,146,2.84,147,2.476,148,1.215,149,1.892,150,2.776,151,1.941,152,1.156,153,1.892,154,1.484,155,1.892,156,1.484,157,1.892,158,1.156,159,0.854,160,1.215,161,1.484,162,1.892,163,1.156,164,3.748,165,1.892,166,1.484,167,1.215,168,1.156,169,1.892,170,1.156,171,1.156,172,0.854,173,1.892,174,1.156,175,1.014,176,1.892,177,1.484,178,1.484,179,0.907,180,1.156,181,0.907,182,1.156,183,0.742,184,1.156,185,1.381,186,0.742,187,0.742,188,1.156,189,1.892,190,2.578,191,3.287,192,3.287,193,1.156,194,2.402,195,2.578,196,1.156,197,1.156,198,1.156,199,1.156,200,1.156,201,1.156,202,1.156,203,1.156,204,1.156,205,1.156,206,1.156,207,1.156,208,1.156,209,1.156,210,1.156,211,1.156,212,3.287,213,1.156,214,1.156,215,2.402,216,1.156,217,1.892,218,1.156,219,1.156,220,1.156,221,1.892,222,1.892,223,1.892,224,1.156,225,1.156,226,1.156,227,1.892,228,2.177,229,1.156,230,1.156,231,1.156,232,0.907,233,1.156,234,1.156,235,1.156,236,1.156,237,1.892,238,1.892,239,1.892,240,1.892,241,1.156,242,1.156,243,2.177,244,1.484,245,2.177]],["title/components/EpisodesComponent.html",[0,0.033,60,0.665]],["body/components/EpisodesComponent.html",[0,0.046,1,0.459,2,0.691,3,0.459,4,0.379,5,0.654,6,0.55,7,0.654,8,0.379,10,0.83,11,0.654,16,0.654,17,1.617,18,0.459,20,1.166,22,0.459,23,0.984,25,1.385,27,0.379,28,0.569,29,2.027,30,1.11,31,0.069,33,0.684,34,0.83,36,1.292,41,1.04,42,0.379,43,0.776,45,0.459,46,0.459,47,0.654,48,0.984,49,0.984,50,0.654,51,1.315,52,0.654,53,0.923,54,0.654,55,0.459,56,0.654,57,0.654,58,0.55,59,0.654,60,0.923,61,0.654,62,0.459,63,0.654,64,0.379,65,0.654,66,0.654,67,0.55,68,0.654,69,0.035,70,0.035,72,1.348,77,1.66,78,1.756,82,1.41,84,2.436,94,1.166,101,1.995,102,1.385,103,1.348,107,1.166,108,1.166,109,1.104,110,1.104,111,0.921,121,2.027,123,1.166,124,2.218,133,2.709,144,1.66,147,1.66,148,1.995,151,1.665,156,2.027,159,1.917,160,1.104,161,2.027,166,2.027,179,1.348,183,1.104,185,0.776,246,1.348,247,2.027,248,2.218,249,2.78,250,3.258,251,3.258,252,1.995,253,3.106,254,2.585,255,2.585,256,3.106,257,4.154,258,3.704,259,2.585,260,3.704,261,1.719,262,1.719,263,1.719,264,1.719,265,2.585,266,1.719,267,2.585,268,3.455,269,2.585,270,2.709,271,3.455,272,2.585,273,2.585,274,1.719,275,3.052,276,1.719,277,2.585,278,2.585,279,2.585,280,2.585,281,2.585,282,2.585,283,2.585,284,2.585,285,2.585,286,2.585,287,2.585,288,2.585,289,2.499,290,3.052,291,2.585,292,3.455,293,2.585,294,3.892,295,2.585,296,2.585,297,2.585,298,3.455,299,2.585,300,2.585,301,2.585,302,1.719,303,3.455,304,3.106,305,2.585,306,2.585,307,3.455,308,2.585,309,3.455,310,2.585,311,2.585,312,2.585,313,2.585,314,2.585,315,2.585,316,2.585,317,1.719,318,1.719,319,1.719,320,1.719,321,1.719,322,1.719,323,1.719]],["title/components/HomeComponent.html",[0,0.033,62,0.665]],["body/components/HomeComponent.html",[0,0.057,1,0.822,2,1.034,3,0.822,4,0.678,5,1.171,6,0.985,7,1.171,8,0.678,10,0.822,16,1.171,17,1.84,18,1.131,20,1.745,22,0.822,23,1.472,25,2.073,31,0.067,41,1.034,42,0.678,43,1.388,45,0.822,46,0.822,47,1.171,48,1.472,49,1.472,50,1.171,51,1.689,52,1.171,53,1.034,54,1.171,55,0.822,56,1.171,57,1.171,58,0.985,59,1.171,60,0.822,61,1.171,62,1.186,63,1.171,64,0.678,65,1.171,66,1.171,67,0.985,68,1.171,69,0.052,70,0.052,81,2.484,82,1.472,252,2.717,324,2.413,325,3.868,326,3.034,327,3.868,328,3.868,329,3.077,330,3.868,331,3.868,332,3.077]],["title/components/ModalComponent.html",[0,0.033,64,0.548]],["body/components/ModalComponent.html",[0,0.052,1,0.518,2,0.755,3,0.518,4,0.427,5,0.738,6,1.445,7,0.738,8,0.427,10,0.755,16,0.738,17,1.669,18,0.518,22,0.518,23,1.075,27,0.427,28,0.622,30,0.891,31,0.068,32,1.275,33,0.427,34,0.518,36,1.377,41,0.755,42,0.427,45,0.518,46,0.518,47,0.738,48,1.075,49,1.669,50,0.738,51,1.394,52,0.738,53,0.891,54,0.738,55,0.518,56,0.738,57,0.738,58,0.621,59,0.738,60,0.518,61,0.738,62,0.518,63,0.738,64,0.807,65,0.738,66,0.738,67,0.621,68,0.738,69,0.038,70,0.038,79,1.893,82,0.738,94,1.275,101,2.352,102,1.963,107,0.875,108,0.875,109,1.815,111,1.514,113,3.095,123,1.653,124,1.815,135,2.216,151,2.305,159,1.653,160,1.815,167,2.141,175,1.963,177,2.216,185,1.275,186,1.245,187,2.501,247,2.216,248,1.815,275,2.615,333,1.939,334,1.521,335,2.873,336,2.826,337,3.334,338,3.334,339,2.826,340,2.826,341,2.826,342,3.334,343,2.826,344,3.334,345,3.188,346,3.664,347,2.816,348,2.826,349,2.501,350,1.939,351,3.895,352,3.664,353,2.826,354,1.939,355,2.826,356,2.826,357,2.826,358,1.939,359,3.664,360,2.216,361,1.939,362,2.216,363,1.939,364,2.216,365,1.939,366,1.939,367,2.216,368,2.826,369,1.939,370,1.939,371,1.939,372,1.939,373,1.939,374,1.939,375,1.939,376,1.939,377,1.939,378,1.939,379,1.939,380,2.826,381,1.939,382,1.939,383,2.826,384,2.826,385,1.939,386,1.939,387,1.939,388,1.939,389,1.939,390,1.939,391,1.939,392,1.939]],["title/injectables/ModalService.html",[79,1.122,393,1.122]],["body/injectables/ModalService.html",[0,0.044,3,0.633,4,0.521,6,1.389,8,0.521,10,1.071,19,1.857,27,0.521,28,0.717,30,1.071,31,0.069,32,1.678,33,0.521,34,0.633,36,1.344,41,0.87,42,0.521,45,0.633,46,0.633,53,0.994,64,1.012,69,0.044,70,0.044,73,2.09,79,1.469,94,1.469,107,1.678,108,1.678,113,2.986,118,3.04,123,1.807,151,2.427,167,2.572,172,1.469,185,1.678,187,2.572,289,2.09,335,3.487,345,3.142,347,2.572,349,2.697,360,2.553,362,3.404,364,3.404,367,2.553,393,1.469,394,1.52,395,1.857,396,3.256,397,2.368,398,2.368,399,3.256,400,2.368,401,3.256,402,2.368,403,2.368,404,3.256,405,3.256,406,2.368,407,2.368,408,3.256,409,3.72,410,3.256,411,3.256,412,2.368,413,2.368,414,2.368,415,2.368,416,2.368,417,2.368,418,1.857,419,2.368,420,2.368,421,2.368,422,2.368,423,2.368]],["title/components/NavComponent.html",[0,0.033,22,0.665]],["body/components/NavComponent.html",[0,0.06,1,0.754,2,0.978,3,0.754,4,0.622,5,1.074,6,0.903,7,1.074,8,0.622,10,0.754,16,1.074,17,1.812,18,0.754,20,1.651,22,1.149,23,1.393,27,0.622,28,0.806,31,0.068,33,0.622,34,0.754,36,0.903,38,2.35,40,2.871,41,1.086,42,0.622,43,1.273,45,0.754,46,0.754,47,1.074,48,1.636,49,1.393,50,1.074,51,1.636,52,1.074,53,0.978,54,1.074,55,1.149,56,1.074,57,1.074,58,0.903,59,1.074,60,0.754,61,1.074,62,0.754,63,1.074,64,0.622,65,1.074,66,1.695,67,0.903,68,1.074,69,0.049,70,0.049,73,2.35,81,2.35,82,1.393,91,3.372,92,3.186,93,3.644,175,1.962,178,2.871,232,2.213,249,2.35,252,2.609,326,2.871,424,2.213,425,3.661,426,3.661,427,2.822,428,2.822,429,2.822]],["title/injectables/WebService.html",[78,1.122,393,1.122]],["body/injectables/WebService.html",[3,0.282,4,0.232,8,0.232,10,1.047,18,0.468,27,0.232,28,0.386,30,1.086,31,0.068,32,1.015,33,0.232,34,0.282,36,1.279,38,2.872,41,0.601,42,0.232,45,0.282,46,0.282,53,1.068,69,0.024,70,0.024,74,2.465,75,2.465,76,2.057,78,1.183,94,0.791,102,1.405,107,1.729,108,1.729,110,1.684,111,1.405,118,2.398,123,1.992,134,2.929,143,1.374,144,1.125,146,3.761,147,2.398,148,2.24,154,3.508,159,0.791,172,1.885,185,1.992,186,0.677,190,2.613,195,3.134,228,2.736,243,1.374,244,1.374,248,1.125,249,2.018,270,3.411,289,2.139,290,1.765,349,2.918,393,0.791,394,0.677,418,2.736,430,0.826,431,1.753,432,1.753,433,1.753,434,2.623,435,1.753,436,1.753,437,1.753,438,2.623,439,1.753,440,1.753,441,1.753,442,1.054,443,3.143,444,1.753,445,4.227,446,1.753,447,1.753,448,1.054,449,2.623,450,3.143,451,4.584,452,3.187,453,4.063,454,4.063,455,1.753,456,4.124,457,1.054,458,1.753,459,4.522,460,3.621,461,4.272,462,3.143,463,1.753,464,1.753,465,1.054,466,1.753,467,2.623,468,3.735,469,1.753,470,1.753,471,1.054,472,3.143,473,1.374,474,1.753,475,1.054,476,1.753,477,1.054,478,3.621,479,1.753,480,1.054,481,1.753,482,1.753,483,1.753,484,1.753,485,1.753,486,1.753,487,1.753,488,1.054,489,1.753,490,1.753,491,1.054,492,1.753,493,1.753,494,1.753,495,1.054,496,1.753,497,2.912,498,1.054,499,2.623,500,1.753,501,1.753,502,1.753,503,1.753,504,1.753,505,1.753,506,1.753,507,1.753,508,1.753,509,1.753,510,1.753,511,1.374,512,1.753,513,1.374,514,3.489,515,1.054,516,0.826,517,1.753,518,1.054,519,1.054,520,2.912,521,1.054,522,3.143,523,2.25,524,1.753,525,1.054,526,4.063,527,3.331,528,1.753,529,1.753,530,1.054,531,1.753,532,1.054,533,1.054,534,1.054,535,1.054,536,1.054,537,1.054,538,1.054,539,1.054,540,1.054,541,1.054,542,1.054,543,1.753,544,1.054,545,1.054,546,1.054,547,1.753,548,1.753,549,1.054,550,1.054,551,1.054,552,1.054]],["title/coverage.html",[553,2.64]],["body/coverage.html",[0,0.065,1,0.892,8,0.735,9,2.617,22,0.892,30,0.892,31,0.067,55,0.892,58,1.068,60,0.892,62,0.892,64,0.735,69,0.055,70,0.055,71,2.617,78,1.506,79,1.506,172,1.506,246,2.617,324,2.617,334,2.617,393,1.835,395,2.617,424,2.617,430,2.617,553,2.617,554,3.337,555,3.337,556,3.337,557,4.931,558,4.068,559,2.617,560,3.337,561,2.617,562,4.068,563,3.337,564,3.337,565,3.337,566,3.337,567,3.337,568,3.337,569,3.337,570,3.337,571,3.337]],["title/dependencies.html",[572,1.639,573,2.34]],["body/dependencies.html",[11,1.323,31,0.068,42,0.766,43,1.568,69,0.056,70,0.056,181,2.726,183,2.232,250,2.726,251,2.726,516,2.726,573,2.726,574,3.477,575,4.903,576,3.477,577,4.17,578,3.27,579,3.477,580,3.477,581,3.477,582,3.477,583,3.477,584,3.477,585,3.477,586,3.477,587,3.477,588,3.477,589,3.477,590,3.477,591,3.477]],["title/index.html",[27,0.46,592,2.09,593,2.09]],["body/index.html",[0,0.055,2,0.773,4,0.637,11,1.651,31,0.05,33,0.819,35,2.269,67,0.926,69,0.05,70,0.05,145,2.269,159,1.305,172,1.305,175,1.55,245,2.269,347,1.858,452,2.917,473,2.269,511,3.603,513,2.269,578,2.269,594,4.111,595,2.893,596,3.72,597,4.489,598,2.269,599,2.893,600,3.72,601,4.111,602,2.893,603,2.893,604,4.489,605,4.595,606,4.595,607,2.893,608,3.72,609,2.893,610,2.893,611,3.72,612,2.893,613,2.893,614,2.893,615,2.893,616,2.893,617,3.72,618,2.893,619,2.893,620,2.893,621,4.111,622,2.893,623,2.893,624,2.893,625,2.893,626,2.893,627,2.893,628,2.893,629,4.111,630,2.893,631,2.893,632,2.893,633,2.893,634,2.893,635,2.893,636,2.893,637,2.893,638,3.72,639,4.111,640,2.893,641,2.893,642,2.893,643,2.893,644,2.893,645,2.893,646,4.111,647,2.893,648,2.893,649,3.72,650,2.893,651,2.893,652,2.893,653,2.893,654,2.893,655,2.893,656,2.893,657,2.893,658,2.893,659,2.893,660,2.893,661,2.893,662,2.893,663,2.893,664,1.858]],["title/modules.html",[665,2.64]],["body/modules.html",[31,0.06,69,0.06,70,0.06,665,3.084]],["title/overview.html",[664,2.161]],["body/overview.html",[2,1.04,31,0.06,69,0.06,70,0.06,394,2.499,664,2.499,666,3.892,667,3.892]],["title/properties.html",[28,0.657,572,1.639]],["body/properties.html",[28,0.859,31,0.063,69,0.06,70,0.06,598,3.06,668,3.902]],["title/miscellaneous/variables.html",[669,1.639,670,2.34]],["body/miscellaneous/variables.html",[11,1.404,18,0.986,27,0.813,30,0.986,31,0.066,33,0.813,34,0.986,69,0.058,70,0.058,77,2.369,82,1.404,559,2.894,561,3.388,669,2.894,670,2.894,671,3.69,672,3.69,673,3.69,674,3.69,675,3.69,676,3.69,677,3.69,678,3.69]]],"invertedIndex":[["",{"_index":31,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/NavComponent.html":{},"injectables/WebService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0.0.0",{"_index":668,"title":{},"body":{"properties.html":{}}}],["0.15.0",{"_index":591,"title":{},"body":{"dependencies.html":{}}}],["0.7",{"_index":391,"title":{},"body":{"components/ModalComponent.html":{}}}],["1.1.26",{"_index":581,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":562,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":557,"title":{},"body":{"coverage.html":{}}}],["14/14",{"_index":563,"title":{},"body":{"coverage.html":{}}}],["17",{"_index":291,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["17/17",{"_index":564,"title":{},"body":{"coverage.html":{}}}],["19.0.0",{"_index":575,"title":{},"body":{"dependencies.html":{}}}],["19.0.2",{"_index":599,"title":{},"body":{"index.html":{}}}],["2",{"_index":667,"title":{},"body":{"overview.html":{}}}],["2.3.0",{"_index":589,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":558,"title":{},"body":{"coverage.html":{}}}],["26/26",{"_index":566,"title":{},"body":{"coverage.html":{}}}],["3.7.1",{"_index":586,"title":{},"body":{"dependencies.html":{}}}],["3000",{"_index":223,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["32.3.3",{"_index":582,"title":{},"body":{"dependencies.html":{}}}],["5.3.3",{"_index":584,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":298,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["6/6",{"_index":569,"title":{},"body":{"coverage.html":{}}}],["65",{"_index":504,"title":{},"body":{"injectables/WebService.html":{}}}],["7",{"_index":666,"title":{},"body":{"overview.html":{}}}],["7.8.0",{"_index":587,"title":{},"body":{"dependencies.html":{}}}],["700",{"_index":286,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["8/8",{"_index":567,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":568,"title":{},"body":{"coverage.html":{}}}],["accept",{"_index":356,"title":{},"body":{"components/ModalComponent.html":{}}}],["access",{"_index":228,"title":{},"body":{"components/AuthButtonComponent.html":{},"injectables/WebService.html":{}}}],["accessed",{"_index":176,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["active",{"_index":405,"title":{},"body":{"injectables/ModalService.html":{}}}],["actual_component",{"_index":68,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{}}}],["add",{"_index":364,"title":{},"body":{"components/ModalComponent.html":{},"injectables/ModalService.html":{}}}],["add(modal",{"_index":396,"title":{},"body":{"injectables/ModalService.html":{}}}],["added",{"_index":493,"title":{},"body":{"injectables/WebService.html":{}}}],["additional",{"_index":656,"title":{},"body":{"index.html":{}}}],["admin",{"_index":450,"title":{},"body":{"injectables/WebService.html":{}}}],["ag",{"_index":250,"title":{},"body":{"components/EpisodesComponent.html":{},"dependencies.html":{}}}],["aggridangular",{"_index":253,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["alert('user",{"_index":218,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["angular",{"_index":11,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["angular/animations",{"_index":574,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":183,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":515,"title":{},"body":{"injectables/WebService.html":{}}}],["angular/compiler",{"_index":576,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":42,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/NavComponent.html":{},"injectables/WebService.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":181,"title":{},"body":{"components/AuthButtonComponent.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":577,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":43,"title":{},"body":{"components/AppComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/NavComponent.html":{},"dependencies.html":{}}}],["api",{"_index":144,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"injectables/WebService.html":{}}}],["app",{"_index":18,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"injectables/WebService.html":{},"miscellaneous/variables.html":{}}}],["app.component.css",{"_index":26,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.html",{"_index":24,"title":{},"body":{"components/AppComponent.html":{}}}],["app/web.service",{"_index":179,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{}}}],["appcomponent",{"_index":1,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"coverage.html":{}}}],["appconfig",{"_index":561,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["application",{"_index":611,"title":{},"body":{"index.html":{}}}],["application/json",{"_index":548,"title":{},"body":{"injectables/WebService.html":{}}}],["applicationconfig",{"_index":672,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array",{"_index":404,"title":{},"body":{"injectables/ModalService.html":{}}}],["artifacts",{"_index":632,"title":{},"body":{"index.html":{}}}],["associated",{"_index":248,"title":{},"body":{"components/EpisodesComponent.html":{},"components/ModalComponent.html":{},"injectables/WebService.html":{}}}],["attribute",{"_index":414,"title":{},"body":{"injectables/ModalService.html":{}}}],["auth",{"_index":56,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{}}}],["authbutton",{"_index":106,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["authbutton.component.css",{"_index":86,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["authbutton.component.html",{"_index":85,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["authbutton/authbutton.component",{"_index":428,"title":{},"body":{"components/NavComponent.html":{}}}],["authbuttoncomponent",{"_index":55,"title":{"components/AuthButtonComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"coverage.html":{}}}],["authdata",{"_index":543,"title":{},"body":{"injectables/WebService.html":{}}}],["authentication",{"_index":462,"title":{},"body":{"injectables/WebService.html":{}}}],["authorization",{"_index":549,"title":{},"body":{"injectables/WebService.html":{}}}],["automatically",{"_index":612,"title":{},"body":{"index.html":{}}}],["autosizestrategy",{"_index":283,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["available",{"_index":624,"title":{},"body":{"index.html":{}}}],["backdrop",{"_index":389,"title":{},"body":{"components/ModalComponent.html":{}}}],["backend",{"_index":433,"title":{},"body":{"injectables/WebService.html":{}}}],["backgroundcolor",{"_index":281,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["ban",{"_index":434,"title":{},"body":{"injectables/WebService.html":{}}}],["ban(username",{"_index":447,"title":{},"body":{"injectables/WebService.html":{}}}],["bar",{"_index":425,"title":{},"body":{"components/NavComponent.html":{}}}],["basic",{"_index":544,"title":{},"body":{"injectables/WebService.html":{}}}],["bcsfansitefe",{"_index":35,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["block",{"_index":381,"title":{},"body":{"components/ModalComponent.html":{}}}],["body.modal",{"_index":386,"title":{},"body":{"components/ModalComponent.html":{}}}],["boolean",{"_index":124,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/ModalComponent.html":{}}}],["booleans",{"_index":125,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["bootstrap",{"_index":583,"title":{},"body":{"dependencies.html":{}}}],["browser",{"_index":578,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["btoa(creds.username",{"_index":545,"title":{},"body":{"injectables/WebService.html":{}}}],["build",{"_index":629,"title":{},"body":{"index.html":{}}}],["buildthis",{"_index":630,"title":{},"body":{"index.html":{}}}],["button",{"_index":80,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["button'},{'name",{"_index":57,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{}}}],["check",{"_index":121,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{}}}],["choose",{"_index":653,"title":{},"body":{"index.html":{}}}],["class",{"_index":46,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/NavComponent.html":{},"injectables/WebService.html":{}}}],["clear",{"_index":157,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["cli",{"_index":597,"title":{},"body":{"index.html":{}}}],["click",{"_index":332,"title":{},"body":{"components/HomeComponent.html":{}}}],["clicked",{"_index":273,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["clicking",{"_index":267,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["close",{"_index":345,"title":{},"body":{"components/ModalComponent.html":{},"injectables/ModalService.html":{}}}],["code",{"_index":452,"title":{},"body":{"injectables/WebService.html":{},"index.html":{}}}],["coldef",{"_index":304,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["come",{"_index":651,"title":{},"body":{"index.html":{}}}],["command",{"_index":646,"title":{},"body":{"index.html":{}}}],["commonmodule",{"_index":84,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{}}}],["community",{"_index":318,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["compile",{"_index":631,"title":{},"body":{"index.html":{}}}],["complete",{"_index":245,"title":{},"body":{"components/AuthButtonComponent.html":{},"index.html":{}}}],["compodoc/compodoc",{"_index":580,"title":{},"body":{"dependencies.html":{}}}],["component",{"_index":0,"title":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/NavComponent.html":{},"coverage.html":{},"index.html":{}}}],["component_template",{"_index":52,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"index.html":{},"overview.html":{}}}],["config",{"_index":678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connect",{"_index":109,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/ModalComponent.html":{}}}],["connections",{"_index":432,"title":{},"body":{"injectables/WebService.html":{}}}],["console.log('token",{"_index":241,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["const",{"_index":289,"title":{},"body":{"components/EpisodesComponent.html":{},"injectables/ModalService.html":{},"injectables/WebService.html":{}}}],["constructor",{"_index":102,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/ModalComponent.html":{},"injectables/WebService.html":{}}}],["constructor(http",{"_index":442,"title":{},"body":{"injectables/WebService.html":{}}}],["constructor(modalservice",{"_index":350,"title":{},"body":{"components/ModalComponent.html":{}}}],["constructor(private",{"_index":186,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/ModalComponent.html":{},"injectables/WebService.html":{}}}],["constructor(webservice",{"_index":103,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{}}}],["content",{"_index":547,"title":{},"body":{"injectables/WebService.html":{}}}],["control",{"_index":132,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["coverage",{"_index":553,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["created",{"_index":220,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["creds",{"_index":481,"title":{},"body":{"injectables/WebService.html":{}}}],["creds.password",{"_index":546,"title":{},"body":{"injectables/WebService.html":{}}}],["current",{"_index":156,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{}}}],["cursor",{"_index":279,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["data",{"_index":148,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"injectables/WebService.html":{}}}],["default",{"_index":33,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/NavComponent.html":{},"injectables/WebService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":161,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{}}}],["defined",{"_index":36,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/NavComponent.html":{},"injectables/WebService.html":{}}}],["definition",{"_index":303,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["delete",{"_index":458,"title":{},"body":{"injectables/WebService.html":{}}}],["deletetrivia",{"_index":435,"title":{},"body":{"injectables/WebService.html":{}}}],["deletetrivia(eid",{"_index":455,"title":{},"body":{"injectables/WebService.html":{}}}],["dependencies",{"_index":573,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["describing",{"_index":272,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["description",{"_index":10,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/NavComponent.html":{},"injectables/WebService.html":{}}}],["desired",{"_index":461,"title":{},"body":{"injectables/WebService.html":{}}}],["detailed",{"_index":661,"title":{},"body":{"index.html":{}}}],["details",{"_index":143,"title":{},"body":{"components/AuthButtonComponent.html":{},"injectables/WebService.html":{}}}],["determine",{"_index":453,"title":{},"body":{"injectables/WebService.html":{}}}],["development",{"_index":600,"title":{},"body":{"index.html":{}}}],["direction",{"_index":500,"title":{},"body":{"injectables/WebService.html":{}}}],["directive",{"_index":50,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{}}}],["directives",{"_index":67,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"index.html":{}}}],["directory",{"_index":634,"title":{},"body":{"index.html":{}}}],["discard",{"_index":489,"title":{},"body":{"injectables/WebService.html":{}}}],["display",{"_index":167,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{}}}],["dist",{"_index":633,"title":{},"body":{"index.html":{}}}],["document.body.appendchild(this.element",{"_index":374,"title":{},"body":{"components/ModalComponent.html":{}}}],["document.body.classlist.add('modal",{"_index":382,"title":{},"body":{"components/ModalComponent.html":{}}}],["document.body.classlist.remove('modal",{"_index":385,"title":{},"body":{"components/ModalComponent.html":{}}}],["documentation",{"_index":554,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":6,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/NavComponent.html":{}}}],["down",{"_index":502,"title":{},"body":{"injectables/WebService.html":{}}}],["dynamic",{"_index":579,"title":{},"body":{"dependencies.html":{}}}],["e",{"_index":315,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["e2e",{"_index":648,"title":{},"body":{"index.html":{}}}],["e2eangular",{"_index":650,"title":{},"body":{"index.html":{}}}],["easy",{"_index":117,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["edit",{"_index":466,"title":{},"body":{"injectables/WebService.html":{}}}],["edittrivia",{"_index":436,"title":{},"body":{"injectables/WebService.html":{}}}],["edittrivia(eid",{"_index":464,"title":{},"body":{"injectables/WebService.html":{}}}],["eid",{"_index":460,"title":{},"body":{"injectables/WebService.html":{}}}],["el",{"_index":351,"title":{},"body":{"components/ModalComponent.html":{}}}],["el.nativeelement",{"_index":372,"title":{},"body":{"components/ModalComponent.html":{}}}],["el.target.classname",{"_index":376,"title":{},"body":{"components/ModalComponent.html":{}}}],["element",{"_index":49,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{}}}],["elementref",{"_index":352,"title":{},"body":{"components/ModalComponent.html":{}}}],["elements",{"_index":357,"title":{},"body":{"components/ModalComponent.html":{}}}],["email",{"_index":194,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["encapsulation",{"_index":339,"title":{},"body":{"components/ModalComponent.html":{}}}],["end",{"_index":511,"title":{},"body":{"injectables/WebService.html":{},"index.html":{}}}],["enter",{"_index":330,"title":{},"body":{"components/HomeComponent.html":{}}}],["episode",{"_index":270,"title":{},"body":{"components/EpisodesComponent.html":{},"injectables/WebService.html":{}}}],["episode'},{'name",{"_index":59,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{}}}],["episodecomponent",{"_index":58,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"coverage.html":{}}}],["episodes",{"_index":249,"title":{},"body":{"components/EpisodesComponent.html":{},"components/NavComponent.html":{},"injectables/WebService.html":{}}}],["episodes'},{'name",{"_index":61,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{}}}],["episodes.component.css",{"_index":255,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["episodes.component.html",{"_index":254,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["episodes_loaded",{"_index":256,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["episodescomponent",{"_index":60,"title":{"components/EpisodesComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"coverage.html":{}}}],["error",{"_index":164,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["error('modal",{"_index":412,"title":{},"body":{"injectables/ModalService.html":{}}}],["error(`modal",{"_index":419,"title":{},"body":{"injectables/ModalService.html":{}}}],["error.error.error",{"_index":221,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["errormessage",{"_index":87,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["event",{"_index":271,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["event.data._id",{"_index":323,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["eventcoalescing",{"_index":674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["example",{"_index":605,"title":{},"body":{"index.html":{}}}],["execute",{"_index":640,"title":{},"body":{"index.html":{}}}],["existing",{"_index":467,"title":{},"body":{"injectables/WebService.html":{}}}],["expired",{"_index":242,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["export",{"_index":45,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/NavComponent.html":{},"injectables/WebService.html":{}}}],["false",{"_index":275,"title":{},"body":{"components/EpisodesComponent.html":{},"components/ModalComponent.html":{}}}],["fetch",{"_index":472,"title":{},"body":{"injectables/WebService.html":{}}}],["field",{"_index":133,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{}}}],["fields",{"_index":130,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["file",{"_index":8,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/NavComponent.html":{},"injectables/WebService.html":{},"coverage.html":{}}}],["files",{"_index":616,"title":{},"body":{"index.html":{}}}],["filter",{"_index":305,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["find",{"_index":296,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["fitprovidedwidth",{"_index":284,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["floatingfilter",{"_index":306,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["following",{"_index":645,"title":{},"body":{"index.html":{}}}],["form",{"_index":118,"title":{},"body":{"components/AuthButtonComponent.html":{},"injectables/ModalService.html":{},"injectables/WebService.html":{}}}],["form.email",{"_index":541,"title":{},"body":{"injectables/WebService.html":{}}}],["form.name",{"_index":535,"title":{},"body":{"injectables/WebService.html":{}}}],["form.password",{"_index":539,"title":{},"body":{"injectables/WebService.html":{}}}],["form.username",{"_index":537,"title":{},"body":{"injectables/WebService.html":{}}}],["formbuilder",{"_index":104,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["formdata",{"_index":523,"title":{},"body":{"injectables/WebService.html":{}}}],["forms",{"_index":114,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["found",{"_index":420,"title":{},"body":{"injectables/ModalService.html":{}}}],["foundation",{"_index":13,"title":{},"body":{"components/AppComponent.html":{}}}],["framework",{"_index":652,"title":{},"body":{"index.html":{}}}],["front",{"_index":510,"title":{},"body":{"injectables/WebService.html":{}}}],["function",{"_index":112,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["generate",{"_index":621,"title":{},"body":{"index.html":{}}}],["generated",{"_index":595,"title":{},"body":{"index.html":{}}}],["getepisode",{"_index":437,"title":{},"body":{"injectables/WebService.html":{}}}],["getepisode(id",{"_index":470,"title":{},"body":{"injectables/WebService.html":{}}}],["getepisodes",{"_index":438,"title":{},"body":{"injectables/WebService.html":{}}}],["getrowstyle",{"_index":287,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["getting",{"_index":592,"title":{"index.html":{}},"body":{}}],["gettrivias",{"_index":439,"title":{},"body":{"injectables/WebService.html":{}}}],["gettrivias(id",{"_index":476,"title":{},"body":{"injectables/WebService.html":{}}}],["go",{"_index":269,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["grid",{"_index":251,"title":{},"body":{"components/EpisodesComponent.html":{},"dependencies.html":{}}}],["gridoptions",{"_index":257,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["handles",{"_index":508,"title":{},"body":{"injectables/WebService.html":{}}}],["header",{"_index":40,"title":{},"body":{"components/AppComponent.html":{},"components/NavComponent.html":{}}}],["headername",{"_index":309,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["headers",{"_index":527,"title":{},"body":{"injectables/WebService.html":{}}}],["headings",{"_index":258,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["helpbuilding",{"_index":628,"title":{},"body":{"index.html":{}}}],["hidden",{"_index":388,"title":{},"body":{"components/ModalComponent.html":{}}}],["hide",{"_index":360,"title":{},"body":{"components/ModalComponent.html":{},"injectables/ModalService.html":{}}}],["hold",{"_index":367,"title":{},"body":{"components/ModalComponent.html":{},"injectables/ModalService.html":{}}}],["holding",{"_index":468,"title":{},"body":{"injectables/WebService.html":{}}}],["home",{"_index":326,"title":{},"body":{"components/HomeComponent.html":{},"components/NavComponent.html":{}}}],["home'},{'name",{"_index":63,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{}}}],["home.component.css",{"_index":328,"title":{},"body":{"components/HomeComponent.html":{}}}],["home.component.html",{"_index":327,"title":{},"body":{"components/HomeComponent.html":{}}}],["homecomponent",{"_index":62,"title":{"components/HomeComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"coverage.html":{}}}],["homepage",{"_index":325,"title":{},"body":{"components/HomeComponent.html":{}}}],["html",{"_index":48,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{}}}],["http",{"_index":445,"title":{},"body":{"injectables/WebService.html":{}}}],["http://localhost:4200",{"_index":610,"title":{},"body":{"index.html":{}}}],["http://localhost:5000/api/v1.0/episodes",{"_index":520,"title":{},"body":{"injectables/WebService.html":{}}}],["http://localhost:5000/api/v1.0/episodes?pn='+'&ps",{"_index":518,"title":{},"body":{"injectables/WebService.html":{}}}],["http://localhost:5000/api/v1.0/register",{"_index":542,"title":{},"body":{"injectables/WebService.html":{}}}],["httpclient",{"_index":443,"title":{},"body":{"injectables/WebService.html":{}}}],["httpheaders",{"_index":514,"title":{},"body":{"injectables/WebService.html":{}}}],["httpoptions",{"_index":526,"title":{},"body":{"injectables/WebService.html":{}}}],["id",{"_index":349,"title":{},"body":{"components/ModalComponent.html":{},"injectables/ModalService.html":{},"injectables/WebService.html":{}}}],["identifier",{"_index":555,"title":{},"body":{"coverage.html":{}}}],["imdbrating",{"_index":308,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["implements",{"_index":336,"title":{},"body":{"components/ModalComponent.html":{}}}],["import",{"_index":41,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/NavComponent.html":{},"injectables/WebService.html":{}}}],["important",{"_index":392,"title":{},"body":{"components/ModalComponent.html":{}}}],["imports",{"_index":20,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/NavComponent.html":{}}}],["includes",{"_index":618,"title":{},"body":{"index.html":{}}}],["including",{"_index":660,"title":{},"body":{"index.html":{}}}],["incomplete",{"_index":122,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["index",{"_index":27,"title":{"index.html":{}},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/NavComponent.html":{},"injectables/WebService.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/NavComponent.html":{},"injectables/WebService.html":{}}}],["information",{"_index":659,"title":{},"body":{"index.html":{}}}],["injectable",{"_index":393,"title":{"injectables/ModalService.html":{},"injectables/WebService.html":{}},"body":{"injectables/ModalService.html":{},"injectables/WebService.html":{},"coverage.html":{}}}],["injectables",{"_index":394,"title":{},"body":{"injectables/ModalService.html":{},"injectables/WebService.html":{},"overview.html":{}}}],["injecting",{"_index":446,"title":{},"body":{"injectables/WebService.html":{}}}],["input",{"_index":135,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/ModalComponent.html":{}}}],["inputs",{"_index":348,"title":{},"body":{"components/ModalComponent.html":{}}}],["integrate",{"_index":115,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["interface",{"_index":73,"title":{},"body":{"components/AuthButtonComponent.html":{},"injectables/ModalService.html":{},"components/NavComponent.html":{}}}],["invalid",{"_index":131,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["invalidate",{"_index":155,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["isincompletelogin",{"_index":95,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["isincompleteregister",{"_index":96,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["isinvalidlogin",{"_index":97,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["isinvalidlogin(control",{"_index":128,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["isinvalidregister",{"_index":98,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["isinvalidregister(control",{"_index":136,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["isopen",{"_index":344,"title":{},"body":{"components/ModalComponent.html":{}}}],["isuntouchedlogin",{"_index":99,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["isuntouchedregister",{"_index":100,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["jquery",{"_index":585,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":483,"title":{},"body":{"injectables/WebService.html":{}}}],["karma",{"_index":641,"title":{},"body":{"index.html":{}}}],["last",{"_index":297,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["legend",{"_index":47,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{}}}],["links",{"_index":262,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["list",{"_index":623,"title":{},"body":{"index.html":{}}}],["load",{"_index":160,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/ModalComponent.html":{}}}],["loading",{"_index":277,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["local",{"_index":603,"title":{},"body":{"index.html":{}}}],["log",{"_index":243,"title":{},"body":{"components/AuthButtonComponent.html":{},"injectables/WebService.html":{}}}],["logged",{"_index":449,"title":{},"body":{"injectables/WebService.html":{}}}],["logic",{"_index":247,"title":{},"body":{"components/EpisodesComponent.html":{},"components/ModalComponent.html":{}}}],["login",{"_index":74,"title":{},"body":{"components/AuthButtonComponent.html":{},"injectables/WebService.html":{}}}],["login(creds",{"_index":479,"title":{},"body":{"injectables/WebService.html":{}}}],["loginform",{"_index":88,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["logout",{"_index":75,"title":{},"body":{"components/AuthButtonComponent.html":{},"injectables/WebService.html":{}}}],["logout(token",{"_index":487,"title":{},"body":{"injectables/WebService.html":{}}}],["management",{"_index":119,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["matching",{"_index":70,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/NavComponent.html":{},"injectables/WebService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":165,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["metadata",{"_index":16,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{}}}],["methods",{"_index":94,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"injectables/WebService.html":{}}}],["miscellaneous",{"_index":669,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["modal",{"_index":113,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{}}}],["modal'},{'name",{"_index":65,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{}}}],["modal.component",{"_index":406,"title":{},"body":{"injectables/ModalService.html":{}}}],["modal.component.css",{"_index":342,"title":{},"body":{"components/ModalComponent.html":{}}}],["modal.component.html",{"_index":343,"title":{},"body":{"components/ModalComponent.html":{}}}],["modal.id",{"_index":408,"title":{},"body":{"injectables/ModalService.html":{}}}],["modal.open",{"_index":421,"title":{},"body":{"injectables/ModalService.html":{}}}],["modal.service",{"_index":370,"title":{},"body":{"components/ModalComponent.html":{}}}],["modal/modal.component",{"_index":184,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["modal/modal.service",{"_index":182,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["modal?.close",{"_index":423,"title":{},"body":{"injectables/ModalService.html":{}}}],["modalcomponent",{"_index":64,"title":{"components/ModalComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/NavComponent.html":{},"coverage.html":{}}}],["modals",{"_index":335,"title":{},"body":{"components/ModalComponent.html":{},"injectables/ModalService.html":{}}}],["modalservice",{"_index":79,"title":{"injectables/ModalService.html":{}},"body":{"components/AuthButtonComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"coverage.html":{}}}],["modify",{"_index":615,"title":{},"body":{"index.html":{}}}],["module",{"_index":116,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["modules",{"_index":665,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":658,"title":{},"body":{"index.html":{}}}],["name",{"_index":53,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/NavComponent.html":{},"injectables/WebService.html":{}}}],["namefor",{"_index":622,"title":{},"body":{"index.html":{}}}],["nav.component.html",{"_index":426,"title":{},"body":{"components/NavComponent.html":{}}}],["nav/nav.component",{"_index":44,"title":{},"body":{"components/AppComponent.html":{}}}],["navcomponent",{"_index":22,"title":{"components/NavComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"coverage.html":{}}}],["navigate",{"_index":609,"title":{},"body":{"index.html":{}}}],["navigation",{"_index":66,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{}}}],["nbsp;&nbsp;click",{"_index":329,"title":{},"body":{"components/HomeComponent.html":{}}}],["needs",{"_index":655,"title":{},"body":{"index.html":{}}}],["new",{"_index":172,"title":{},"body":{"components/AuthButtonComponent.html":{},"injectables/ModalService.html":{},"injectables/WebService.html":{},"coverage.html":{},"index.html":{}}}],["ng",{"_index":606,"title":{},"body":{"index.html":{}}}],["ngondestroy",{"_index":346,"title":{},"body":{"components/ModalComponent.html":{}}}],["ngoninit",{"_index":101,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/ModalComponent.html":{}}}],["none",{"_index":384,"title":{},"body":{"components/ModalComponent.html":{}}}],["number",{"_index":503,"title":{},"body":{"injectables/WebService.html":{}}}],["object",{"_index":484,"title":{},"body":{"injectables/WebService.html":{}}}],["observable",{"_index":451,"title":{},"body":{"injectables/WebService.html":{}}}],["odd",{"_index":301,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["ondestroy",{"_index":338,"title":{},"body":{"components/ModalComponent.html":{}}}],["one",{"_index":473,"title":{},"body":{"injectables/WebService.html":{},"index.html":{}}}],["oninit",{"_index":337,"title":{},"body":{"components/ModalComponent.html":{}}}],["onrowclicked",{"_index":259,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["onrowclicked(event",{"_index":265,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["op",{"_index":463,"title":{},"body":{"injectables/WebService.html":{}}}],["opacity",{"_index":390,"title":{},"body":{"components/ModalComponent.html":{}}}],["open",{"_index":347,"title":{},"body":{"components/ModalComponent.html":{},"injectables/ModalService.html":{},"index.html":{}}}],["open(id",{"_index":399,"title":{},"body":{"injectables/ModalService.html":{}}}],["optimizes",{"_index":636,"title":{},"body":{"index.html":{}}}],["optional",{"_index":108,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"injectables/WebService.html":{}}}],["optionally",{"_index":355,"title":{},"body":{"components/ModalComponent.html":{}}}],["out",{"_index":244,"title":{},"body":{"components/AuthButtonComponent.html":{},"injectables/WebService.html":{}}}],["overflow",{"_index":387,"title":{},"body":{"components/ModalComponent.html":{}}}],["overview",{"_index":664,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["p",{"_index":312,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["p.data.episodenumber",{"_index":316,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["p.data.seasonnumber",{"_index":314,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["package",{"_index":572,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":159,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/ModalComponent.html":{},"injectables/WebService.html":{},"index.html":{}}}],["pageindex",{"_index":292,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["pages",{"_index":263,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["pagesize",{"_index":290,"title":{},"body":{"components/EpisodesComponent.html":{},"injectables/WebService.html":{}}}],["pagination",{"_index":509,"title":{},"body":{"injectables/WebService.html":{}}}],["param",{"_index":185,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"injectables/WebService.html":{}}}],["parameters",{"_index":107,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"injectables/WebService.html":{}}}],["params",{"_index":288,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["params.api.paginationgetcurrentpage",{"_index":293,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["params.rowindex",{"_index":295,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["part",{"_index":178,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/NavComponent.html":{}}}],["particular",{"_index":368,"title":{},"body":{"components/ModalComponent.html":{}}}],["password",{"_index":192,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["performance",{"_index":637,"title":{},"body":{"index.html":{}}}],["pipes",{"_index":627,"title":{},"body":{"index.html":{}}}],["pointer",{"_index":280,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["post",{"_index":492,"title":{},"body":{"injectables/WebService.html":{}}}],["postdata",{"_index":522,"title":{},"body":{"injectables/WebService.html":{}}}],["postdata.append(\"text",{"_index":524,"title":{},"body":{"injectables/WebService.html":{}}}],["postdata.append('email",{"_index":540,"title":{},"body":{"injectables/WebService.html":{}}}],["postdata.append('name",{"_index":534,"title":{},"body":{"injectables/WebService.html":{}}}],["postdata.append('password",{"_index":538,"title":{},"body":{"injectables/WebService.html":{}}}],["postdata.append('username",{"_index":536,"title":{},"body":{"injectables/WebService.html":{}}}],["posttrivia",{"_index":440,"title":{},"body":{"injectables/WebService.html":{}}}],["posttrivia(id",{"_index":490,"title":{},"body":{"injectables/WebService.html":{}}}],["powerful",{"_index":619,"title":{},"body":{"index.html":{}}}],["private",{"_index":187,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{}}}],["production",{"_index":635,"title":{},"body":{"index.html":{}}}],["project",{"_index":594,"title":{},"body":{"index.html":{}}}],["properties",{"_index":28,"title":{"properties.html":{}},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/NavComponent.html":{},"injectables/WebService.html":{},"properties.html":{}}}],["protected",{"_index":91,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/NavComponent.html":{}}}],["provide",{"_index":72,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{}}}],["providedin",{"_index":407,"title":{},"body":{"injectables/ModalService.html":{}}}],["providehttpclient",{"_index":676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providerouter(routes",{"_index":675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":77,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"miscellaneous/variables.html":{}}}],["provides",{"_index":431,"title":{},"body":{"injectables/WebService.html":{}}}],["providezonechangedetection",{"_index":673,"title":{},"body":{"miscellaneous/variables.html":{}}}],["public",{"_index":89,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["pulls",{"_index":506,"title":{},"body":{"injectables/WebService.html":{}}}],["purposes",{"_index":512,"title":{},"body":{"injectables/WebService.html":{}}}],["rating",{"_index":310,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["reactiveformsmodule",{"_index":83,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["readonly",{"_index":92,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/NavComponent.html":{}}}],["records",{"_index":507,"title":{},"body":{"injectables/WebService.html":{}}}],["reference",{"_index":175,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"index.html":{}}}],["references",{"_index":662,"title":{},"body":{"index.html":{}}}],["register",{"_index":76,"title":{},"body":{"components/AuthButtonComponent.html":{},"injectables/WebService.html":{}}}],["register(form",{"_index":494,"title":{},"body":{"injectables/WebService.html":{}}}],["registerform",{"_index":90,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["reload",{"_index":613,"title":{},"body":{"index.html":{}}}],["remove",{"_index":362,"title":{},"body":{"components/ModalComponent.html":{},"injectables/ModalService.html":{}}}],["remove(modal",{"_index":401,"title":{},"body":{"injectables/ModalService.html":{}}}],["rendered",{"_index":14,"title":{},"body":{"components/AppComponent.html":{}}}],["representing",{"_index":126,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["request",{"_index":154,"title":{},"body":{"components/AuthButtonComponent.html":{},"injectables/WebService.html":{}}}],["requirements",{"_index":162,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["resources",{"_index":657,"title":{},"body":{"index.html":{}}}],["response['data",{"_index":320,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["response['token",{"_index":229,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["response['user']['admin",{"_index":235,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["response['user']['name",{"_index":233,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["response['user']['username",{"_index":231,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["results",{"_index":69,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/NavComponent.html":{},"injectables/WebService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":195,"title":{},"body":{"components/AuthButtonComponent.html":{},"injectables/WebService.html":{}}}],["returned",{"_index":166,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{}}}],["returns",{"_index":123,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"injectables/WebService.html":{}}}],["rgba(0,0,0,0.5",{"_index":282,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["root",{"_index":19,"title":{},"body":{"components/AppComponent.html":{},"injectables/ModalService.html":{}}}],["root'},{'name",{"_index":54,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{}}}],["router",{"_index":260,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["routermodule",{"_index":252,"title":{},"body":{"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/NavComponent.html":{}}}],["routeroutlet",{"_index":21,"title":{},"body":{"components/AppComponent.html":{}}}],["row",{"_index":268,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["rowindexonpage",{"_index":294,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["rows",{"_index":299,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["rowstyle",{"_index":278,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["run",{"_index":604,"title":{},"body":{"index.html":{}}}],["runner",{"_index":643,"title":{},"body":{"index.html":{}}}],["running",{"_index":608,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":516,"title":{},"body":{"injectables/WebService.html":{},"dependencies.html":{}}}],["s",{"_index":313,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["scaffolding",{"_index":617,"title":{},"body":{"index.html":{}}}],["schematics",{"_index":625,"title":{},"body":{"index.html":{}}}],["select",{"_index":300,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["selector",{"_index":17,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{}}}],["send",{"_index":153,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["serveonce",{"_index":607,"title":{},"body":{"index.html":{}}}],["server",{"_index":601,"title":{},"body":{"index.html":{}}}],["serves",{"_index":12,"title":{},"body":{"components/AppComponent.html":{}}}],["service",{"_index":111,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/ModalComponent.html":{},"injectables/WebService.html":{}}}],["session",{"_index":149,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["sessionstorage",{"_index":93,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/NavComponent.html":{}}}],["sessionstorage.removeitem('admin",{"_index":240,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["sessionstorage.removeitem('loggedinname",{"_index":239,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["sessionstorage.removeitem('loggedinusername",{"_index":238,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["sessionstorage.removeitem('x",{"_index":237,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["sessionstorage['admin",{"_index":234,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["sessionstorage['loggedinname",{"_index":232,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/NavComponent.html":{}}}],["sessionstorage['loggedinusername",{"_index":230,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["sessionstorage['x",{"_index":227,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["sessionstorage[\\'loggedinname",{"_index":429,"title":{},"body":{"components/NavComponent.html":{}}}],["set",{"_index":359,"title":{},"body":{"components/ModalComponent.html":{}}}],["settimeout",{"_index":222,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["site",{"_index":331,"title":{},"body":{"components/HomeComponent.html":{}}}],["size",{"_index":505,"title":{},"body":{"injectables/WebService.html":{}}}],["sortable",{"_index":307,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/NavComponent.html":{},"injectables/WebService.html":{},"index.html":{}}}],["specified",{"_index":474,"title":{},"body":{"injectables/WebService.html":{}}}],["specify",{"_index":677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["speed",{"_index":513,"title":{},"body":{"injectables/WebService.html":{},"index.html":{}}}],["src/.../app.config.ts",{"_index":671,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/app.component.ts",{"_index":9,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:18",{"_index":37,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.config.ts",{"_index":559,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/web.service.ts",{"_index":430,"title":{},"body":{"injectables/WebService.html":{},"coverage.html":{}}}],["src/app/web.service.ts:110",{"_index":457,"title":{},"body":{"injectables/WebService.html":{}}}],["src/app/web.service.ts:124",{"_index":495,"title":{},"body":{"injectables/WebService.html":{}}}],["src/app/web.service.ts:138",{"_index":480,"title":{},"body":{"injectables/WebService.html":{}}}],["src/app/web.service.ts:14",{"_index":444,"title":{},"body":{"injectables/WebService.html":{}}}],["src/app/web.service.ts:153",{"_index":488,"title":{},"body":{"injectables/WebService.html":{}}}],["src/app/web.service.ts:168",{"_index":448,"title":{},"body":{"injectables/WebService.html":{}}}],["src/app/web.service.ts:27",{"_index":475,"title":{},"body":{"injectables/WebService.html":{}}}],["src/app/web.service.ts:36",{"_index":471,"title":{},"body":{"injectables/WebService.html":{}}}],["src/app/web.service.ts:45",{"_index":477,"title":{},"body":{"injectables/WebService.html":{}}}],["src/app/web.service.ts:56",{"_index":491,"title":{},"body":{"injectables/WebService.html":{}}}],["src/app/web.service.ts:75",{"_index":465,"title":{},"body":{"injectables/WebService.html":{}}}],["src/app/web.service.ts:94",{"_index":498,"title":{},"body":{"injectables/WebService.html":{}}}],["src/authbutton/authbutton.component.ts",{"_index":71,"title":{},"body":{"components/AuthButtonComponent.html":{},"coverage.html":{}}}],["src/authbutton/authbutton.component.ts:100",{"_index":140,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["src/authbutton/authbutton.component.ts:108",{"_index":127,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["src/authbutton/authbutton.component.ts:118",{"_index":163,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["src/authbutton/authbutton.component.ts:136",{"_index":141,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["src/authbutton/authbutton.component.ts:156",{"_index":152,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["src/authbutton/authbutton.component.ts:179",{"_index":174,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["src/authbutton/authbutton.component.ts:24",{"_index":168,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["src/authbutton/authbutton.component.ts:28",{"_index":171,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["src/authbutton/authbutton.component.ts:32",{"_index":105,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["src/authbutton/authbutton.component.ts:42",{"_index":170,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["src/authbutton/authbutton.component.ts:48",{"_index":158,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["src/authbutton/authbutton.component.ts:66",{"_index":129,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["src/authbutton/authbutton.component.ts:74",{"_index":138,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["src/authbutton/authbutton.component.ts:82",{"_index":120,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["src/authbutton/authbutton.component.ts:92",{"_index":137,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["src/episode/episode.component.ts",{"_index":565,"title":{},"body":{"coverage.html":{}}}],["src/episodes/episodes.component.ts",{"_index":246,"title":{},"body":{"components/EpisodesComponent.html":{},"coverage.html":{}}}],["src/episodes/episodes.component.ts:24",{"_index":274,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["src/episodes/episodes.component.ts:28",{"_index":276,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["src/episodes/episodes.component.ts:32",{"_index":317,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["src/episodes/episodes.component.ts:47",{"_index":302,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["src/episodes/episodes.component.ts:59",{"_index":261,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["src/episodes/episodes.component.ts:73",{"_index":264,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["src/episodes/episodes.component.ts:84",{"_index":266,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["src/home/home.component.ts",{"_index":324,"title":{},"body":{"components/HomeComponent.html":{},"coverage.html":{}}}],["src/modal/modal.component.ts",{"_index":334,"title":{},"body":{"components/ModalComponent.html":{},"coverage.html":{}}}],["src/modal/modal.component.ts:17",{"_index":354,"title":{},"body":{"components/ModalComponent.html":{}}}],["src/modal/modal.component.ts:21",{"_index":366,"title":{},"body":{"components/ModalComponent.html":{}}}],["src/modal/modal.component.ts:26",{"_index":353,"title":{},"body":{"components/ModalComponent.html":{}}}],["src/modal/modal.component.ts:41",{"_index":363,"title":{},"body":{"components/ModalComponent.html":{}}}],["src/modal/modal.component.ts:54",{"_index":361,"title":{},"body":{"components/ModalComponent.html":{}}}],["src/modal/modal.component.ts:62",{"_index":365,"title":{},"body":{"components/ModalComponent.html":{}}}],["src/modal/modal.component.ts:71",{"_index":358,"title":{},"body":{"components/ModalComponent.html":{}}}],["src/modal/modal.service.ts",{"_index":395,"title":{},"body":{"injectables/ModalService.html":{},"coverage.html":{}}}],["src/modal/modal.service.ts:12",{"_index":403,"title":{},"body":{"injectables/ModalService.html":{}}}],["src/modal/modal.service.ts:18",{"_index":397,"title":{},"body":{"injectables/ModalService.html":{}}}],["src/modal/modal.service.ts:29",{"_index":402,"title":{},"body":{"injectables/ModalService.html":{}}}],["src/modal/modal.service.ts:37",{"_index":400,"title":{},"body":{"injectables/ModalService.html":{}}}],["src/modal/modal.service.ts:47",{"_index":398,"title":{},"body":{"injectables/ModalService.html":{}}}],["src/nav/nav.component.ts",{"_index":424,"title":{},"body":{"components/NavComponent.html":{},"coverage.html":{}}}],["src/nav/nav.component.ts:19",{"_index":427,"title":{},"body":{"components/NavComponent.html":{}}}],["standalone",{"_index":81,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/HomeComponent.html":{},"components/NavComponent.html":{}}}],["start",{"_index":602,"title":{},"body":{"index.html":{}}}],["started",{"_index":593,"title":{"index.html":{}},"body":{}}],["statements",{"_index":556,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":486,"title":{},"body":{"injectables/WebService.html":{}}}],["storage",{"_index":150,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["store",{"_index":145,"title":{},"body":{"components/AuthButtonComponent.html":{},"index.html":{}}}],["string",{"_index":32,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"injectables/WebService.html":{}}}],["styles",{"_index":333,"title":{},"body":{"components/ModalComponent.html":{}}}],["styleurl",{"_index":25,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{}}}],["styleurls",{"_index":341,"title":{},"body":{"components/ModalComponent.html":{}}}],["subbmited",{"_index":173,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["submit",{"_index":142,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["submitted",{"_index":169,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["subscribe(response",{"_index":215,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["successful",{"_index":454,"title":{},"body":{"injectables/WebService.html":{}}}],["successfully",{"_index":219,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["such",{"_index":626,"title":{},"body":{"index.html":{}}}],["suits",{"_index":654,"title":{},"body":{"index.html":{}}}],["tab",{"_index":39,"title":{},"body":{"components/AppComponent.html":{}}}],["table",{"_index":571,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":570,"title":{},"body":{"coverage.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{}}}],["templateurl",{"_index":23,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{}}}],["test",{"_index":642,"title":{},"body":{"index.html":{}}}],["testing",{"_index":649,"title":{},"body":{"index.html":{}}}],["testrunning",{"_index":647,"title":{},"body":{"index.html":{}}}],["tests",{"_index":639,"title":{},"body":{"index.html":{}}}],["this.close",{"_index":377,"title":{},"body":{"components/ModalComponent.html":{}}}],["this.data",{"_index":319,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["this.element",{"_index":371,"title":{},"body":{"components/ModalComponent.html":{}}}],["this.element.addeventlistener('click",{"_index":375,"title":{},"body":{"components/ModalComponent.html":{}}}],["this.element.remove",{"_index":379,"title":{},"body":{"components/ModalComponent.html":{}}}],["this.element.style.display",{"_index":380,"title":{},"body":{"components/ModalComponent.html":{}}}],["this.episodes_loaded",{"_index":321,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["this.errormessage",{"_index":212,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.formbuilder.group",{"_index":189,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.http.delete",{"_index":533,"title":{},"body":{"injectables/WebService.html":{}}}],["this.http.get",{"_index":517,"title":{},"body":{"injectables/WebService.html":{}}}],["this.http.get('http://localhost:5000/api/v1.0/episodes",{"_index":521,"title":{},"body":{"injectables/WebService.html":{}}}],["this.http.get('http://localhost:5000/api/v1.0/login",{"_index":550,"title":{},"body":{"injectables/WebService.html":{}}}],["this.http.get('http://localhost:5000/api/v1.0/logout",{"_index":551,"title":{},"body":{"injectables/WebService.html":{}}}],["this.http.patch",{"_index":531,"title":{},"body":{"injectables/WebService.html":{}}}],["this.http.patch('http://localhost:5000/api/v1.0/ban",{"_index":552,"title":{},"body":{"injectables/WebService.html":{}}}],["this.http.post",{"_index":528,"title":{},"body":{"injectables/WebService.html":{}}}],["this.isinvalidlogin('password",{"_index":201,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.isinvalidlogin('username",{"_index":200,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.isinvalidregister('email",{"_index":210,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.isinvalidregister('name",{"_index":207,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.isinvalidregister('password",{"_index":209,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.isinvalidregister('username",{"_index":208,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.isopen",{"_index":383,"title":{},"body":{"components/ModalComponent.html":{}}}],["this.isuntouchedlogin",{"_index":202,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.isuntouchedregister",{"_index":211,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.loginform",{"_index":188,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.loginform.controls.password.pristine",{"_index":199,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.loginform.controls.username.pristine",{"_index":198,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.loginform.controls[control].invalid",{"_index":196,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.loginform.controls[control].touched",{"_index":197,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.loginform.reset",{"_index":226,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.loginform.value",{"_index":225,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.modals",{"_index":416,"title":{},"body":{"injectables/ModalService.html":{}}}],["this.modals.filter(x",{"_index":417,"title":{},"body":{"injectables/ModalService.html":{}}}],["this.modals.find(x",{"_index":409,"title":{},"body":{"injectables/ModalService.html":{}}}],["this.modals.push(modal",{"_index":415,"title":{},"body":{"injectables/ModalService.html":{}}}],["this.modalservice.add(this",{"_index":373,"title":{},"body":{"components/ModalComponent.html":{}}}],["this.modalservice.close",{"_index":217,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.modalservice.remove(this",{"_index":378,"title":{},"body":{"components/ModalComponent.html":{}}}],["this.pagesize",{"_index":519,"title":{},"body":{"injectables/WebService.html":{}}}],["this.registerform",{"_index":193,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.registerform.controls.password.pristine",{"_index":206,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.registerform.controls.username.pristine",{"_index":205,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.registerform.controls[control].invalid",{"_index":203,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.registerform.controls[control].touched",{"_index":204,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.registerform.reset",{"_index":216,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.registerform.value",{"_index":214,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.router.navigate(['/episodes",{"_index":322,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["this.webservice.login",{"_index":224,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.webservice.logout",{"_index":236,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.webservice.register",{"_index":213,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["throw",{"_index":411,"title":{},"body":{"injectables/ModalService.html":{}}}],["tid",{"_index":456,"title":{},"body":{"injectables/WebService.html":{}}}],["title",{"_index":29,"title":{},"body":{"components/AppComponent.html":{},"components/EpisodesComponent.html":{}}}],["token",{"_index":146,"title":{},"body":{"components/AuthButtonComponent.html":{},"injectables/WebService.html":{}}}],["token:any",{"_index":529,"title":{},"body":{"injectables/WebService.html":{}}}],["tools",{"_index":620,"title":{},"body":{"index.html":{}}}],["top",{"_index":15,"title":{},"body":{"components/AppComponent.html":{}}}],["tree",{"_index":7,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{}}}],["trivia",{"_index":459,"title":{},"body":{"injectables/WebService.html":{}}}],["trivia.editedtrivia",{"_index":530,"title":{},"body":{"injectables/WebService.html":{}}}],["trivia.trivia",{"_index":525,"title":{},"body":{"injectables/WebService.html":{}}}],["trivias",{"_index":478,"title":{},"body":{"injectables/WebService.html":{}}}],["true",{"_index":82,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"miscellaneous/variables.html":{}}}],["tslib",{"_index":588,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":30,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"injectables/WebService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["unique",{"_index":413,"title":{},"body":{"injectables/ModalService.html":{}}}],["unit",{"_index":638,"title":{},"body":{"index.html":{}}}],["untouched",{"_index":139,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["up",{"_index":501,"title":{},"body":{"injectables/WebService.html":{}}}],["updated",{"_index":469,"title":{},"body":{"injectables/WebService.html":{}}}],["use",{"_index":644,"title":{},"body":{"index.html":{}}}],["used",{"_index":38,"title":{},"body":{"components/AppComponent.html":{},"components/NavComponent.html":{},"injectables/WebService.html":{}}}],["user",{"_index":147,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"injectables/WebService.html":{}}}],["username",{"_index":190,"title":{},"body":{"components/AuthButtonComponent.html":{},"injectables/WebService.html":{}}}],["users",{"_index":482,"title":{},"body":{"injectables/WebService.html":{}}}],["using",{"_index":596,"title":{},"body":{"index.html":{}}}],["validate",{"_index":134,"title":{},"body":{"components/AuthButtonComponent.html":{},"injectables/WebService.html":{}}}],["validators",{"_index":180,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["validators.required",{"_index":191,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["value",{"_index":34,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/NavComponent.html":{},"injectables/WebService.html":{},"miscellaneous/variables.html":{}}}],["valuegetter",{"_index":311,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["var",{"_index":51,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{}}}],["variable",{"_index":560,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":670,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":598,"title":{},"body":{"index.html":{},"properties.html":{}}}],["viewencapsulation",{"_index":369,"title":{},"body":{"components/ModalComponent.html":{}}}],["viewencapsulation.none",{"_index":340,"title":{},"body":{"components/ModalComponent.html":{}}}],["visit",{"_index":663,"title":{},"body":{"index.html":{}}}],["void",{"_index":151,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{}}}],["vote",{"_index":499,"title":{},"body":{"injectables/WebService.html":{}}}],["vote?vote",{"_index":532,"title":{},"body":{"injectables/WebService.html":{}}}],["votedirection",{"_index":497,"title":{},"body":{"injectables/WebService.html":{}}}],["votetrivia",{"_index":441,"title":{},"body":{"injectables/WebService.html":{}}}],["votetrivia(eid",{"_index":496,"title":{},"body":{"injectables/WebService.html":{}}}],["web",{"_index":110,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"injectables/WebService.html":{}}}],["webservice",{"_index":78,"title":{"injectables/WebService.html":{}},"body":{"components/AuthButtonComponent.html":{},"components/EpisodesComponent.html":{},"injectables/WebService.html":{},"coverage.html":{}}}],["well",{"_index":485,"title":{},"body":{"injectables/WebService.html":{}}}],["whenever",{"_index":614,"title":{},"body":{"index.html":{}}}],["width",{"_index":285,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["within",{"_index":177,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/ModalComponent.html":{}}}],["x",{"_index":418,"title":{},"body":{"injectables/ModalService.html":{},"injectables/WebService.html":{}}}],["x.id",{"_index":410,"title":{},"body":{"injectables/ModalService.html":{}}}],["x.isopen",{"_index":422,"title":{},"body":{"injectables/ModalService.html":{}}}],["zone.js",{"_index":590,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n    \n        Description\n    \n    \n        The AppComponent of Angular which serves as the foundation\nother components are rendered on top of\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n\n            \n                imports\n                \n                            RouterOutlet\n                                NavComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n            \n                styleUrl\n                ./app.component.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'bcsFanSiteFE'\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:18\n                        \n                    \n\n            \n                \n                    The title of the app, used in the tab header\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { NavComponent } from '../nav/nav.component'\n/**\n * The AppComponent of Angular which serves as the foundation\n * other components are rendered on top of\n */\n@Component({\n  selector: 'app-root',\n  imports: [RouterOutlet, NavComponent],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.css'\n})\nexport class AppComponent {\n  /**\n   * The title of the app, used in the tab header\n   */\n  title = 'bcsFanSiteFE';\n}\n\n    \n\n    \n        \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthButtonComponent', 'selector': 'auth-button'},{'name': 'EpisodeComponent', 'selector': 'episode'},{'name': 'EpisodesComponent', 'selector': 'episodes'},{'name': 'HomeComponent', 'selector': 'home'},{'name': 'ModalComponent', 'selector': 'modal'},{'name': 'NavComponent', 'selector': 'navigation'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AuthButtonComponent.html":{"url":"components/AuthButtonComponent.html","title":"component - AuthButtonComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AuthButtonComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/authButton/authButton.component.ts\n\n\n\n    \n        Description\n    \n    \n        A component to provide an interface to login,\nlogout and register\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                                WebService\n                                ModalService\n                \n            \n\n\n            \n                selector\n                auth-button\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            ReactiveFormsModule\n                            CommonModule\n                                ModalComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                authButton.component.html\n            \n\n\n\n            \n                styleUrl\n                authButton.component.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                errorMessage\n                            \n                            \n                                loginForm\n                            \n                            \n                                    Public\n                                modalService\n                            \n                            \n                                registerForm\n                            \n                            \n                                    Protected\n                                    Readonly\n                                sessionStorage\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isIncompleteLogin\n                            \n                            \n                                isIncompleteRegister\n                            \n                            \n                                isInvalidLogin\n                            \n                            \n                                isInvalidRegister\n                            \n                            \n                                isUntouchedLogin\n                            \n                            \n                                isUntouchedRegister\n                            \n                            \n                                login\n                            \n                            \n                                logout\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(webService: WebService, modalService: ModalService, formBuilder: FormBuilder)\n                    \n                \n                        \n                            \n                                Defined in src/authButton/authButton.component.ts:32\n                            \n                        \n\n                \n                    \n                            Constructor for the AuthButton\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        webService\n                                                  \n                                                        \n                                                                        WebService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Connect to the Web Service\n\n                                                        \n                                                \n                                                \n                                                        modalService\n                                                  \n                                                        \n                                                                        ModalService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Provide function for modal forms\n\n                                                        \n                                                \n                                                \n                                                        formBuilder\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Integrate with the angular module FormBuilder for easy form management\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isIncompleteLogin\n                        \n                    \n                \n            \n            \n                \nisIncompleteLogin()\n                \n            \n\n\n                    \n                        \n                            Defined in src/authButton/authButton.component.ts:82\n                        \n                    \n\n\n            \n                \n                        Check if the Login form is incomplete\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                A booleans representing if the form is incomplete\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isIncompleteRegister\n                        \n                    \n                \n            \n            \n                \nisIncompleteRegister()\n                \n            \n\n\n                    \n                        \n                            Defined in src/authButton/authButton.component.ts:108\n                        \n                    \n\n\n            \n                \n                        Check if the Register form is incomplete\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                A boolean representing if the form is incomplete\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isInvalidLogin\n                        \n                    \n                \n            \n            \n                \nisInvalidLogin(control: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/authButton/authButton.component.ts:66\n                        \n                    \n\n\n            \n                \n                        Check if fields of the Login form are invalid\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                control\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The form field to validate\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                A boolean representing if the input fields are invalid\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isInvalidRegister\n                        \n                    \n                \n            \n            \n                \nisInvalidRegister(control: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/authButton/authButton.component.ts:92\n                        \n                    \n\n\n            \n                \n                        Check if fields of the Register form are invalid\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                control\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The form field to validate\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                A boolean representing if the input fields are invalid\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isUntouchedLogin\n                        \n                    \n                \n            \n            \n                \nisUntouchedLogin()\n                \n            \n\n\n                    \n                        \n                            Defined in src/authButton/authButton.component.ts:74\n                        \n                    \n\n\n            \n                \n                        Check if fields of the Login form are untouched\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                A boolean representing if the input fields are untouched\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isUntouchedRegister\n                        \n                    \n                \n            \n            \n                \nisUntouchedRegister()\n                \n            \n\n\n                    \n                        \n                            Defined in src/authButton/authButton.component.ts:100\n                        \n                    \n\n\n            \n                \n                        Check if fields of the Register form are untouched\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                A boolean representing if the input fields are untouched\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin()\n                \n            \n\n\n                    \n                        \n                            Defined in src/authButton/authButton.component.ts:136\n                        \n                    \n\n\n            \n                \n                        Submit the details from the login form to the API\nand store token, user data in session storage\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logout\n                        \n                    \n                \n            \n            \n                \nlogout()\n                \n            \n\n\n                    \n                        \n                            Defined in src/authButton/authButton.component.ts:156\n                        \n                    \n\n\n            \n                \n                        Send a request to the API to invalidate the current token, and clear it from storage\\\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/authButton/authButton.component.ts:48\n                        \n                    \n\n\n            \n                \n                        On page load, define requirements for the login and register forms\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister()\n                \n            \n\n\n                    \n                        \n                            Defined in src/authButton/authButton.component.ts:118\n                        \n                    \n\n\n            \n                \n                        Submit the details from the Register form to the API\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        errorMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/authButton/authButton.component.ts:32\n                        \n                    \n\n            \n                \n                    Store any error message returned by the api for display to the user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loginForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/authButton/authButton.component.ts:24\n                        \n                    \n\n            \n                \n                    A form to store login info submitted by the user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        modalService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ModalService\n\n                    \n                \n                    \n                        \n                                Defined in src/authButton/authButton.component.ts:42\n                        \n                    \n\n            \n                \n                    Provide function for modal forms\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/authButton/authButton.component.ts:28\n                        \n                    \n\n            \n                \n                    A form to store new user info subbmited by the user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        sessionStorage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : sessionStorage\n                    \n                \n                    \n                        \n                                Defined in src/authButton/authButton.component.ts:179\n                        \n                    \n\n            \n                \n                    A reference to the sessionStorage interface to be accessed within the HTML\npart of this component\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport {WebService} from '../app/web.service';\nimport {FormBuilder, ReactiveFormsModule, Validators} from '@angular/forms';\nimport {ModalService} from '../modal/modal.service';\nimport {CommonModule} from '@angular/common';\nimport {ModalComponent} from '../modal/modal.component';\n\n/**\n * A component to provide an interface to login,\n * logout and register\n */\n@Component({\n  selector: 'auth-button',\n  templateUrl: 'authButton.component.html',\n  styleUrl: 'authButton.component.css',\n  imports: [ReactiveFormsModule, CommonModule, ModalComponent],\n  providers: [WebService, ModalService],\n  standalone: true\n})\nexport class AuthButtonComponent {\n  /**\n   * A form to store login info submitted by the user\n   */\n  loginForm: any;\n  /**\n   * A form to store new user info subbmited by the user\n   */\n  registerForm: any;\n  /**\n   * Store any error message returned by the api for display to the user\n   */\n  errorMessage: string = '';\n\n  /**\n   * Constructor for the AuthButton\n   * @constructor\n   * @param webService Connect to the Web Service\n   * @param modalService Provide function for modal forms\n   * @param formBuilder Integrate with the angular module FormBuilder for easy form management\n   */\n  constructor(private webService: WebService,\n              public modalService: ModalService,\n              private formBuilder: FormBuilder) {}\n\n  /**\n   * On page load, define requirements for the login and register forms\n   */\n  ngOnInit(): void {\n    this.loginForm = this.formBuilder.group( {\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n    })\n    this.registerForm = this.formBuilder.group( {\n      name: ['', Validators.required],\n      username: ['', Validators.required],\n      password: ['', Validators.required],\n      email: ['', Validators.required]\n    })\n  }\n\n  /**\n   * Check if fields of the Login form are invalid\n   * @param control The form field to validate\n   * @returns A boolean representing if the input fields are invalid\n   */\n  isInvalidLogin(control: any): boolean {\n    return this.loginForm.controls[control].invalid &&\n      this.loginForm.controls[control].touched;\n  }\n  /**\n   * Check if fields of the Login form are untouched\n   * @returns A boolean representing if the input fields are untouched\n   */\n  isUntouchedLogin(): boolean {\n    return this.loginForm.controls.username.pristine ||\n      this.loginForm.controls.password.pristine\n  }\n  /**\n   * Check if the Login form is incomplete\n   * @returns A booleans representing if the form is incomplete\n   */\n  isIncompleteLogin(): boolean {\n    return this.isInvalidLogin('username') ||\n      this.isInvalidLogin('password') ||\n      this.isUntouchedLogin();\n  }\n  /**\n   * Check if fields of the Register form are invalid\n   * @param control The form field to validate\n   * @returns A boolean representing if the input fields are invalid\n   */\n  isInvalidRegister(control: any): boolean {\n    return this.registerForm.controls[control].invalid &&\n      this.registerForm.controls[control].touched;\n  }\n  /**\n   * Check if fields of the Register form are untouched\n   * @returns A boolean representing if the input fields are untouched\n   */\n  isUntouchedRegister(): boolean {\n    return this.registerForm.controls.username.pristine ||\n      this.registerForm.controls.password.pristine\n  }\n  /**\n   * Check if the Register form is incomplete\n   * @returns A boolean representing if the form is incomplete\n   */\n  isIncompleteRegister(): boolean {\n    return this.isInvalidRegister('name') ||\n      this.isInvalidRegister('username') ||\n      this.isInvalidRegister('password') ||\n      this.isInvalidRegister('email') ||\n      this.isUntouchedRegister();\n  }\n  /**\n   * Submit the details from the Register form to the API\n   */\n  register(): void {\n    this.errorMessage = ''\n    this.webService.register(\n      this.registerForm.value)\n      .subscribe(response => {\n      this.registerForm.reset();\n      this.modalService.close();\n      alert('User successfully created, you may login')\n    }, error => {\n      this.errorMessage = error.error.error\n      setTimeout(() => this.errorMessage = '', 3000)\n    })\n  }\n\n  /**\n   * Submit the details from the login form to the API\n   * and store token, user data in session storage\n   */\n  login(): void {\n    this.errorMessage = ''\n    this.webService.login(\n      this.loginForm.value)\n      .subscribe(response => {\n        this.loginForm.reset();\n        this.modalService.close()\n        sessionStorage['x-access-token'] = response['token']\n        sessionStorage['loggedInUsername'] = response['user']['username']\n        sessionStorage['loggedInName'] = response['user']['name']\n        sessionStorage['admin'] = response['user']['admin']\n        }, error => {\n        this.errorMessage = error.error.error\n        setTimeout(() => this.errorMessage = '', 3000)\n      });\n  }\n\n  /**\n   * Send a request to the API to invalidate the current token, and clear it from storage\\\n   */\n  logout(): void {\n    this.webService.logout(\n      sessionStorage['x-access-token'])\n      .subscribe(response => {\n          sessionStorage.removeItem('x-access-token')\n          sessionStorage.removeItem('loggedInUsername')\n          sessionStorage.removeItem('loggedInName')\n          sessionStorage.removeItem('admin')\n        },\n        error => {\n          console.log('token expired')\n          sessionStorage.removeItem('x-access-token')\n          sessionStorage.removeItem('loggedInUsername')\n          sessionStorage.removeItem('loggedInName')\n          sessionStorage.removeItem('admin')\n        });\n  }\n\n  /**\n   * A reference to the sessionStorage interface to be accessed within the HTML\n   * part of this component\n   * @protected\n   */\n  protected readonly sessionStorage = sessionStorage;\n}\n\n    \n\n    \n        \n  \n    \n      Log in\n    \n  \n  \n    Register\n  \n\n\n\n  \n    Log out\n  \n\n\n\n  \n    \n      \n        \n          Login\n        \n        \n          \n            \n              Username\n            \n          \n          \n            \n              Password\n            \n          \n          \n          ! You must complete all fields\n          \n          Submit\n          \n            Error! {{errorMessage}}\n          \n        \n      \n    \n  \n\n\n\n  \n    \n      \n        \n          Register\n        \n        \n          \n            \n              Name\n            \n          \n          \n            \n              Username\n            \n          \n          \n            \n              Email\n            \n          \n          \n            \n              Password\n            \n          \n          \n          ! You must complete all fields\n          \n          Submit\n          \n            Error! {{errorMessage}}\n          \n        \n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Log in            Register        Log out                                Login                                                    Username                                                          Password                                          ! You must complete all fields                    Submit                      Error! {{errorMessage}}                                                            Register                                                    Name                                                          Username                                                          Email                                                          Password                                          ! You must complete all fields                    Submit                      Error! {{errorMessage}}                              '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthButtonComponent', 'selector': 'auth-button'},{'name': 'EpisodeComponent', 'selector': 'episode'},{'name': 'EpisodesComponent', 'selector': 'episodes'},{'name': 'HomeComponent', 'selector': 'home'},{'name': 'ModalComponent', 'selector': 'modal'},{'name': 'NavComponent', 'selector': 'navigation'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AuthButtonComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/EpisodesComponent.html":{"url":"components/EpisodesComponent.html","title":"component - EpisodesComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  EpisodesComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/episodes/episodes.component.ts\n\n\n\n    \n        Description\n    \n    \n        All logic associated with the episodes page\nGet episodes, define the ag-grid\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                                WebService\n                \n            \n\n\n            \n                selector\n                episodes\n            \n\n\n            \n                imports\n                \n                            RouterModule\n                            CommonModule\n                            AgGridAngular\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./episodes.component.html\n            \n\n\n\n            \n                styleUrl\n                ./episodes.component.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                episodes_loaded\n                            \n                            \n                                gridOptions\n                            \n                            \n                                headings\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                onRowClicked\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(webService: WebService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/episodes/episodes.component.ts:59\n                            \n                        \n\n                \n                    \n                            Constructor for the Episodes component\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        webService\n                                                  \n                                                        \n                                                                        WebService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Connect to the Web Service\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Provide links to other pages\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/episodes/episodes.component.ts:73\n                        \n                    \n\n\n            \n                \n                        On page load, get episodes\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onRowClicked\n                        \n                    \n                \n            \n            \n                \nonRowClicked(event: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/episodes/episodes.component.ts:84\n                        \n                    \n\n\n            \n                \n                        On user clicking a row, go to the associated episode page\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    An event describing which row was clicked\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/episodes/episodes.component.ts:24\n                        \n                    \n\n            \n                \n                    All episodes as returned by the API\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        episodes_loaded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/episodes/episodes.component.ts:28\n                        \n                    \n\n            \n                \n                    Boolean to check if the page is loading\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gridOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     GridOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n    rowStyle: {cursor: 'pointer', backgroundColor: 'rgba(0,0,0,0.5)'},\n    autoSizeStrategy: {type: 'fitProvidedWidth', width: 700},\n    getRowStyle: (params: any) => {\n      const pageSize = 17;\n      const pageIndex = params.api.paginationGetCurrentPage();\n      const rowIndexOnPage = params.rowIndex - pageIndex * pageSize;\n      // Find last 6 rows on current page, select odd\n      if (rowIndexOnPage >= pageSize - 6 && rowIndexOnPage \n                    \n                \n                    \n                        \n                                Defined in src/episodes/episodes.component.ts:47\n                        \n                    \n\n            \n                \n                    Ag-Grid gridOptions definition\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        headings\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ColDef[]\n\n                    \n                \n                \n                    \n                        Default value : [\n    { field: 'title',\n          filter: true,\n          floatingFilter: true,\n          sortable: false,\n          },\n    { field: 'imdbRating',\n          headerName: 'Rating' },\n    { headerName: 'Episode',\n          valueGetter: p => 'S' + p.data.seasonNumber + 'E' + p.data.episodeNumber,\n          sortable: false }\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/episodes/episodes.component.ts:32\n                        \n                    \n\n            \n                \n                    Ag-Grid headings definition\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { Router, RouterModule} from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { WebService } from '../app/web.service';\nimport {AgGridAngular} from 'ag-grid-angular';\nimport { ColDef, GridOptions } from 'ag-grid-community';\n\n/**\n * All logic associated with the episodes page\n * Get episodes, define the ag-grid\n */\n@Component({\n  selector: 'episodes',\n  imports: [RouterModule, CommonModule, AgGridAngular],\n  providers: [WebService],\n  templateUrl: './episodes.component.html',\n  styleUrl: './episodes.component.css'\n})\n\nexport class EpisodesComponent {\n  /**\n   * All episodes as returned by the API\n   */\n  data: any;\n  /**\n   * Boolean to check if the page is loading\n   */\n  episodes_loaded: boolean = false;\n  /**\n   * Ag-Grid headings definition\n   */\n  headings: ColDef[] = [\n    { field: 'title',\n          filter: true,\n          floatingFilter: true,\n          sortable: false,\n          },\n    { field: 'imdbRating',\n          headerName: 'Rating' },\n    { headerName: 'Episode',\n          valueGetter: p => 'S' + p.data.seasonNumber + 'E' + p.data.episodeNumber,\n          sortable: false }\n  ]\n  /**\n   * Ag-Grid gridOptions definition\n   */\n  gridOptions: GridOptions = {\n    rowStyle: {cursor: 'pointer', backgroundColor: 'rgba(0,0,0,0.5)'},\n    autoSizeStrategy: {type: 'fitProvidedWidth', width: 700},\n    getRowStyle: (params: any) => {\n      const pageSize = 17;\n      const pageIndex = params.api.paginationGetCurrentPage();\n      const rowIndexOnPage = params.rowIndex - pageIndex * pageSize;\n      // Find last 6 rows on current page, select odd\n      if (rowIndexOnPage >= pageSize - 6 && rowIndexOnPage  {\n        this.data = response['data']\n        this.episodes_loaded = true;  })\n  }\n\n  /**\n   * On user clicking a row, go to the associated episode page\n   * @param event An event describing which row was clicked\n   */\n  onRowClicked(event: any): void {\n    this.router.navigate(['/episodes/' + event.data._id])\n  }\n}\n\n    \n\n    \n        \n\n  \n    \n  \n  \n  \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthButtonComponent', 'selector': 'auth-button'},{'name': 'EpisodeComponent', 'selector': 'episode'},{'name': 'EpisodesComponent', 'selector': 'episodes'},{'name': 'HomeComponent', 'selector': 'home'},{'name': 'ModalComponent', 'selector': 'modal'},{'name': 'NavComponent', 'selector': 'navigation'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'EpisodesComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/HomeComponent.html":{"url":"components/HomeComponent.html","title":"component - HomeComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  HomeComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/home/home.component.ts\n\n\n\n    \n        Description\n    \n    \n        The homepage of the app\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                home\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./home.component.html\n            \n\n\n\n            \n                styleUrl\n                ./home.component.css\n            \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport {RouterModule} from '@angular/router';\n/**\n * The homepage of the app\n */\n@Component({\n    selector: 'home',\n    standalone: true,\n    templateUrl: './home.component.html',\n    imports: [RouterModule],\n    styleUrl: './home.component.css'\n})\nexport class HomeComponent { }\n\n    \n\n    \n        \n  \n    \n    \n      \n    \n    \n    \n      \n      \n        &nbsp;&nbsp;Click to enter site\n      \n    \n    \n    \n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                  Click to enter site                              '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthButtonComponent', 'selector': 'auth-button'},{'name': 'EpisodeComponent', 'selector': 'episode'},{'name': 'EpisodesComponent', 'selector': 'episodes'},{'name': 'HomeComponent', 'selector': 'home'},{'name': 'ModalComponent', 'selector': 'modal'},{'name': 'NavComponent', 'selector': 'navigation'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'HomeComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ModalComponent.html":{"url":"components/ModalComponent.html","title":"component - ModalComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ModalComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/modal/modal.component.ts\n\n\n\n    \n        Description\n    \n    \n        Logic associated with modals\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n            \n                encapsulation\n                ViewEncapsulation.None\n            \n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                modal\n            \n\n\n\n            \n                styleUrls\n                modal.component.css\n            \n\n\n\n            \n                templateUrl\n                modal.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                element\n                            \n                            \n                                isOpen\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                close\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                open\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(modalService: ModalService, el: ElementRef)\n                    \n                \n                        \n                            \n                                Defined in src/modal/modal.component.ts:26\n                            \n                        \n\n                \n                    \n                            A constructor for the modal component\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        modalService\n                                                  \n                                                        \n                                                                        ModalService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Connect to the Modal Service\n\n                                                        \n                                                \n                                                \n                                                        el\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The modals reference in the DOM\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        id\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/modal/modal.component.ts:17\n                            \n                        \n                \n                    \n                        Optionally accept the elements id in the DOM\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        close\n                        \n                    \n                \n            \n            \n                \nclose()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modal/modal.component.ts:71\n                        \n                    \n\n\n            \n                \n                        Set a modal element to hide\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modal/modal.component.ts:54\n                        \n                    \n\n\n            \n                \n                        On page close, remove the modal from the DOM\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modal/modal.component.ts:41\n                        \n                    \n\n\n            \n                \n                        On page load, add the modal to the DOM\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        open\n                        \n                    \n                \n            \n            \n                \nopen()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modal/modal.component.ts:62\n                        \n                    \n\n\n            \n                \n                        Set a modal element to display\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        element\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/modal/modal.component.ts:26\n                        \n                    \n\n            \n                \n                    A reference to the modal within the DOM\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isOpen\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/modal/modal.component.ts:21\n                        \n                    \n\n            \n                \n                    Boolean to hold if a particular modal is open or not\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, ViewEncapsulation, ElementRef, Input, OnInit, OnDestroy } from '@angular/core';\nimport { ModalService } from './modal.service';\n\n/**\n * Logic associated with modals\n */\n@Component({\n  selector: 'modal',\n  templateUrl: 'modal.component.html',\n  styleUrls: ['modal.component.css'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class ModalComponent implements OnInit, OnDestroy {\n  /**\n   * Optionally accept the elements id in the DOM\n   */\n  @Input() id?: string;\n  /**\n   * Boolean to hold if a particular modal is open or not\n   */\n  isOpen = false;\n  /**\n   * A reference to the modal within the DOM\n   * @private\n   */\n  private element: any;\n\n  /**\n   * A constructor for the modal component\n   * @constructor\n   * @param modalService Connect to the Modal Service\n   * @param el The modals reference in the DOM\n   */\n  constructor(private modalService: ModalService, private el: ElementRef) {\n    this.element = el.nativeElement;\n  }\n\n  /**\n   * On page load, add the modal to the DOM\n   */\n  ngOnInit(): void {\n    this.modalService.add(this);\n    document.body.appendChild(this.element);\n    this.element.addEventListener('click', (el: any) => {\n      if (el.target.className === 'modal') {\n        this.close();\n      }\n    });\n  }\n\n  /**\n   * On page close, remove the modal from the DOM\n   */\n  ngOnDestroy(): void {\n    this.modalService.remove(this);\n    this.element.remove();\n  }\n\n  /**\n   * Set a modal element to display\n   */\n  open(): void {\n    this.element.style.display = 'block';\n    document.body.classList.add('modal-open');\n    this.isOpen = true;\n  }\n\n  /**\n   * Set a modal element to hide\n   */\n  close(): void {\n    this.element.style.display = 'none';\n    document.body.classList.remove('modal-open');\n    this.isOpen = false;\n  }\n}\n\n    \n\n    \n        \n  \n    \n      \n    \n  \n\n\n\n    \n\n    \n                \n                    modal.component.css\n                \n                modal {\n  display: none;\n}\nbody.modal-open {\n  overflow: hidden;\n}\n.modal-backdrop {\n  opacity: 0.7 !important;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthButtonComponent', 'selector': 'auth-button'},{'name': 'EpisodeComponent', 'selector': 'episode'},{'name': 'EpisodesComponent', 'selector': 'episodes'},{'name': 'HomeComponent', 'selector': 'home'},{'name': 'ModalComponent', 'selector': 'modal'},{'name': 'NavComponent', 'selector': 'navigation'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ModalComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ModalService.html":{"url":"injectables/ModalService.html","title":"injectable - ModalService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ModalService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modal/modal.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface with the modal component\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                modals\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                close\n                            \n                            \n                                open\n                            \n                            \n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(modal: ModalComponent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modal/modal.service.ts:18\n                        \n                    \n\n\n            \n                \n                        Add a form to the DOM\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                modal\n                                            \n                                                            ModalComponent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The form to add\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        close\n                        \n                    \n                \n            \n            \n                \nclose()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modal/modal.service.ts:47\n                        \n                    \n\n\n            \n                \n                        Hide any open modals\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        open\n                        \n                    \n                \n            \n            \n                \nopen(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modal/modal.service.ts:37\n                        \n                    \n\n\n            \n                \n                        Display a form\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The form to display\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(modal: ModalComponent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modal/modal.service.ts:29\n                        \n                    \n\n\n            \n                \n                        Remove a form from the DOM\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                modal\n                                            \n                                                            ModalComponent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The form to remove\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        modals\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ModalComponent[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/modal/modal.service.ts:12\n                        \n                    \n\n            \n                \n                    An array to hold the Modals active in the DOM\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { ModalComponent } from './modal.component';\n/**\n * Interface with the modal component\n */\n@Injectable({ providedIn: 'root' })\nexport class ModalService {\n  /**\n   * An array to hold the Modals active in the DOM\n   * @private\n   */\n  private modals: ModalComponent[] = [];\n\n  /**\n   * Add a form to the DOM\n   * @param modal The form to add\n   */\n  add(modal: ModalComponent): void {\n    if (!modal.id || this.modals.find(x => x.id === modal.id)) {\n      throw new Error('modal must have a unique id attribute');\n    }\n    this.modals.push(modal);\n  }\n\n  /**\n   * Remove a form from the DOM\n   * @param modal The form to remove\n   */\n  remove(modal: ModalComponent): void {\n    this.modals = this.modals.filter(x => x !== modal);\n  }\n\n  /**\n   * Display a form\n   * @param id The form to display\n   */\n  open(id: string): void {\n    const modal = this.modals.find(x => x.id === id);\n    if (!modal) {\n      throw new Error(`modal '${id}' not found`);\n    }\n    modal.open();\n  }\n  /**\n   * Hide any open modals\n   */\n  close(): void {\n    const modal = this.modals.find(x => x.isOpen);\n    modal?.close();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NavComponent.html":{"url":"components/NavComponent.html","title":"component - NavComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NavComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/nav/nav.component.ts\n\n\n\n    \n        Description\n    \n    \n        Navigation bar header\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                navigation\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterModule\n                                AuthButtonComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./nav.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Readonly\n                                sessionStorage\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        sessionStorage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : sessionStorage\n                    \n                \n                    \n                        \n                                Defined in src/nav/nav.component.ts:19\n                        \n                    \n\n            \n                \n                    A reference to the sessionStorage interface to be used in the HTML part of this component\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {AuthButtonComponent} from '../authButton/authButton.component';\n\n/**\n * Navigation bar header\n */\n@Component({\n  selector: 'navigation',\n  standalone: true,\n  imports: [RouterModule, AuthButtonComponent],\n  templateUrl: './nav.component.html'\n})\nexport class NavComponent {\n  /**\n   * A reference to the sessionStorage interface to be used in the HTML part of this component\n   * @protected\n   */\n  protected readonly sessionStorage = sessionStorage;\n}\n\n    \n\n    \n        \n  \n    \n  \n  \n    \n      Home\n    \n    \n      Episodes\n    \n  \n  \n    {{sessionStorage['loggedInName']}}\n    \n  \n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    Home              Episodes            {{sessionStorage[\\'loggedInName\\']}}      '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthButtonComponent', 'selector': 'auth-button'},{'name': 'EpisodeComponent', 'selector': 'episode'},{'name': 'EpisodesComponent', 'selector': 'episodes'},{'name': 'HomeComponent', 'selector': 'home'},{'name': 'ModalComponent', 'selector': 'modal'},{'name': 'NavComponent', 'selector': 'navigation'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NavComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WebService.html":{"url":"injectables/WebService.html","title":"injectable - WebService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WebService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/web.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The WebService provides connections to the backend API\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                pageSize\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ban\n                            \n                            \n                                deleteTrivia\n                            \n                            \n                                editTrivia\n                            \n                            \n                                getEpisode\n                            \n                            \n                                getEpisodes\n                            \n                            \n                                getTrivias\n                            \n                            \n                                login\n                            \n                            \n                                logout\n                            \n                            \n                                postTrivia\n                            \n                            \n                                register\n                            \n                            \n                                voteTrivia\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/web.service.ts:14\n                            \n                        \n\n                \n                    \n                            The constructor for the Web Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Injecting the httpClient to the Web Service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ban\n                        \n                    \n                \n            \n            \n                \nban(username: any, token: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/web.service.ts:168\n                        \n                    \n\n\n            \n                \n                        Logout logged-in user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The username to ban\n\n                                            \n                                        \n                                        \n                                                token\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The token used to validate the request, must be admin\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An http code used to determine if the request was successful or not\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteTrivia\n                        \n                    \n                \n            \n            \n                \ndeleteTrivia(eId: any, tId: any, token: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/web.service.ts:110\n                        \n                    \n\n\n            \n                \n                        Delete a trivia\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eId\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The id of the desired episode\n\n                                            \n                                        \n                                        \n                                                tId\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The id of the desired trivia\n\n                                            \n                                        \n                                        \n                                                token\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The authentication token used to validate the request. Must be OP or admin\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An http code used to determine if the request was successful or not\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        editTrivia\n                        \n                    \n                \n            \n            \n                \neditTrivia(eId: any, tId: any, trivia: any, token: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/web.service.ts:75\n                        \n                    \n\n\n            \n                \n                        Edit an existing trivia\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eId\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The id of the desired episode\n\n                                            \n                                        \n                                        \n                                                tId\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The id of the desired trivia\n\n                                            \n                                        \n                                        \n                                                trivia\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The form holding the updated trivia data\n\n                                            \n                                        \n                                        \n                                                token\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The authentication token used to validate the request\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An http code used to determine if the request was successful or not\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEpisode\n                        \n                    \n                \n            \n            \n                \ngetEpisode(id: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/web.service.ts:36\n                        \n                    \n\n\n            \n                \n                        Fetch one episodes\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The id of the desired episode\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable of the specified episode\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEpisodes\n                        \n                    \n                \n            \n            \n                \ngetEpisodes()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/web.service.ts:27\n                        \n                    \n\n\n            \n                \n                        Fetch all episodes\n\n\n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable of all episodes\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTrivias\n                        \n                    \n                \n            \n            \n                \ngetTrivias(id: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/web.service.ts:45\n                        \n                    \n\n\n            \n                \n                        Fetch all trivias for an episode\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The id of the desired episode\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable of the trivias associated with an episode\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(creds: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/web.service.ts:138\n                        \n                    \n\n\n            \n                \n                        Login as an existing user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                creds\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The form holding the data of the users login details\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                A JSON object holding an x-access-token as well as username, name and admin status\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logout\n                        \n                    \n                \n            \n            \n                \nlogout(token: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/web.service.ts:153\n                        \n                    \n\n\n            \n                \n                        Logout logged-in user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The token to log out and discard\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An http code used to determine if the request was successful or not\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postTrivia\n                        \n                    \n                \n            \n            \n                \npostTrivia(id: any, trivia: any, token: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/web.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Post a new trivia to an episode\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The id of the desired episode\n\n                                            \n                                        \n                                        \n                                                trivia\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The form holding the trivia data to be added\n\n                                            \n                                        \n                                        \n                                                token\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The token used to validate the request\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An http code used to determine if the request was successful or not\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(form: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/web.service.ts:124\n                        \n                    \n\n\n            \n                \n                        Register a new user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                form\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The form holding the data of the new user\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An http code used to determine if the request was successful or not\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        voteTrivia\n                        \n                    \n                \n            \n            \n                \nvoteTrivia(eId: any, tId: any, voteDirection: string, token: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/web.service.ts:94\n                        \n                    \n\n\n            \n                \n                        Vote on trivia\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eId\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The id of the desired episode\n\n                                            \n                                        \n                                        \n                                                tId\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The id of the desired trivia\n\n                                            \n                                        \n                                        \n                                                voteDirection\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The vote direction, either up or down\n\n                                            \n                                        \n                                        \n                                                token\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The authentication token used to validate the request\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An http code used to determine if the request was successful or not\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        pageSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 65\n                    \n                \n                    \n                        \n                                Defined in src/app/web.service.ts:14\n                        \n                    \n\n            \n                \n                    The page size to return. This app pulls all records and handles pagination on the front end\nfor the purposes of speed\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {HttpClient, HttpHeaders} from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport {Observable} from 'rxjs';\n\n/**\n * The WebService provides connections to the backend API\n */\n@Injectable()\nexport class WebService{\n  /**\n   * The page size to return. This app pulls all records and handles pagination on the front end\n   * for the purposes of speed\n   */\n  pageSize: number = 65\n\n  /**\n   * The constructor for the Web Service\n   * @constructor\n   * @param http Injecting the httpClient to the Web Service\n   */\n  constructor(private http: HttpClient) { }\n\n  /**\n   * Fetch all episodes\n   * @returns An Observable of all episodes\n   */\n  getEpisodes(): Observable {\n    return this.http.get(\n      'http://localhost:5000/api/v1.0/episodes?pn='+'&ps=' + this.pageSize);\n  }\n  /**\n   * Fetch one episodes\n   * @param id The id of the desired episode\n   * @returns An Observable of the specified episode\n   */\n  getEpisode(id: any): Observable {\n    return this.http.get(\n      'http://localhost:5000/api/v1.0/episodes/' + id);\n  }\n  /**\n   * Fetch all trivias for an episode\n   * @param id The id of the desired episode\n   * @returns An Observable of the trivias associated with an episode\n   */\n  getTrivias(id: any): Observable {\n    return this.http.get('http://localhost:5000/api/v1.0/episodes/' +\n      id + '/trivias');\n  }\n  /**\n   * Post a new trivia to an episode\n   * @param id The id of the desired episode\n   * @param trivia The form holding the trivia data to be added\n   * @param token The token used to validate the request\n   * @returns An http code used to determine if the request was successful or not\n   */\n  postTrivia(id: any, trivia: any, token: any): Observable {\n      let postData = new FormData();\n      postData.append(\"text\", trivia.trivia);\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'x-access-token': token })\n      };\n      return this.http.post(\n        'http://localhost:5000/api/v1.0/episodes/' +\n        id + \"/trivias\", postData, httpOptions);\n    }\n  /**\n   * Edit an existing trivia\n   * @param eId The id of the desired episode\n   * @param tId The id of the desired trivia\n   * @param trivia The form holding the updated trivia data\n   * @param token The authentication token used to validate the request\n   * @returns An http code used to determine if the request was successful or not\n   */\n  editTrivia(eId: any, tId: any, trivia: any, token:any): Observable {\n    let postData = new FormData();\n    postData.append(\"text\", trivia.editedTrivia);\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'x-access-token': token })\n    };\n    return this.http.patch(\n      'http://localhost:5000/api/v1.0/episodes/' +\n      eId + \"/trivias/\" + tId, postData, httpOptions);\n  }\n  /**\n   * Vote on trivia\n   * @param eId The id of the desired episode\n   * @param tId The id of the desired trivia\n   * @param voteDirection The vote direction, either up or down\n   * @param token The authentication token used to validate the request\n   * @returns An http code used to determine if the request was successful or not\n   */\n  voteTrivia(eId: any, tId: any, voteDirection: string, token: any): Observable {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'x-access-token': token })\n      };\n      return this.http.patch(\n        'http://localhost:5000/api/v1.0/episodes/' + eId + '/trivias/' + tId + '/vote?vote=' + voteDirection,\n        '', httpOptions )\n  }\n  /**\n   * Delete a trivia\n   * @param eId The id of the desired episode\n   * @param tId The id of the desired trivia\n   * @param token The authentication token used to validate the request. Must be OP or admin\n   * @returns An http code used to determine if the request was successful or not\n   */\n  deleteTrivia(eId: any, tId: any, token:any): Observable {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'x-access-token': token })\n    };\n    return this.http.delete(\n      'http://localhost:5000/api/v1.0/episodes/' + eId + '/trivias/' + tId,\n      httpOptions )\n  }\n  /**\n   * Register a new user\n   * @param form The form holding the data of the new user\n   * @returns An http code used to determine if the request was successful or not\n   */\n  register(form: any): Observable {\n    let postData = new FormData();\n    postData.append('name', form.name)\n    postData.append('username', form.username)\n    postData.append('password', form.password)\n    postData.append('email', form.email)\n    return this.http.post(\n      'http://localhost:5000/api/v1.0/register', postData);\n  }\n  /**\n   * Login as an existing user\n   * @param creds The form holding the data of the users login details\n   * @returns A JSON object holding an x-access-token as well as username, name and admin status\n   */\n  login(creds: any): Observable {\n    let authData = 'Basic ' + btoa(creds.username + ':' + creds.password);\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type':  'application/json',\n        'authorization': authData })\n    };\n    return this.http.get('http://localhost:5000/api/v1.0/login',\n      httpOptions)\n  }\n  /**\n   * Logout logged-in user\n   * @param token The token to log out and discard\n   * @returns An http code used to determine if the request was successful or not\n   */\n  logout(token: any): Observable {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type':  'application/json',\n        'x-access-token': token })\n    };\n    return this.http.get('http://localhost:5000/api/v1.0/logout',\n      httpOptions)\n  }\n  /**\n   * Logout logged-in user\n   * @param username The username to ban\n   * @param token The token used to validate the request, must be admin\n   * @returns An http code used to determine if the request was successful or not\n   */\n  ban(username: any, token: any): Observable {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'x-access-token': token })\n    };\n    return this.http.patch('http://localhost:5000/api/v1.0/ban/' + username,\n      '', httpOptions)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                        src/app/app.config.ts\n            \n            variable\n            appConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/web.service.ts\n            \n            injectable\n            WebService\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/authButton/authButton.component.ts\n            \n            component\n            AuthButtonComponent\n            \n                100 %\n                (17/17)\n            \n        \n        \n            \n                \n                src/episode/episode.component.ts\n            \n            component\n            EpisodeComponent\n            \n                100 %\n                (26/26)\n            \n        \n        \n            \n                \n                src/episodes/episodes.component.ts\n            \n            component\n            EpisodesComponent\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/home/home.component.ts\n            \n            component\n            HomeComponent\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modal/modal.component.ts\n            \n            component\n            ModalComponent\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/modal/modal.service.ts\n            \n            injectable\n            ModalService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/nav/nav.component.ts\n            \n            component\n            NavComponent\n            \n                100 %\n                (2/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^19.0.0\n        \n            @angular/common : ^19.0.0\n        \n            @angular/compiler : ^19.0.0\n        \n            @angular/core : ^19.0.0\n        \n            @angular/forms : ^19.0.0\n        \n            @angular/platform-browser : ^19.0.0\n        \n            @angular/platform-browser-dynamic : ^19.0.0\n        \n            @angular/router : ^19.0.0\n        \n            @compodoc/compodoc : ^1.1.26\n        \n            ag-grid-angular : ^32.3.3\n        \n            bootstrap : ^5.3.3\n        \n            jquery : ^3.7.1\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.15.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nBcsFanSiteFE\nThis project was generated using Angular CLI version 19.0.2.\nDevelopment server\nTo start a local development server, run:\nExample :ng serveOnce the server is running, open your browser and navigate to http://localhost:4200/. The application will automatically reload whenever you modify any of the source files.\nCode scaffolding\nAngular CLI includes powerful code scaffolding tools. To generate a new component, run:\nExample :ng generate component component-nameFor a complete list of available schematics (such as components, directives, or pipes), run:\nExample :ng generate --helpBuilding\nTo build the project run:\nExample :ng buildThis will compile your project and store the build artifacts in the dist/ directory. By default, the production build optimizes your application for performance and speed.\nRunning unit tests\nTo execute unit tests with the Karma test runner, use the following command:\nExample :ng testRunning end-to-end tests\nFor end-to-end (e2e) testing, run:\nExample :ng e2eAngular CLI does not come with an end-to-end testing framework by default. You can choose one that suits your needs.\nAdditional Resources\nFor more information on using the Angular CLI, including detailed command references, visit the Angular CLI Overview and Command Reference page.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    7 Components\n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appConfig   (src/.../app.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ApplicationConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  providers: [provideZoneChangeDetection({ eventCoalescing: true }),\n    provideRouter(routes), provideHttpClient()]\n}\n                    \n                \n\n            \n                \n                    Specify Angular app config\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
