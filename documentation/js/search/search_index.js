var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/AppComponent.html",[0,0.077,1,0.563]],["body/components/AppComponent.html",[0,0.13,1,0.998,2,0.862,3,0.677,4,0.563,5,0.942,6,0.942,7,0.942,8,0.563,9,2.48,10,0.942,11,1.535,12,1.32,13,3.157,14,1.629,15,4.372,16,0.998,17,1.2,18,3.974,19,1.896,20,3.974,21,0.563,22,0.716,23,3.473,24,0.677,25,0.06,26,1.279,27,0.563,28,0.677,29,3.157,30,0.803,31,3.121,32,0.948,33,0.563,34,1.279,35,3.121,36,0.677,37,0.677,38,0.942,39,1.2,40,1.2,41,0.942,42,1.39,43,0.942,44,0.862,45,0.942,46,0.677,47,0.942,48,0.942,49,0.677,50,0.942,51,0.677,52,0.942,53,0.677,54,0.942,55,0.563,56,0.942,57,0.942,58,0.677,59,0.803,60,0.803,61,0.942,62,0.045,63,0.045]],["title/components/AuthButtonComponent.html",[0,0.077,46,0.563]],["body/components/AuthButtonComponent.html",[0,0.094,1,0.371,2,0.565,3,0.371,4,0.308,5,0.516,6,0.516,7,0.516,8,0.308,10,0.516,11,1.353,12,0.516,14,1.067,16,0.371,17,0.786,19,1.242,21,0.308,22,0.469,24,0.902,25,0.061,27,0.308,28,0.371,30,1.236,32,0.868,33,0.308,36,0.371,37,0.371,38,0.516,39,0.786,40,0.786,41,0.516,42,1.065,43,0.516,44,0.93,45,0.516,46,0.765,47,0.952,48,0.516,49,0.371,50,0.516,51,0.371,52,0.516,53,0.371,54,0.516,55,0.636,56,0.516,57,0.516,58,0.371,59,0.439,60,0.439,61,0.516,62,0.03,63,0.03,64,1.357,65,1.242,66,1.511,67,1.894,68,2.603,69,1.242,70,0.786,71,2.506,72,2.079,73,2.603,74,2.603,75,4.16,76,3.154,77,2.506,78,3.154,79,2.079,80,2.079,81,2.502,82,0.917,83,3.527,84,3.527,85,2.603,86,2.603,87,3.527,88,3.527,89,2.741,90,1.968,91,1.683,92,2.826,93,0.7,94,0.953,95,3.304,96,2.603,97,1.111,98,1.111,99,1.708,100,1.579,101,1.708,102,2.603,103,1.708,104,2.068,105,2.603,106,1.708,107,1.708,108,1.708,109,1.708,110,1.446,111,1.708,112,1.708,113,1.708,114,1.708,115,1.708,116,1.708,117,1.708,118,0.953,119,1.357,120,1.126,121,1.357,122,0.953,123,1.357,124,0.953,125,0.815,126,1.708,127,2.068,128,2.232,129,3.178,130,3.178,131,1.708,132,2.506,133,2.636,134,1.708,135,1.708,136,1.708,137,1.708,138,1.708,139,1.708,140,1.708,141,1.708,142,1.708,143,1.708,144,1.708,145,1.708,146,1.708,147,1.708,148,1.708,149,1.708,150,4,151,1.357,152,1.708,153,3.154,154,1.708,155,2.068,156,1.708,157,1.708,158,1.708,159,2.741,160,2.603,161,2.603,162,2.603,163,1.357,164,1.708,165,1.708,166,2.068,167,2.324,168,1.968,169,1.708,170,1.708,171,1.708,172,1.357,173,1.708,174,1.708,175,1.708,176,1.708,177,2.068,178,2.068,179,2.068,180,2.068,181,1.708,182,1.357,183,2.802,184,2.603,185,2.324,186,2.802,187,2.802]],["title/components/EpisodeComponent.html",[0,0.077,49,0.563]],["body/components/EpisodeComponent.html",[0,0.074,1,0.256,2,0.421,3,0.256,4,0.213,5,0.356,6,0.356,7,0.356,8,0.213,10,0.356,11,1.211,12,0.356,14,0.796,16,0.256,17,0.586,19,0.926,21,0.213,22,0.35,24,0.977,25,0.061,26,1.896,27,0.571,28,0.687,30,1.228,32,0.815,33,0.213,34,0.484,36,0.256,37,0.256,38,0.356,39,0.586,40,0.586,41,0.356,42,0.956,43,0.356,44,0.91,45,0.356,46,0.256,47,0.356,48,0.356,49,0.781,50,0.356,51,0.256,52,0.356,53,0.256,54,0.356,55,0.516,56,0.356,57,0.356,58,0.256,59,0.303,60,0.303,61,0.356,62,0.022,63,0.022,65,0.926,66,1.324,67,1.72,69,0.926,70,0.746,71,1.964,72,1.629,77,1.964,79,2.567,80,2.567,81,2.086,82,0.684,90,1.598,91,1.367,93,0.796,94,0.658,95,2.859,97,1.413,98,1.413,100,1.529,104,3.265,110,1.684,118,0.658,119,0.937,120,1.279,121,0.937,122,0.658,123,0.937,125,1.18,127,1.964,128,1.083,129,1.964,133,1.629,155,2.515,159,2.086,166,2.276,167,2.086,168,1.766,177,0.937,178,0.937,179,0.937,180,0.937,182,2.515,183,2.515,185,1.888,186,2.276,187,2.986,188,0.937,189,2.705,190,1.941,191,1.941,192,3.166,193,2.472,194,3.166,195,2.472,196,3.166,197,2.472,198,3.166,199,2.472,200,1.888,201,2.865,202,3.405,203,1.941,204,1.941,205,1.941,206,2.472,207,2.472,208,2.865,209,3.405,210,1.941,211,1.941,212,2.472,213,2.865,214,1.941,215,1.542,216,1.18,217,1.941,218,1.18,219,2.859,220,1.18,221,1.18,222,1.941,223,1.18,224,1.964,225,1.941,226,1.18,227,1.941,228,1.18,229,1.18,230,1.18,231,1.18,232,1.18,233,1.542,234,1.18,235,1.18,236,1.18,237,1.941,238,1.18,239,1.941,240,1.941,241,1.18,242,1.542,243,1.18,244,1.18,245,1.18,246,1.542,247,1.279,248,1.18,249,1.18,250,1.18,251,1.18,252,1.367,253,1.18,254,1.18,255,1.18,256,4.01,257,2.986,258,3.496,259,1.18,260,3.405,261,3.405,262,3.599,263,3.405,264,1.18,265,1.18,266,2.816,267,1.941,268,1.941,269,1.941,270,1.18,271,2.472,272,1.941,273,1.941,274,1.18,275,1.18,276,1.18,277,1.18,278,1.18,279,0.937,280,1.964,281,3.166,282,3.166,283,3.166,284,3.166,285,1.18,286,0.937,287,1.18,288,1.18,289,0.937,290,1.18,291,0.937,292,1.18,293,2.472,294,1.18,295,1.18,296,1.18,297,1.18,298,2.276,299,2.865,300,1.941,301,1.941,302,1.542,303,1.941,304,1.941,305,1.941,306,1.941,307,3.759]],["title/components/EpisodesComponent.html",[0,0.077,51,0.563]],["body/components/EpisodesComponent.html",[0,0.103,1,0.435,2,0.636,3,0.435,4,0.361,5,0.605,6,0.605,7,0.605,8,0.361,10,0.605,11,1.408,12,0.605,14,1.203,16,0.435,17,0.886,19,1.4,21,0.361,22,0.529,23,2.331,24,0.975,25,0.061,27,0.626,28,0.753,30,1.128,32,0.921,33,0.361,34,0.822,36,0.435,37,0.435,38,0.605,39,0.886,40,0.886,41,0.605,42,1.153,43,0.605,44,0.828,45,0.605,46,0.435,47,0.605,48,0.605,49,0.435,50,0.605,51,0.828,52,0.605,53,0.435,54,0.605,55,0.361,56,0.605,57,0.605,58,0.435,59,0.516,60,0.516,61,0.605,62,0.033,63,0.033,65,1.4,66,1.496,70,1.227,72,2.287,82,1.034,91,1.656,93,0.822,94,1.119,97,1.034,98,1.034,100,1.034,110,1.203,118,1.119,122,1.119,189,2.331,233,1.593,246,2.331,247,2.798,308,1.593,309,1.933,310,2.287,311,3.47,312,2.934,313,2.934,314,2.756,315,3.47,316,4.245,317,3.47,318,2.934,319,4.064,320,2.005,321,2.005,322,2.934,323,2.005,324,2.005,325,2.005,326,2.934,327,2.934,328,2.934,329,2.934,330,2.934,331,2.934,332,2.934,333,2.934,334,2.934,335,2.934,336,2.934,337,2.798,338,3.372,339,2.934,340,3.818,341,2.934,342,4.245,343,2.934,344,2.934,345,2.934,346,3.818,347,2.934,348,2.934,349,1.933,350,2.934,351,2.934,352,2.005,353,3.47,354,3.818,355,2.934,356,2.934,357,3.818,358,2.934,359,3.818,360,2.934,361,2.934,362,2.934,363,2.934,364,2.934,365,2.934,366,2.934,367,2.005,368,2.331,369,2.331,370,1.321,371,2.005,372,2.005,373,1.593,374,2.005,375,2.005,376,2.005]],["title/components/HomeComponent.html",[0,0.077,53,0.563]],["body/components/HomeComponent.html",[0,0.133,1,0.702,2,0.882,3,0.702,4,0.583,5,0.977,6,0.977,7,0.977,8,0.583,10,0.977,11,1.544,12,0.977,14,1.666,16,0.702,17,1.227,19,1.939,25,0.059,32,0.882,33,0.583,34,1.326,36,0.702,37,0.702,38,0.977,39,1.227,40,1.227,41,0.977,42,1.408,43,0.977,44,0.882,45,0.977,46,0.702,47,0.977,48,0.977,49,0.702,50,0.977,51,0.702,52,0.977,53,1.011,54,0.977,55,0.583,56,0.977,57,0.977,58,0.702,59,0.832,60,0.832,61,0.977,62,0.046,63,0.046,69,1.939,70,1.227,310,2.929,377,2.57,378,3.229,379,4.064,380,4.064,381,3.235,382,4.064,383,4.064,384,2.57]],["title/components/ModalComponent.html",[0,0.077,55,0.468]],["body/components/ModalComponent.html",[0,0.121,1,0.494,2,0.697,3,0.494,4,0.41,5,0.687,6,0.687,7,0.687,8,0.41,10,0.687,11,1.448,12,0.687,16,0.494,17,0.971,21,0.41,22,0.58,24,0.808,25,0.061,26,1.318,27,0.41,28,0.494,30,1.196,32,0.697,33,0.41,36,0.494,37,0.494,38,0.687,39,1.125,40,1.375,41,0.687,42,1.222,43,0.687,44,0.808,45,0.687,46,0.494,47,0.687,48,0.687,49,0.494,50,0.687,51,0.494,52,0.687,53,0.494,54,0.687,55,0.73,56,0.687,57,0.687,58,0.494,59,0.585,60,0.585,61,0.687,62,0.036,63,0.036,67,1.817,70,0.687,82,1.132,91,1.932,93,0.933,97,0.802,98,0.802,100,1.426,110,1.659,124,1.27,125,1.932,247,2.456,349,1.5,384,1.808,385,2.276,386,1.808,387,3.214,388,3.726,389,3.726,390,3.214,391,3.214,392,3.809,393,3.214,394,3.726,395,3.214,396,3.726,397,3.392,398,4.048,399,3.002,400,3.214,401,2.456,402,2.276,403,4.048,404,4.048,405,3.214,406,2.276,407,2.276,408,2.276,409,2.276,410,2.276,411,2.276,412,2.276,413,3.214,414,2.276,415,2.276,416,2.276,417,1.808,418,3.214,419,2.276,420,3.214,421,2.276,422,2.276,423,2.276,424,2.276,425,2.276,426,2.276,427,2.276,428,2.276,429,2.276,430,2.276,431,2.276,432,2.276,433,2.276,434,2.553,435,2.276,436,2.276,437,3.214,438,2.276,439,2.276,440,3.214,441,3.214,442,2.276,443,2.276,444,2.276,445,2.276,446,2.276,447,2.276,448,2.276,449,2.276,450,2.276]],["title/injectables/ModalService.html",[67,1.064,451,1.239]],["body/injectables/ModalService.html",[0,0.081,3,0.586,4,0.487,8,0.487,13,2.147,21,0.487,22,0.652,24,0.944,25,0.061,26,1.671,27,0.487,28,0.586,30,1.167,32,0.785,33,0.487,36,0.586,37,0.586,44,0.884,55,0.885,62,0.041,63,0.041,67,1.483,82,1.275,97,1.436,98,1.436,100,1.534,110,1.785,125,1.945,252,1.726,337,2.384,392,3.94,397,3.606,399,2.869,401,3.078,417,3.239,434,3.239,451,1.726,452,1.781,453,2.147,454,4.539,455,3.618,456,2.703,457,2.703,458,3.618,459,2.703,460,3.618,461,2.703,462,2.703,463,2.703,464,2.703,465,2.703,466,3.618,467,3.618,468,3.618,469,4.077,470,3.618,471,3.618,472,2.703,473,3.618,474,3.618,475,2.703,476,2.703,477,2.703,478,2.147,479,2.703,480,2.703,481,2.703,482,2.703,483,2.703,484,2.703,485,2.703]],["title/components/NavComponent.html",[0,0.077,16,0.563]],["body/components/NavComponent.html",[0,0.13,1,0.669,2,0.855,3,0.669,4,0.556,5,0.931,6,0.931,7,0.931,8,0.556,10,0.931,11,1.532,12,0.931,14,1.616,16,0.994,17,1.19,21,0.556,22,0.711,25,0.059,27,0.556,28,0.669,30,0.793,32,0.943,33,0.556,34,1.264,36,0.669,37,0.669,38,0.931,39,1.19,40,1.19,41,0.931,42,1.383,43,0.931,44,0.855,45,0.931,46,0.994,47,0.931,48,0.931,49,0.669,50,0.931,51,0.669,52,0.931,53,0.669,54,0.931,55,0.556,56,0.931,57,0.931,58,0.669,59,0.793,60,0.793,61,0.931,62,0.045,63,0.045,69,1.881,70,1.19,79,2.865,80,2.865,81,3.12,172,2.449,309,2.598,310,2.865,378,3.132,486,2.449,487,3.943,488,3.943,489,3.083,490,3.083,491,3.083]],["title/components/TestComponent.html",[0,0.077,58,0.563]],["body/components/TestComponent.html",[0,0.084,1,0.309,2,0.491,3,0.309,4,0.257,5,0.431,6,0.431,7,0.431,8,0.257,10,0.431,11,1.286,12,0.431,16,0.309,17,0.683,21,0.257,22,0.408,24,0.844,25,0.061,26,1.312,27,0.629,28,0.757,30,1.215,32,0.491,33,0.257,36,0.309,37,0.309,38,0.431,39,0.683,40,0.683,41,0.431,42,0.966,43,0.431,44,0.757,45,0.431,46,0.309,47,0.431,48,0.431,49,0.309,50,0.431,51,0.309,52,0.431,53,0.309,54,0.431,55,0.257,56,0.431,57,0.431,58,0.694,59,0.898,60,0.367,61,0.431,62,0.026,63,0.026,65,1.08,66,1.422,69,1.08,70,0.683,82,0.797,89,1.491,90,1.569,91,1.527,92,1.491,93,0.585,94,0.796,97,0.503,98,0.503,100,1.532,110,1.782,118,0.796,124,0.796,125,2.383,128,1.786,130,2.543,132,1.798,151,1.133,159,3.061,163,3.092,168,1.569,200,1.853,257,1.133,258,1.133,266,1.491,279,1.133,280,3.653,286,1.133,291,1.133,298,1.798,309,1.853,314,1.133,373,1.133,492,1.133,493,2.263,494,2.234,495,2.812,496,2.812,497,3.49,498,2.812,499,3.201,500,3.201,501,3.201,502,3.201,503,3.201,504,3.201,505,3.201,506,3.201,507,3.201,508,3.201,509,2.263,510,1.427,511,1.427,512,1.427,513,1.427,514,1.427,515,1.427,516,1.427,517,1.427,518,1.427,519,1.427,520,1.427,521,2.263,522,2.263,523,2.263,524,1.427,525,2.263,526,1.427,527,3.201,528,2.263,529,2.263,530,1.427,531,1.427,532,1.427,533,2.263,534,1.427,535,1.427,536,1.427,537,1.427,538,1.133,539,3.892,540,4.965,541,4.26,542,4.724,543,1.427,544,1.427,545,1.427,546,1.427,547,3.714,548,1.427,549,1.427,550,2.234,551,1.427,552,3.201,553,2.263,554,3.49,555,2.234,556,2.812,557,2.234,558,1.427,559,2.234,560,2.234,561,1.427,562,1.427,563,1.427,564,1.427,565,1.427,566,1.427,567,1.427,568,1.427,569,1.427,570,1.427,571,1.427,572,1.427,573,1.427,574,4.038]],["title/injectables/WebService.html",[66,0.915,451,1.239]],["body/injectables/WebService.html",[3,0.389,4,0.323,8,0.323,21,0.323,22,0.487,24,1.034,25,0.061,26,1.332,27,0.323,28,0.389,30,1.215,32,0.586,33,0.323,36,0.389,37,0.389,44,1,62,0.031,63,0.031,66,0.952,82,0.952,89,1.78,90,1.507,92,1.78,93,0.735,97,1.624,98,1.624,100,1.624,124,1.001,128,1.507,133,3.037,167,2.686,168,2.819,200,1.78,215,2.146,219,3.71,224,1.425,242,2.872,252,2.165,266,2.686,302,2.146,337,2.787,338,2.581,401,2.686,451,1.289,452,1.182,478,3.238,494,1.425,550,3.081,555,2.146,557,2.146,559,2.146,560,2.146,575,1.425,576,2.701,577,3.616,578,2.701,579,1.793,580,3.616,581,2.701,582,2.701,583,1.793,584,2.701,585,1.793,586,4.076,587,2.701,588,1.793,589,2.701,590,1.793,591,1.793,592,2.701,593,1.793,594,2.701,595,1.793,596,2.701,597,1.793,598,2.701,599,1.793,600,2.701,601,1.793,602,2.701,603,1.793,604,2.701,605,4.352,606,1.793,607,2.701,608,1.793,609,1.793,610,1.793,611,1.793,612,1.793,613,1.793,614,1.793,615,3.878,616,1.793,617,3.249,618,4.076,619,3.249,620,2.701,621,1.793,622,4.769,623,4.229,624,2.701,625,1.793,626,2.701,627,1.793,628,1.793,629,1.793,630,1.793,631,1.793,632,1.793,633,1.793,634,1.793,635,1.793,636,1.793,637,1.793,638,2.701,639,1.793,640,1.793,641,1.793,642,2.701,643,2.701,644,1.793,645,1.793,646,1.793,647,1.793,648,1.793]],["title/coverage.html",[649,2.797]],["body/coverage.html",[0,0.152,1,0.745,8,0.619,9,2.727,16,0.745,24,0.745,25,0.059,46,0.745,49,0.745,51,0.745,53,0.745,55,0.619,58,0.745,62,0.048,63,0.048,64,2.727,66,1.209,67,1.407,188,2.727,252,1.638,289,4.121,308,2.727,377,2.727,386,2.727,451,2.012,453,2.727,486,2.727,492,2.727,575,2.727,649,2.727,650,3.433,651,3.433,652,3.433,653,4.217,654,2.727,655,3.433,656,2.727,657,4.217,658,3.433,659,3.433,660,3.433,661,3.433,662,3.433,663,3.433,664,3.433,665,3.433,666,3.433]],["title/dependencies.html",[667,1.732,668,2.476]],["body/dependencies.html",[25,0.06,33,0.655,34,1.488,62,0.049,63,0.049,120,2.392,122,2.025,368,2.884,369,2.884,370,2.392,668,2.884,669,3.63,670,5.142,671,3.63,672,4.363,673,3.466,674,3.63,675,3.63,676,3.63,677,3.63,678,3.63,679,3.63,680,3.63,681,3.63,682,3.63,683,3.63,684,3.63,685,3.63,686,3.63,687,3.63]],["title/index.html",[21,0.393,688,2.18,689,2.18]],["body/index.html",[0,0.128,2,0.651,4,0.542,25,0.044,27,0.699,29,2.386,59,0.772,60,0.772,62,0.044,63,0.044,185,1.979,252,1.433,349,1.979,370,2.99,399,1.979,538,3.731,673,2.386,690,4.293,691,3.004,692,3.877,693,4.696,694,2.386,695,3.004,696,3.877,697,4.293,698,3.004,699,3.004,700,4.809,701,4.809,702,3.004,703,3.877,704,3.004,705,3.004,706,3.877,707,3.004,708,3.004,709,3.004,710,3.004,711,3.004,712,3.877,713,3.877,714,3.004,715,3.004,716,3.004,717,4.293,718,3.004,719,3.004,720,3.004,721,3.004,722,3.004,723,3.004,724,3.004,725,4.293,726,3.004,727,3.004,728,3.004,729,3.004,730,3.004,731,3.004,732,3.004,733,3.004,734,3.004,735,3.004,736,3.877,737,4.293,738,3.004,739,3.004,740,3.004,741,3.004,742,3.004,743,4.293,744,3.004,745,4.809,746,3.004,747,3.877,748,3.004,749,3.004,750,3.004,751,3.004,752,3.004,753,3.004,754,3.004,755,3.004,756,3.004,757,3.004,758,3.004,759,3.004,760,3.004,761,3.004,762,3.004,763,1.979,764,3.004]],["title/modules.html",[765,2.797]],["body/modules.html",[25,0.053,62,0.053,63,0.053,765,3.277]],["title/overview.html",[763,2.32]],["body/overview.html",[2,0.885,25,0.053,62,0.053,63,0.053,452,2.689,763,2.689,766,4.081,767,4.081]],["title/properties.html",[22,0.562,667,1.732]],["body/properties.html",[22,0.738,25,0.056,62,0.053,63,0.053,694,3.25,768,4.092]],["title/miscellaneous/variables.html",[769,1.732,770,2.476]],["body/miscellaneous/variables.html",[21,0.703,24,0.846,25,0.059,27,0.703,28,0.846,62,0.052,63,0.052,65,1.862,70,1.178,654,3.1,656,3.617,769,3.1,770,3.1,771,3.902,772,3.902,773,3.902,774,3.902,775,3.902,776,3.902]]],"invertedIndex":[["",{"_index":25,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{},"injectables/WebService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":289,"title":{},"body":{"components/EpisodeComponent.html":{},"coverage.html":{}}}],["0.0.0",{"_index":768,"title":{},"body":{"properties.html":{}}}],["0.15.0",{"_index":687,"title":{},"body":{"dependencies.html":{}}}],["0.7",{"_index":449,"title":{},"body":{"components/ModalComponent.html":{}}}],["0/1",{"_index":657,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":658,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":659,"title":{},"body":{"coverage.html":{}}}],["0/19",{"_index":664,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":653,"title":{},"body":{"coverage.html":{}}}],["0/26",{"_index":660,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":663,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":661,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":662,"title":{},"body":{"coverage.html":{}}}],["1.1.26",{"_index":676,"title":{},"body":{"dependencies.html":{}}}],["17",{"_index":339,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["19.0.0",{"_index":670,"title":{},"body":{"dependencies.html":{}}}],["19.0.2",{"_index":695,"title":{},"body":{"index.html":{}}}],["2",{"_index":767,"title":{},"body":{"overview.html":{}}}],["2.3.0",{"_index":685,"title":{},"body":{"dependencies.html":{}}}],["3.7.1",{"_index":681,"title":{},"body":{"dependencies.html":{}}}],["3000",{"_index":162,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["32.3.3",{"_index":677,"title":{},"body":{"dependencies.html":{}}}],["5.3.3",{"_index":679,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":346,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["63",{"_index":546,"title":{},"body":{"components/TestComponent.html":{}}}],["65",{"_index":604,"title":{},"body":{"injectables/WebService.html":{}}}],["671158ec61e58bf0aa084615",{"_index":525,"title":{},"body":{"components/TestComponent.html":{}}}],["6751cf1ab316ca28510ca2f1",{"_index":533,"title":{},"body":{"components/TestComponent.html":{}}}],["7.8.0",{"_index":683,"title":{},"body":{"dependencies.html":{}}}],["700",{"_index":334,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["8",{"_index":766,"title":{},"body":{"overview.html":{}}}],["a.score",{"_index":275,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["above",{"_index":427,"title":{},"body":{"components/ModalComponent.html":{}}}],["access",{"_index":167,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"injectables/WebService.html":{}}}],["activatedroute",{"_index":213,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["active",{"_index":474,"title":{},"body":{"injectables/ModalService.html":{}}}],["actual_component",{"_index":61,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{}}}],["add",{"_index":417,"title":{},"body":{"components/ModalComponent.html":{},"injectables/ModalService.html":{}}}],["add(modal",{"_index":455,"title":{},"body":{"injectables/ModalService.html":{}}}],["additional",{"_index":755,"title":{},"body":{"index.html":{}}}],["ag",{"_index":368,"title":{},"body":{"components/EpisodesComponent.html":{},"dependencies.html":{}}}],["again",{"_index":283,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["aggridangular",{"_index":311,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["alert",{"_index":192,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["alert('session",{"_index":281,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["alert('user",{"_index":156,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["angular",{"_index":370,"title":{},"body":{"components/EpisodesComponent.html":{},"dependencies.html":{},"index.html":{}}}],["angular/animations",{"_index":669,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":122,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":606,"title":{},"body":{"injectables/WebService.html":{}}}],["angular/compiler",{"_index":671,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":33,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{},"injectables/WebService.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":120,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":672,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":34,"title":{},"body":{"components/AppComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/NavComponent.html":{},"dependencies.html":{}}}],["app",{"_index":12,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{}}}],["app.component.css",{"_index":20,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.html",{"_index":18,"title":{},"body":{"components/AppComponent.html":{}}}],["app/web.service",{"_index":118,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/TestComponent.html":{}}}],["appcomponent",{"_index":1,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{},"coverage.html":{}}}],["appconfig",{"_index":656,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["application",{"_index":706,"title":{},"body":{"index.html":{}}}],["application/json",{"_index":643,"title":{},"body":{"injectables/WebService.html":{}}}],["applicationconfig",{"_index":772,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array",{"_index":473,"title":{},"body":{"injectables/ModalService.html":{}}}],["array.isarray(data",{"_index":544,"title":{},"body":{"components/TestComponent.html":{}}}],["array.isarray(response",{"_index":549,"title":{},"body":{"components/TestComponent.html":{}}}],["artifacts",{"_index":729,"title":{},"body":{"index.html":{}}}],["attribute",{"_index":467,"title":{},"body":{"injectables/ModalService.html":{}}}],["auth",{"_index":47,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{}}}],["authbutton.component.css",{"_index":74,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["authbutton.component.html",{"_index":73,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["authbutton/authbutton.component",{"_index":490,"title":{},"body":{"components/NavComponent.html":{}}}],["authbuttoncomponent",{"_index":46,"title":{"components/AuthButtonComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{},"coverage.html":{}}}],["authdata",{"_index":638,"title":{},"body":{"injectables/WebService.html":{}}}],["authorization",{"_index":644,"title":{},"body":{"injectables/WebService.html":{}}}],["automatically",{"_index":707,"title":{},"body":{"index.html":{}}}],["autosizestrategy",{"_index":331,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["available",{"_index":720,"title":{},"body":{"index.html":{}}}],["b",{"_index":273,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["b.score",{"_index":274,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["backdrop",{"_index":447,"title":{},"body":{"components/ModalComponent.html":{}}}],["background",{"_index":430,"title":{},"body":{"components/ModalComponent.html":{}}}],["backgroundcolor",{"_index":329,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["ban",{"_index":200,"title":{},"body":{"components/EpisodeComponent.html":{},"components/TestComponent.html":{},"injectables/WebService.html":{}}}],["ban(username",{"_index":215,"title":{},"body":{"components/EpisodeComponent.html":{},"injectables/WebService.html":{}}}],["basic",{"_index":639,"title":{},"body":{"injectables/WebService.html":{}}}],["bcsfansitefe",{"_index":29,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["before",{"_index":425,"title":{},"body":{"components/ModalComponent.html":{}}}],["block",{"_index":438,"title":{},"body":{"components/ModalComponent.html":{}}}],["body.modal",{"_index":444,"title":{},"body":{"components/ModalComponent.html":{}}}],["boolean",{"_index":246,"title":{},"body":{"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{}}}],["bootstrap",{"_index":678,"title":{},"body":{"dependencies.html":{}}}],["bottom",{"_index":424,"title":{},"body":{"components/ModalComponent.html":{}}}],["browser",{"_index":673,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["btoa(creds.username",{"_index":640,"title":{},"body":{"injectables/WebService.html":{}}}],["build",{"_index":725,"title":{},"body":{"index.html":{}}}],["buildthis",{"_index":726,"title":{},"body":{"index.html":{}}}],["button",{"_index":68,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["button'},{'name",{"_index":48,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{}}}],["choose",{"_index":751,"title":{},"body":{"index.html":{}}}],["class",{"_index":37,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{},"injectables/WebService.html":{}}}],["cli",{"_index":693,"title":{},"body":{"index.html":{}}}],["click",{"_index":384,"title":{},"body":{"components/HomeComponent.html":{},"components/ModalComponent.html":{}}}],["close",{"_index":397,"title":{},"body":{"components/ModalComponent.html":{},"injectables/ModalService.html":{}}}],["code",{"_index":712,"title":{},"body":{"index.html":{}}}],["coldef",{"_index":353,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["come",{"_index":749,"title":{},"body":{"index.html":{}}}],["command",{"_index":743,"title":{},"body":{"index.html":{}}}],["commonmodule",{"_index":72,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{}}}],["community",{"_index":371,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["compile",{"_index":727,"title":{},"body":{"index.html":{}}}],["complete",{"_index":185,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"index.html":{}}}],["compodoc/compodoc",{"_index":675,"title":{},"body":{"dependencies.html":{}}}],["component",{"_index":0,"title":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{},"coverage.html":{},"index.html":{}}}],["component_template",{"_index":43,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{},"index.html":{},"overview.html":{}}}],["console.log('token",{"_index":181,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["console.log(token",{"_index":647,"title":{},"body":{"injectables/WebService.html":{}}}],["const",{"_index":337,"title":{},"body":{"components/EpisodesComponent.html":{},"injectables/ModalService.html":{},"injectables/WebService.html":{}}}],["constructor",{"_index":93,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/ModalComponent.html":{},"components/TestComponent.html":{},"injectables/WebService.html":{}}}],["constructor(http",{"_index":579,"title":{},"body":{"injectables/WebService.html":{}}}],["constructor(modalservice",{"_index":402,"title":{},"body":{"components/ModalComponent.html":{}}}],["constructor(private",{"_index":124,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/ModalComponent.html":{},"components/TestComponent.html":{},"injectables/WebService.html":{}}}],["constructor(webservice",{"_index":94,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/TestComponent.html":{}}}],["content",{"_index":642,"title":{},"body":{"injectables/WebService.html":{}}}],["control",{"_index":104,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{}}}],["coverage",{"_index":649,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["created",{"_index":158,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["creds",{"_index":494,"title":{},"body":{"components/TestComponent.html":{},"injectables/WebService.html":{}}}],["creds.password",{"_index":641,"title":{},"body":{"injectables/WebService.html":{}}}],["current",{"_index":348,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["currently",{"_index":483,"title":{},"body":{"injectables/ModalService.html":{}}}],["cursor",{"_index":327,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["data",{"_index":314,"title":{},"body":{"components/EpisodesComponent.html":{},"components/TestComponent.html":{}}}],["data.length",{"_index":545,"title":{},"body":{"components/TestComponent.html":{}}}],["date.parse(a.createddtm",{"_index":277,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["date.parse(b.createddtm",{"_index":276,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["default",{"_index":27,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{},"injectables/WebService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":30,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{},"injectables/WebService.html":{}}}],["delete",{"_index":201,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["delete(tid",{"_index":217,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["deletetrivia",{"_index":560,"title":{},"body":{"components/TestComponent.html":{},"injectables/WebService.html":{}}}],["deletetrivia(eid",{"_index":584,"title":{},"body":{"injectables/WebService.html":{}}}],["dependencies",{"_index":668,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["detailed",{"_index":760,"title":{},"body":{"index.html":{}}}],["development",{"_index":696,"title":{},"body":{"index.html":{}}}],["directive",{"_index":41,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{}}}],["directives",{"_index":60,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{},"index.html":{}}}],["directory",{"_index":731,"title":{},"body":{"index.html":{}}}],["display",{"_index":443,"title":{},"body":{"components/ModalComponent.html":{}}}],["displayed",{"_index":426,"title":{},"body":{"components/ModalComponent.html":{}}}],["dist",{"_index":730,"title":{},"body":{"index.html":{}}}],["document.body.appendchild(this.element",{"_index":429,"title":{},"body":{"components/ModalComponent.html":{}}}],["document.body.classlist.add('modal",{"_index":439,"title":{},"body":{"components/ModalComponent.html":{}}}],["document.body.classlist.remove('modal",{"_index":442,"title":{},"body":{"components/ModalComponent.html":{}}}],["documentation",{"_index":650,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":6,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{}}}],["dynamic",{"_index":674,"title":{},"body":{"dependencies.html":{}}}],["e",{"_index":365,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["e2e",{"_index":746,"title":{},"body":{"index.html":{}}}],["e2eangular",{"_index":748,"title":{},"body":{"index.html":{}}}],["each",{"_index":537,"title":{},"body":{"components/TestComponent.html":{}}}],["edit",{"_index":202,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["edit(tid",{"_index":220,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["edit(tid:any",{"_index":285,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["edited",{"_index":306,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["editedtrivia",{"_index":268,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["editedvalue",{"_index":239,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["editform",{"_index":193,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["edittrivia",{"_index":557,"title":{},"body":{"components/TestComponent.html":{},"injectables/WebService.html":{}}}],["edittrivia(eid",{"_index":587,"title":{},"body":{"injectables/WebService.html":{}}}],["eid",{"_index":586,"title":{},"body":{"injectables/WebService.html":{}}}],["el",{"_index":403,"title":{},"body":{"components/ModalComponent.html":{}}}],["el.nativeelement",{"_index":416,"title":{},"body":{"components/ModalComponent.html":{}}}],["el.target.classname",{"_index":432,"title":{},"body":{"components/ModalComponent.html":{}}}],["element",{"_index":40,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{}}}],["elementref",{"_index":404,"title":{},"body":{"components/ModalComponent.html":{}}}],["email",{"_index":132,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/TestComponent.html":{}}}],["encapsulation",{"_index":390,"title":{},"body":{"components/ModalComponent.html":{}}}],["end",{"_index":745,"title":{},"body":{"index.html":{}}}],["ensure",{"_index":465,"title":{},"body":{"injectables/ModalService.html":{}}}],["enter",{"_index":382,"title":{},"body":{"components/HomeComponent.html":{}}}],["episode",{"_index":189,"title":{},"body":{"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{}}}],["episode'},{'name",{"_index":50,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{}}}],["episode.component.css",{"_index":191,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["episode.component.html",{"_index":190,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["episode.episodenumber",{"_index":303,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["episode.seasonnumber",{"_index":301,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["episode.title",{"_index":299,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["episode_list",{"_index":194,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["episode_loaded",{"_index":195,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["episodecomponent",{"_index":49,"title":{"components/EpisodeComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{},"coverage.html":{}}}],["episodeid",{"_index":495,"title":{},"body":{"components/TestComponent.html":{}}}],["episodes",{"_index":309,"title":{},"body":{"components/EpisodesComponent.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{}}}],["episodes'},{'name",{"_index":52,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{}}}],["episodes.component.css",{"_index":313,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["episodes.component.html",{"_index":312,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["episodes_loaded",{"_index":315,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["episodescomponent",{"_index":51,"title":{"components/EpisodesComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{},"coverage.html":{}}}],["error",{"_index":159,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/TestComponent.html":{}}}],["error('modal",{"_index":472,"title":{},"body":{"injectables/ModalService.html":{}}}],["error(`modal",{"_index":480,"title":{},"body":{"injectables/ModalService.html":{}}}],["error.error.error",{"_index":160,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["errormessage",{"_index":75,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["event",{"_index":233,"title":{},"body":{"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{}}}],["event.data._id",{"_index":376,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["event.target.value",{"_index":270,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["eventcoalescing",{"_index":774,"title":{},"body":{"miscellaneous/variables.html":{}}}],["everything",{"_index":428,"title":{},"body":{"components/ModalComponent.html":{}}}],["example",{"_index":700,"title":{},"body":{"index.html":{}}}],["execute",{"_index":738,"title":{},"body":{"index.html":{}}}],["existing",{"_index":536,"title":{},"body":{"components/TestComponent.html":{}}}],["expired",{"_index":182,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{}}}],["export",{"_index":36,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{},"injectables/WebService.html":{}}}],["fail",{"_index":542,"title":{},"body":{"components/TestComponent.html":{}}}],["false",{"_index":247,"title":{},"body":{"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/ModalComponent.html":{}}}],["fetched",{"_index":547,"title":{},"body":{"components/TestComponent.html":{}}}],["field",{"_index":354,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["fields",{"_index":186,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{}}}],["file",{"_index":8,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{},"injectables/WebService.html":{},"coverage.html":{}}}],["files",{"_index":711,"title":{},"body":{"index.html":{}}}],["filter",{"_index":355,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["find",{"_index":344,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["fitprovidedwidth",{"_index":332,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["floatingfilter",{"_index":356,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["following",{"_index":742,"title":{},"body":{"index.html":{}}}],["form",{"_index":224,"title":{},"body":{"components/EpisodeComponent.html":{},"injectables/WebService.html":{}}}],["form.email",{"_index":636,"title":{},"body":{"injectables/WebService.html":{}}}],["form.name",{"_index":630,"title":{},"body":{"injectables/WebService.html":{}}}],["form.password",{"_index":634,"title":{},"body":{"injectables/WebService.html":{}}}],["form.username",{"_index":632,"title":{},"body":{"injectables/WebService.html":{}}}],["formbuilder",{"_index":95,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{}}}],["formdata",{"_index":619,"title":{},"body":{"injectables/WebService.html":{}}}],["found",{"_index":481,"title":{},"body":{"injectables/ModalService.html":{}}}],["framework",{"_index":750,"title":{},"body":{"index.html":{}}}],["frontend",{"_index":612,"title":{},"body":{"injectables/WebService.html":{}}}],["generate",{"_index":717,"title":{},"body":{"index.html":{}}}],["generated",{"_index":691,"title":{},"body":{"index.html":{}}}],["getepisode",{"_index":576,"title":{},"body":{"injectables/WebService.html":{}}}],["getepisode(id",{"_index":589,"title":{},"body":{"injectables/WebService.html":{}}}],["getepisodes",{"_index":577,"title":{},"body":{"injectables/WebService.html":{}}}],["getrowstyle",{"_index":335,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["getting",{"_index":688,"title":{"index.html":{}},"body":{}}],["gettrivias",{"_index":578,"title":{},"body":{"injectables/WebService.html":{}}}],["gettrivias(id",{"_index":592,"title":{},"body":{"injectables/WebService.html":{}}}],["grid",{"_index":369,"title":{},"body":{"components/EpisodesComponent.html":{},"dependencies.html":{}}}],["gridoptions",{"_index":316,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["hamlindigo",{"_index":523,"title":{},"body":{"components/TestComponent.html":{}}}],["handled",{"_index":611,"title":{},"body":{"injectables/WebService.html":{}}}],["headername",{"_index":359,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["headers",{"_index":623,"title":{},"body":{"injectables/WebService.html":{}}}],["headings",{"_index":317,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["helpbuilding",{"_index":724,"title":{},"body":{"index.html":{}}}],["hidden",{"_index":446,"title":{},"body":{"components/ModalComponent.html":{}}}],["home",{"_index":378,"title":{},"body":{"components/HomeComponent.html":{},"components/NavComponent.html":{}}}],["home'},{'name",{"_index":54,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{}}}],["home.component.css",{"_index":380,"title":{},"body":{"components/HomeComponent.html":{}}}],["home.component.html",{"_index":379,"title":{},"body":{"components/HomeComponent.html":{}}}],["homecomponent",{"_index":53,"title":{"components/HomeComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{},"coverage.html":{}}}],["html",{"_index":39,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{}}}],["http",{"_index":582,"title":{},"body":{"injectables/WebService.html":{}}}],["http://localhost:4200",{"_index":705,"title":{},"body":{"index.html":{}}}],["http://localhost:5000/api/v1.0/episodes",{"_index":615,"title":{},"body":{"injectables/WebService.html":{}}}],["http://localhost:5000/api/v1.0/episodes?pn='+'&ps",{"_index":613,"title":{},"body":{"injectables/WebService.html":{}}}],["http://localhost:5000/api/v1.0/register",{"_index":637,"title":{},"body":{"injectables/WebService.html":{}}}],["httpclient",{"_index":580,"title":{},"body":{"injectables/WebService.html":{}}}],["httpheaders",{"_index":605,"title":{},"body":{"injectables/WebService.html":{}}}],["httpoptions",{"_index":622,"title":{},"body":{"injectables/WebService.html":{}}}],["id",{"_index":401,"title":{},"body":{"components/ModalComponent.html":{},"injectables/ModalService.html":{},"injectables/WebService.html":{}}}],["identifier",{"_index":651,"title":{},"body":{"coverage.html":{}}}],["imdbrating",{"_index":358,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["implements",{"_index":387,"title":{},"body":{"components/ModalComponent.html":{}}}],["import",{"_index":32,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{},"injectables/WebService.html":{}}}],["important",{"_index":450,"title":{},"body":{"components/ModalComponent.html":{}}}],["imports",{"_index":14,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/NavComponent.html":{}}}],["includes",{"_index":714,"title":{},"body":{"index.html":{}}}],["including",{"_index":759,"title":{},"body":{"index.html":{}}}],["index",{"_index":21,"title":{"index.html":{}},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{},"injectables/WebService.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{},"injectables/WebService.html":{}}}],["information",{"_index":758,"title":{},"body":{"index.html":{}}}],["injectable",{"_index":451,"title":{"injectables/ModalService.html":{},"injectables/WebService.html":{}},"body":{"injectables/ModalService.html":{},"injectables/WebService.html":{},"coverage.html":{}}}],["injectables",{"_index":452,"title":{},"body":{"injectables/ModalService.html":{},"injectables/WebService.html":{},"overview.html":{}}}],["input",{"_index":413,"title":{},"body":{"components/ModalComponent.html":{}}}],["inputs",{"_index":400,"title":{},"body":{"components/ModalComponent.html":{}}}],["instance",{"_index":419,"title":{},"body":{"components/ModalComponent.html":{}}}],["isincomplete",{"_index":203,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["isincomplete(form",{"_index":222,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["isincompletelogin",{"_index":83,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["isincompleteregister",{"_index":84,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["isinvalid",{"_index":204,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["isinvalid(form",{"_index":225,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["isinvalidlogin",{"_index":85,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["isinvalidlogin(control",{"_index":102,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["isinvalidregister",{"_index":86,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["isinvalidregister(control",{"_index":105,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["isopen",{"_index":396,"title":{},"body":{"components/ModalComponent.html":{}}}],["isuntouched",{"_index":205,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["isuntouched(form",{"_index":227,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["isuntouchedlogin",{"_index":87,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["isuntouchedregister",{"_index":88,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["jquery",{"_index":680,"title":{},"body":{"dependencies.html":{}}}],["karma",{"_index":739,"title":{},"body":{"index.html":{}}}],["keyof",{"_index":293,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["last",{"_index":345,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["legend",{"_index":38,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{}}}],["list",{"_index":719,"title":{},"body":{"index.html":{}}}],["local",{"_index":699,"title":{},"body":{"index.html":{}}}],["log",{"_index":183,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{}}}],["login",{"_index":89,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/TestComponent.html":{},"injectables/WebService.html":{}}}],["login(creds",{"_index":594,"title":{},"body":{"injectables/WebService.html":{}}}],["loginform",{"_index":76,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["logout",{"_index":90,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/TestComponent.html":{},"injectables/WebService.html":{}}}],["logout(token",{"_index":596,"title":{},"body":{"injectables/WebService.html":{}}}],["matching",{"_index":63,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{},"injectables/WebService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math",{"_index":196,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["metadata",{"_index":10,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{}}}],["methods",{"_index":82,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/TestComponent.html":{},"injectables/WebService.html":{}}}],["miscellaneous",{"_index":769,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["modal",{"_index":392,"title":{},"body":{"components/ModalComponent.html":{},"injectables/ModalService.html":{}}}],["modal'},{'name",{"_index":56,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{}}}],["modal.component",{"_index":463,"title":{},"body":{"injectables/ModalService.html":{}}}],["modal.component.css",{"_index":394,"title":{},"body":{"components/ModalComponent.html":{}}}],["modal.component.html",{"_index":395,"title":{},"body":{"components/ModalComponent.html":{}}}],["modal.id",{"_index":468,"title":{},"body":{"injectables/ModalService.html":{}}}],["modal.open",{"_index":482,"title":{},"body":{"injectables/ModalService.html":{}}}],["modal.service",{"_index":414,"title":{},"body":{"components/ModalComponent.html":{}}}],["modal/modal.component",{"_index":123,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{}}}],["modal/modal.service",{"_index":121,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{}}}],["modal?.close",{"_index":485,"title":{},"body":{"injectables/ModalService.html":{}}}],["modalcomponent",{"_index":55,"title":{"components/ModalComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{},"coverage.html":{}}}],["modals",{"_index":454,"title":{},"body":{"injectables/ModalService.html":{}}}],["modalservice",{"_index":67,"title":{"injectables/ModalService.html":{}},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"coverage.html":{}}}],["modify",{"_index":710,"title":{},"body":{"index.html":{}}}],["modules",{"_index":765,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":757,"title":{},"body":{"index.html":{}}}],["move",{"_index":423,"title":{},"body":{"components/ModalComponent.html":{}}}],["mytrivia",{"_index":553,"title":{},"body":{"components/TestComponent.html":{}}}],["name",{"_index":44,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{},"injectables/WebService.html":{}}}],["namefor",{"_index":718,"title":{},"body":{"index.html":{}}}],["nav.component.html",{"_index":488,"title":{},"body":{"components/NavComponent.html":{}}}],["nav/nav.component",{"_index":35,"title":{},"body":{"components/AppComponent.html":{}}}],["navcomponent",{"_index":16,"title":{"components/NavComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{},"coverage.html":{}}}],["navigate",{"_index":704,"title":{},"body":{"index.html":{}}}],["navigation",{"_index":487,"title":{},"body":{"components/NavComponent.html":{}}}],["navigation'},{'name",{"_index":57,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{}}}],["nbsp;&nbsp;click",{"_index":381,"title":{},"body":{"components/HomeComponent.html":{}}}],["needs",{"_index":754,"title":{},"body":{"index.html":{}}}],["new",{"_index":252,"title":{},"body":{"components/EpisodeComponent.html":{},"injectables/ModalService.html":{},"injectables/WebService.html":{},"coverage.html":{},"index.html":{}}}],["ng",{"_index":701,"title":{},"body":{"index.html":{}}}],["ngondestroy",{"_index":398,"title":{},"body":{"components/ModalComponent.html":{}}}],["ngoninit",{"_index":91,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/ModalComponent.html":{},"components/TestComponent.html":{}}}],["none",{"_index":441,"title":{},"body":{"components/ModalComponent.html":{}}}],["number",{"_index":302,"title":{},"body":{"components/EpisodeComponent.html":{},"injectables/WebService.html":{}}}],["object",{"_index":521,"title":{},"body":{"components/TestComponent.html":{}}}],["odd",{"_index":351,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["ondestroy",{"_index":389,"title":{},"body":{"components/ModalComponent.html":{}}}],["one",{"_index":752,"title":{},"body":{"index.html":{}}}],["oninit",{"_index":388,"title":{},"body":{"components/ModalComponent.html":{}}}],["onrowclicked",{"_index":318,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["onrowclicked(event",{"_index":322,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["onsortselection",{"_index":206,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["onsortselection(event",{"_index":231,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["onsubmit",{"_index":207,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["opacity",{"_index":448,"title":{},"body":{"components/ModalComponent.html":{}}}],["open",{"_index":399,"title":{},"body":{"components/ModalComponent.html":{},"injectables/ModalService.html":{},"index.html":{}}}],["open(id",{"_index":458,"title":{},"body":{"injectables/ModalService.html":{}}}],["opened",{"_index":421,"title":{},"body":{"components/ModalComponent.html":{}}}],["optimizes",{"_index":733,"title":{},"body":{"index.html":{}}}],["optional",{"_index":98,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/TestComponent.html":{},"injectables/WebService.html":{}}}],["out",{"_index":184,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["overflow",{"_index":445,"title":{},"body":{"components/ModalComponent.html":{}}}],["overview",{"_index":763,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["p",{"_index":362,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["p.data.episodenumber",{"_index":366,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["p.data.seasonnumber",{"_index":364,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["package",{"_index":667,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":349,"title":{},"body":{"components/EpisodesComponent.html":{},"components/ModalComponent.html":{},"index.html":{}}}],["pageindex",{"_index":340,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["pagesize",{"_index":338,"title":{},"body":{"components/EpisodesComponent.html":{},"injectables/WebService.html":{}}}],["pagination",{"_index":610,"title":{},"body":{"injectables/WebService.html":{}}}],["parameters",{"_index":97,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/TestComponent.html":{},"injectables/WebService.html":{}}}],["params",{"_index":336,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["params.api.paginationgetcurrentpage",{"_index":341,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["params.rowindex",{"_index":343,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["pass",{"_index":541,"title":{},"body":{"components/TestComponent.html":{}}}],["password",{"_index":130,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/TestComponent.html":{}}}],["performance",{"_index":734,"title":{},"body":{"index.html":{}}}],["pipes",{"_index":723,"title":{},"body":{"index.html":{}}}],["please",{"_index":282,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["pointer",{"_index":328,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["postdata",{"_index":618,"title":{},"body":{"injectables/WebService.html":{}}}],["postdata.append(\"text",{"_index":620,"title":{},"body":{"injectables/WebService.html":{}}}],["postdata.append('email",{"_index":635,"title":{},"body":{"injectables/WebService.html":{}}}],["postdata.append('name",{"_index":629,"title":{},"body":{"injectables/WebService.html":{}}}],["postdata.append('password",{"_index":633,"title":{},"body":{"injectables/WebService.html":{}}}],["postdata.append('username",{"_index":631,"title":{},"body":{"injectables/WebService.html":{}}}],["posttrivia",{"_index":555,"title":{},"body":{"components/TestComponent.html":{},"injectables/WebService.html":{}}}],["posttrivia(id",{"_index":598,"title":{},"body":{"injectables/WebService.html":{}}}],["powerful",{"_index":715,"title":{},"body":{"index.html":{}}}],["private",{"_index":125,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/TestComponent.html":{}}}],["processifedited",{"_index":208,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["production",{"_index":732,"title":{},"body":{"index.html":{}}}],["project",{"_index":690,"title":{},"body":{"index.html":{}}}],["properties",{"_index":22,"title":{"properties.html":{}},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{},"injectables/WebService.html":{},"properties.html":{}}}],["protected",{"_index":79,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/NavComponent.html":{}}}],["providedin",{"_index":464,"title":{},"body":{"injectables/ModalService.html":{}}}],["providehttpclient",{"_index":776,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providerouter(routes",{"_index":775,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":65,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/TestComponent.html":{},"miscellaneous/variables.html":{}}}],["providezonechangedetection",{"_index":773,"title":{},"body":{"miscellaneous/variables.html":{}}}],["public",{"_index":77,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{}}}],["pull",{"_index":608,"title":{},"body":{"injectables/WebService.html":{}}}],["rating",{"_index":360,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["reactiveformsmodule",{"_index":71,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{}}}],["readonly",{"_index":80,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/NavComponent.html":{}}}],["records",{"_index":609,"title":{},"body":{"injectables/WebService.html":{}}}],["reference",{"_index":764,"title":{},"body":{"index.html":{}}}],["references",{"_index":761,"title":{},"body":{"index.html":{}}}],["register",{"_index":92,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/TestComponent.html":{},"injectables/WebService.html":{}}}],["register(form",{"_index":600,"title":{},"body":{"injectables/WebService.html":{}}}],["registerform",{"_index":78,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["registeruser",{"_index":496,"title":{},"body":{"components/TestComponent.html":{}}}],["reload",{"_index":708,"title":{},"body":{"index.html":{}}}],["remove",{"_index":434,"title":{},"body":{"components/ModalComponent.html":{},"injectables/ModalService.html":{}}}],["remove(modal",{"_index":460,"title":{},"body":{"injectables/ModalService.html":{}}}],["replace",{"_index":535,"title":{},"body":{"components/TestComponent.html":{}}}],["report",{"_index":574,"title":{},"body":{"components/TestComponent.html":{}}}],["resources",{"_index":756,"title":{},"body":{"index.html":{}}}],["response",{"_index":258,"title":{},"body":{"components/EpisodeComponent.html":{},"components/TestComponent.html":{}}}],["response.token",{"_index":554,"title":{},"body":{"components/TestComponent.html":{}}}],["response['data",{"_index":373,"title":{},"body":{"components/EpisodesComponent.html":{},"components/TestComponent.html":{}}}],["response['token",{"_index":169,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["response['user']['admin",{"_index":175,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["response['user']['name",{"_index":173,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["response['user']['username",{"_index":171,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["results",{"_index":62,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{},"injectables/WebService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":133,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"injectables/WebService.html":{}}}],["returns",{"_index":100,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/TestComponent.html":{},"injectables/WebService.html":{}}}],["rgba(0,0,0,0.5",{"_index":330,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["root",{"_index":13,"title":{},"body":{"components/AppComponent.html":{},"injectables/ModalService.html":{}}}],["root'},{'name",{"_index":45,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{}}}],["route",{"_index":212,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["router",{"_index":319,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["routermodule",{"_index":310,"title":{},"body":{"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/NavComponent.html":{}}}],["routeroutlet",{"_index":15,"title":{},"body":{"components/AppComponent.html":{}}}],["rowindexonpage",{"_index":342,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["rows",{"_index":347,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["rowstyle",{"_index":326,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["run",{"_index":538,"title":{},"body":{"components/TestComponent.html":{},"index.html":{}}}],["runner",{"_index":740,"title":{},"body":{"index.html":{}}}],["running",{"_index":703,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":682,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":363,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["scaffolding",{"_index":713,"title":{},"body":{"index.html":{}}}],["schematics",{"_index":721,"title":{},"body":{"index.html":{}}}],["season",{"_index":300,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["select",{"_index":350,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["selector",{"_index":11,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{}}}],["self",{"_index":418,"title":{},"body":{"components/ModalComponent.html":{}}}],["serveonce",{"_index":702,"title":{},"body":{"index.html":{}}}],["server",{"_index":697,"title":{},"body":{"index.html":{}}}],["service",{"_index":420,"title":{},"body":{"components/ModalComponent.html":{}}}],["sessionstorage",{"_index":81,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/NavComponent.html":{}}}],["sessionstorage.removeitem('admin",{"_index":180,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{}}}],["sessionstorage.removeitem('loggedinname",{"_index":179,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{}}}],["sessionstorage.removeitem('loggedinusername",{"_index":178,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{}}}],["sessionstorage.removeitem('x",{"_index":177,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{}}}],["sessionstorage['admin",{"_index":174,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["sessionstorage['loggedinname",{"_index":172,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/NavComponent.html":{}}}],["sessionstorage['loggedinusername",{"_index":170,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["sessionstorage['x",{"_index":166,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{}}}],["sessionstorage[\\'loggedinname",{"_index":491,"title":{},"body":{"components/NavComponent.html":{}}}],["settimeout",{"_index":161,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["site",{"_index":383,"title":{},"body":{"components/HomeComponent.html":{}}}],["sort",{"_index":209,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["sortable",{"_index":357,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["sortby",{"_index":197,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{},"injectables/WebService.html":{},"index.html":{}}}],["specified",{"_index":479,"title":{},"body":{"injectables/ModalService.html":{}}}],["speed",{"_index":735,"title":{},"body":{"index.html":{}}}],["src/.../app.config.ts",{"_index":771,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/app.component.ts",{"_index":9,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:12",{"_index":31,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.config.ts",{"_index":654,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/web.service.ts",{"_index":575,"title":{},"body":{"injectables/WebService.html":{},"coverage.html":{}}}],["src/app/web.service.ts:13",{"_index":590,"title":{},"body":{"injectables/WebService.html":{}}}],["src/app/web.service.ts:17",{"_index":593,"title":{},"body":{"injectables/WebService.html":{}}}],["src/app/web.service.ts:21",{"_index":599,"title":{},"body":{"injectables/WebService.html":{}}}],["src/app/web.service.ts:32",{"_index":588,"title":{},"body":{"injectables/WebService.html":{}}}],["src/app/web.service.ts:44",{"_index":603,"title":{},"body":{"injectables/WebService.html":{}}}],["src/app/web.service.ts:54",{"_index":585,"title":{},"body":{"injectables/WebService.html":{}}}],["src/app/web.service.ts:6",{"_index":581,"title":{},"body":{"injectables/WebService.html":{}}}],["src/app/web.service.ts:64",{"_index":601,"title":{},"body":{"injectables/WebService.html":{}}}],["src/app/web.service.ts:74",{"_index":595,"title":{},"body":{"injectables/WebService.html":{}}}],["src/app/web.service.ts:8",{"_index":591,"title":{},"body":{"injectables/WebService.html":{}}}],["src/app/web.service.ts:85",{"_index":597,"title":{},"body":{"injectables/WebService.html":{}}}],["src/app/web.service.ts:95",{"_index":583,"title":{},"body":{"injectables/WebService.html":{}}}],["src/authbutton/authbutton.component.ts",{"_index":64,"title":{},"body":{"components/AuthButtonComponent.html":{},"coverage.html":{}}}],["src/authbutton/authbutton.component.ts:116",{"_index":117,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["src/authbutton/authbutton.component.ts:17",{"_index":114,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["src/authbutton/authbutton.component.ts:18",{"_index":116,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["src/authbutton/authbutton.component.ts:19",{"_index":96,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["src/authbutton/authbutton.component.ts:22",{"_index":115,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["src/authbutton/authbutton.component.ts:25",{"_index":112,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["src/authbutton/authbutton.component.ts:38",{"_index":103,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["src/authbutton/authbutton.component.ts:42",{"_index":107,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["src/authbutton/authbutton.component.ts:46",{"_index":99,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["src/authbutton/authbutton.component.ts:52",{"_index":106,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["src/authbutton/authbutton.component.ts:56",{"_index":108,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["src/authbutton/authbutton.component.ts:60",{"_index":101,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["src/authbutton/authbutton.component.ts:68",{"_index":113,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["src/authbutton/authbutton.component.ts:82",{"_index":109,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["src/authbutton/authbutton.component.ts:99",{"_index":111,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["src/episode/episode.component.ts",{"_index":188,"title":{},"body":{"components/EpisodeComponent.html":{},"coverage.html":{}}}],["src/episode/episode.component.ts:117",{"_index":235,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["src/episode/episode.component.ts:125",{"_index":234,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["src/episode/episode.component.ts:146",{"_index":218,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["src/episode/episode.component.ts:164",{"_index":216,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["src/episode/episode.component.ts:181",{"_index":226,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["src/episode/episode.component.ts:184",{"_index":228,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["src/episode/episode.component.ts:187",{"_index":223,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["src/episode/episode.component.ts:192",{"_index":249,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["src/episode/episode.component.ts:193",{"_index":251,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["src/episode/episode.component.ts:194",{"_index":243,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["src/episode/episode.component.ts:20",{"_index":245,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["src/episode/episode.component.ts:21",{"_index":253,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["src/episode/episode.component.ts:22",{"_index":254,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["src/episode/episode.component.ts:23",{"_index":244,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["src/episode/episode.component.ts:24",{"_index":248,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["src/episode/episode.component.ts:25",{"_index":214,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["src/episode/episode.component.ts:28",{"_index":250,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["src/episode/episode.component.ts:32",{"_index":230,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["src/episode/episode.component.ts:53",{"_index":238,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["src/episode/episode.component.ts:58",{"_index":232,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["src/episode/episode.component.ts:63",{"_index":236,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["src/episode/episode.component.ts:68",{"_index":229,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["src/episode/episode.component.ts:75",{"_index":241,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["src/episode/episode.component.ts:95",{"_index":221,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["src/episodes/episodes.component.ts",{"_index":308,"title":{},"body":{"components/EpisodesComponent.html":{},"coverage.html":{}}}],["src/episodes/episodes.component.ts:17",{"_index":324,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["src/episodes/episodes.component.ts:18",{"_index":325,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["src/episodes/episodes.component.ts:20",{"_index":367,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["src/episodes/episodes.component.ts:33",{"_index":352,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["src/episodes/episodes.component.ts:45",{"_index":320,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["src/episodes/episodes.component.ts:49",{"_index":321,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["src/episodes/episodes.component.ts:56",{"_index":323,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["src/home/home.component.ts",{"_index":377,"title":{},"body":{"components/HomeComponent.html":{},"coverage.html":{}}}],["src/modal/modal.component.ts",{"_index":386,"title":{},"body":{"components/ModalComponent.html":{},"coverage.html":{}}}],["src/modal/modal.component.ts:11",{"_index":406,"title":{},"body":{"components/ModalComponent.html":{}}}],["src/modal/modal.component.ts:12",{"_index":411,"title":{},"body":{"components/ModalComponent.html":{}}}],["src/modal/modal.component.ts:13",{"_index":405,"title":{},"body":{"components/ModalComponent.html":{}}}],["src/modal/modal.component.ts:19",{"_index":409,"title":{},"body":{"components/ModalComponent.html":{}}}],["src/modal/modal.component.ts:34",{"_index":408,"title":{},"body":{"components/ModalComponent.html":{}}}],["src/modal/modal.component.ts:42",{"_index":410,"title":{},"body":{"components/ModalComponent.html":{}}}],["src/modal/modal.component.ts:48",{"_index":407,"title":{},"body":{"components/ModalComponent.html":{}}}],["src/modal/modal.service.ts",{"_index":453,"title":{},"body":{"injectables/ModalService.html":{},"coverage.html":{}}}],["src/modal/modal.service.ts:19",{"_index":461,"title":{},"body":{"injectables/ModalService.html":{}}}],["src/modal/modal.service.ts:24",{"_index":459,"title":{},"body":{"injectables/ModalService.html":{}}}],["src/modal/modal.service.ts:35",{"_index":457,"title":{},"body":{"injectables/ModalService.html":{}}}],["src/modal/modal.service.ts:7",{"_index":462,"title":{},"body":{"injectables/ModalService.html":{}}}],["src/modal/modal.service.ts:9",{"_index":456,"title":{},"body":{"injectables/ModalService.html":{}}}],["src/nav/nav.component.ts",{"_index":486,"title":{},"body":{"components/NavComponent.html":{},"coverage.html":{}}}],["src/nav/nav.component.ts:12",{"_index":489,"title":{},"body":{"components/NavComponent.html":{}}}],["src/test/test.component.ts",{"_index":492,"title":{},"body":{"components/TestComponent.html":{},"coverage.html":{}}}],["src/test/test.component.ts:10",{"_index":531,"title":{},"body":{"components/TestComponent.html":{}}}],["src/test/test.component.ts:11",{"_index":532,"title":{},"body":{"components/TestComponent.html":{}}}],["src/test/test.component.ts:113",{"_index":520,"title":{},"body":{"components/TestComponent.html":{}}}],["src/test/test.component.ts:13",{"_index":524,"title":{},"body":{"components/TestComponent.html":{}}}],["src/test/test.component.ts:138",{"_index":512,"title":{},"body":{"components/TestComponent.html":{}}}],["src/test/test.component.ts:14",{"_index":530,"title":{},"body":{"components/TestComponent.html":{}}}],["src/test/test.component.ts:15",{"_index":526,"title":{},"body":{"components/TestComponent.html":{}}}],["src/test/test.component.ts:16",{"_index":509,"title":{},"body":{"components/TestComponent.html":{}}}],["src/test/test.component.ts:162",{"_index":519,"title":{},"body":{"components/TestComponent.html":{}}}],["src/test/test.component.ts:176",{"_index":511,"title":{},"body":{"components/TestComponent.html":{}}}],["src/test/test.component.ts:196",{"_index":517,"title":{},"body":{"components/TestComponent.html":{}}}],["src/test/test.component.ts:20",{"_index":516,"title":{},"body":{"components/TestComponent.html":{}}}],["src/test/test.component.ts:216",{"_index":510,"title":{},"body":{"components/TestComponent.html":{}}}],["src/test/test.component.ts:33",{"_index":514,"title":{},"body":{"components/TestComponent.html":{}}}],["src/test/test.component.ts:49",{"_index":515,"title":{},"body":{"components/TestComponent.html":{}}}],["src/test/test.component.ts:64",{"_index":518,"title":{},"body":{"components/TestComponent.html":{}}}],["src/test/test.component.ts:88",{"_index":513,"title":{},"body":{"components/TestComponent.html":{}}}],["standalone",{"_index":69,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/HomeComponent.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{}}}],["start",{"_index":698,"title":{},"body":{"index.html":{}}}],["started",{"_index":689,"title":{"index.html":{}},"body":{}}],["statements",{"_index":652,"title":{},"body":{"coverage.html":{}}}],["store",{"_index":728,"title":{},"body":{"index.html":{}}}],["string",{"_index":26,"title":{},"body":{"components/AppComponent.html":{},"components/EpisodeComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/TestComponent.html":{},"injectables/WebService.html":{}}}],["styles",{"_index":385,"title":{},"body":{"components/ModalComponent.html":{}}}],["styleurl",{"_index":19,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{}}}],["styleurls",{"_index":393,"title":{},"body":{"components/ModalComponent.html":{}}}],["submit",{"_index":187,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{}}}],["subscribe",{"_index":257,"title":{},"body":{"components/EpisodeComponent.html":{},"components/TestComponent.html":{}}}],["subscribe((response",{"_index":280,"title":{},"body":{"components/EpisodeComponent.html":{},"components/TestComponent.html":{}}}],["subscribe(response",{"_index":153,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["successfully",{"_index":157,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["such",{"_index":722,"title":{},"body":{"index.html":{}}}],["suits",{"_index":753,"title":{},"body":{"index.html":{}}}],["table",{"_index":666,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":665,"title":{},"body":{"coverage.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{}}}],["templateurl",{"_index":17,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{}}}],["test",{"_index":59,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{},"index.html":{}}}],["test.component.html",{"_index":493,"title":{},"body":{"components/TestComponent.html":{}}}],["test@email.com",{"_index":528,"title":{},"body":{"components/TestComponent.html":{}}}],["test_output",{"_index":497,"title":{},"body":{"components/TestComponent.html":{}}}],["testbanuser",{"_index":499,"title":{},"body":{"components/TestComponent.html":{}}}],["testcomponent",{"_index":58,"title":{"components/TestComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{},"coverage.html":{}}}],["testdeletetrivia",{"_index":500,"title":{},"body":{"components/TestComponent.html":{}}}],["testedittrivia",{"_index":501,"title":{},"body":{"components/TestComponent.html":{}}}],["testgetepisodes",{"_index":502,"title":{},"body":{"components/TestComponent.html":{}}}],["testgettrivias",{"_index":503,"title":{},"body":{"components/TestComponent.html":{}}}],["testing",{"_index":747,"title":{},"body":{"index.html":{}}}],["testlogin",{"_index":504,"title":{},"body":{"components/TestComponent.html":{}}}],["testlogout",{"_index":505,"title":{},"body":{"components/TestComponent.html":{}}}],["testpass",{"_index":529,"title":{},"body":{"components/TestComponent.html":{}}}],["testposttrivia",{"_index":506,"title":{},"body":{"components/TestComponent.html":{}}}],["testregister",{"_index":507,"title":{},"body":{"components/TestComponent.html":{}}}],["testrunning",{"_index":744,"title":{},"body":{"index.html":{}}}],["tests",{"_index":737,"title":{},"body":{"index.html":{}}}],["testuser",{"_index":527,"title":{},"body":{"components/TestComponent.html":{}}}],["testvotetrivia",{"_index":508,"title":{},"body":{"components/TestComponent.html":{}}}],["therealhowardhamlin",{"_index":522,"title":{},"body":{"components/TestComponent.html":{}}}],["this.close",{"_index":433,"title":{},"body":{"components/ModalComponent.html":{}}}],["this.creds",{"_index":539,"title":{},"body":{"components/TestComponent.html":{}}}],["this.data",{"_index":372,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["this.editform",{"_index":267,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["this.editform.reset",{"_index":288,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["this.editform.value",{"_index":287,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["this.element",{"_index":415,"title":{},"body":{"components/ModalComponent.html":{}}}],["this.element.addeventlistener('click",{"_index":431,"title":{},"body":{"components/ModalComponent.html":{}}}],["this.element.remove",{"_index":436,"title":{},"body":{"components/ModalComponent.html":{}}}],["this.element.style.display",{"_index":437,"title":{},"body":{"components/ModalComponent.html":{}}}],["this.episode_list",{"_index":259,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["this.episode_loaded",{"_index":264,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["this.episodeid",{"_index":552,"title":{},"body":{"components/TestComponent.html":{}}}],["this.episodes_loaded",{"_index":374,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["this.errormessage",{"_index":150,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.formbuilder.group",{"_index":127,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{}}}],["this.http.delete",{"_index":628,"title":{},"body":{"injectables/WebService.html":{}}}],["this.http.get",{"_index":607,"title":{},"body":{"injectables/WebService.html":{}}}],["this.http.get('http://localhost:5000/api/v1.0/episodes",{"_index":616,"title":{},"body":{"injectables/WebService.html":{}}}],["this.http.get('http://localhost:5000/api/v1.0/login",{"_index":645,"title":{},"body":{"injectables/WebService.html":{}}}],["this.http.get('http://localhost:5000/api/v1.0/logout",{"_index":646,"title":{},"body":{"injectables/WebService.html":{}}}],["this.http.patch",{"_index":626,"title":{},"body":{"injectables/WebService.html":{}}}],["this.http.patch('http://localhost:5000/api/v1.0/ban",{"_index":648,"title":{},"body":{"injectables/WebService.html":{}}}],["this.http.post",{"_index":624,"title":{},"body":{"injectables/WebService.html":{}}}],["this.isinvalid(form",{"_index":296,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["this.isinvalidlogin('password",{"_index":139,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.isinvalidlogin('username",{"_index":138,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.isinvalidregister('email",{"_index":148,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.isinvalidregister('name",{"_index":145,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.isinvalidregister('password",{"_index":147,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.isinvalidregister('username",{"_index":146,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.isopen",{"_index":440,"title":{},"body":{"components/ModalComponent.html":{}}}],["this.isuntouched(form",{"_index":297,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["this.isuntouchedlogin",{"_index":140,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.isuntouchedregister",{"_index":149,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.loginform",{"_index":126,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.loginform.controls.password.pristine",{"_index":137,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.loginform.controls.username.pristine",{"_index":136,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.loginform.controls[control].invalid",{"_index":134,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.loginform.controls[control].touched",{"_index":135,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.loginform.reset",{"_index":165,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.loginform.value",{"_index":164,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.logout",{"_index":284,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["this.modals",{"_index":476,"title":{},"body":{"injectables/ModalService.html":{}}}],["this.modals.filter(x",{"_index":477,"title":{},"body":{"injectables/ModalService.html":{}}}],["this.modals.find(x",{"_index":469,"title":{},"body":{"injectables/ModalService.html":{}}}],["this.modals.push(modal",{"_index":475,"title":{},"body":{"injectables/ModalService.html":{}}}],["this.modalservice.add(this",{"_index":422,"title":{},"body":{"components/ModalComponent.html":{}}}],["this.modalservice.close",{"_index":155,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{}}}],["this.modalservice.remove(this",{"_index":435,"title":{},"body":{"components/ModalComponent.html":{}}}],["this.pagesize",{"_index":614,"title":{},"body":{"injectables/WebService.html":{}}}],["this.processifedited",{"_index":263,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["this.registerform",{"_index":131,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.registerform.controls.password.pristine",{"_index":144,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.registerform.controls.username.pristine",{"_index":143,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.registerform.controls[control].invalid",{"_index":141,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.registerform.controls[control].touched",{"_index":142,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.registerform.reset",{"_index":154,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.registerform.value",{"_index":152,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.registeruser",{"_index":561,"title":{},"body":{"components/TestComponent.html":{}}}],["this.route.snapshot.parammap.get('id",{"_index":256,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["this.router.navigate(['/episodes",{"_index":375,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["this.sort",{"_index":262,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["this.sortby",{"_index":269,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["this.test_output.push",{"_index":540,"title":{},"body":{"components/TestComponent.html":{}}}],["this.testbanuser",{"_index":572,"title":{},"body":{"components/TestComponent.html":{}}}],["this.testdeletetrivia",{"_index":570,"title":{},"body":{"components/TestComponent.html":{}}}],["this.testedittrivia",{"_index":568,"title":{},"body":{"components/TestComponent.html":{}}}],["this.testgetepisodes",{"_index":565,"title":{},"body":{"components/TestComponent.html":{}}}],["this.testgettrivias",{"_index":566,"title":{},"body":{"components/TestComponent.html":{}}}],["this.testlogin",{"_index":564,"title":{},"body":{"components/TestComponent.html":{}}}],["this.testlogout",{"_index":573,"title":{},"body":{"components/TestComponent.html":{}}}],["this.testposttrivia",{"_index":567,"title":{},"body":{"components/TestComponent.html":{}}}],["this.testregister",{"_index":571,"title":{},"body":{"components/TestComponent.html":{}}}],["this.testvotetrivia",{"_index":569,"title":{},"body":{"components/TestComponent.html":{}}}],["this.trivia_list",{"_index":261,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["this.trivia_list.sort((a",{"_index":272,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["this.triviaform",{"_index":265,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["this.triviaform.reset",{"_index":290,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["this.triviaid",{"_index":556,"title":{},"body":{"components/TestComponent.html":{}}}],["this.webservice.ban",{"_index":292,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["this.webservice.ban('slippinjimmy",{"_index":562,"title":{},"body":{"components/TestComponent.html":{}}}],["this.webservice.deletetrivia",{"_index":291,"title":{},"body":{"components/EpisodeComponent.html":{},"components/TestComponent.html":{}}}],["this.webservice.edittrivia",{"_index":286,"title":{},"body":{"components/EpisodeComponent.html":{},"components/TestComponent.html":{}}}],["this.webservice.getepisode",{"_index":255,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["this.webservice.getepisodes",{"_index":543,"title":{},"body":{"components/TestComponent.html":{}}}],["this.webservice.gettrivias",{"_index":260,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["this.webservice.gettrivias(this.episodeid",{"_index":548,"title":{},"body":{"components/TestComponent.html":{}}}],["this.webservice.login",{"_index":163,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/TestComponent.html":{}}}],["this.webservice.logout",{"_index":176,"title":{},"body":{"components/AuthButtonComponent.html":{}}}],["this.webservice.logout(response.token",{"_index":563,"title":{},"body":{"components/TestComponent.html":{}}}],["this.webservice.posttrivia",{"_index":551,"title":{},"body":{"components/TestComponent.html":{}}}],["this.webservice.register",{"_index":151,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/TestComponent.html":{}}}],["this.webservice.votetrivia",{"_index":279,"title":{},"body":{"components/EpisodeComponent.html":{},"components/TestComponent.html":{}}}],["this[form].controls[control].invalid",{"_index":294,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["this[form].controls[control].pristine",{"_index":295,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["throw",{"_index":471,"title":{},"body":{"injectables/ModalService.html":{}}}],["tid",{"_index":219,"title":{},"body":{"components/EpisodeComponent.html":{},"injectables/WebService.html":{}}}],["tid:any",{"_index":278,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["title",{"_index":23,"title":{},"body":{"components/AppComponent.html":{},"components/EpisodesComponent.html":{}}}],["todo",{"_index":534,"title":{},"body":{"components/TestComponent.html":{}}}],["token",{"_index":168,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/TestComponent.html":{},"injectables/WebService.html":{}}}],["token:any",{"_index":617,"title":{},"body":{"injectables/WebService.html":{}}}],["tools",{"_index":716,"title":{},"body":{"index.html":{}}}],["top",{"_index":271,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["track",{"_index":298,"title":{},"body":{"components/EpisodeComponent.html":{},"components/TestComponent.html":{}}}],["tree",{"_index":7,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{}}}],["trivia",{"_index":266,"title":{},"body":{"components/EpisodeComponent.html":{},"components/TestComponent.html":{},"injectables/WebService.html":{}}}],["trivia.editedtrivia",{"_index":625,"title":{},"body":{"injectables/WebService.html":{}}}],["trivia.score",{"_index":307,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["trivia.text",{"_index":305,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["trivia.trivia",{"_index":621,"title":{},"body":{"injectables/WebService.html":{}}}],["trivia.user",{"_index":304,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["trivia_list",{"_index":198,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["triviaform",{"_index":199,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["triviaid",{"_index":498,"title":{},"body":{"components/TestComponent.html":{}}}],["trivias",{"_index":550,"title":{},"body":{"components/TestComponent.html":{},"injectables/WebService.html":{}}}],["true",{"_index":70,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{},"miscellaneous/variables.html":{}}}],["tslib",{"_index":684,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":24,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/TestComponent.html":{},"injectables/WebService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["unique",{"_index":466,"title":{},"body":{"injectables/ModalService.html":{}}}],["unit",{"_index":736,"title":{},"body":{"index.html":{}}}],["up",{"_index":558,"title":{},"body":{"components/TestComponent.html":{}}}],["updateeditformvalue",{"_index":210,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["updateeditformvalue(editedvalue",{"_index":237,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["use",{"_index":741,"title":{},"body":{"index.html":{}}}],["username",{"_index":128,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/TestComponent.html":{},"injectables/WebService.html":{}}}],["using",{"_index":692,"title":{},"body":{"index.html":{}}}],["validators",{"_index":119,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{}}}],["validators.required",{"_index":129,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{}}}],["value",{"_index":28,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{},"injectables/WebService.html":{},"miscellaneous/variables.html":{}}}],["valuegetter",{"_index":361,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["var",{"_index":42,"title":{},"body":{"components/AppComponent.html":{},"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/HomeComponent.html":{},"components/ModalComponent.html":{},"components/NavComponent.html":{},"components/TestComponent.html":{}}}],["variable",{"_index":655,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":770,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":694,"title":{},"body":{"index.html":{},"properties.html":{}}}],["viewencapsulation",{"_index":412,"title":{},"body":{"components/ModalComponent.html":{}}}],["viewencapsulation.none",{"_index":391,"title":{},"body":{"components/ModalComponent.html":{}}}],["visit",{"_index":762,"title":{},"body":{"index.html":{}}}],["void",{"_index":110,"title":{},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/ModalComponent.html":{},"injectables/ModalService.html":{},"components/TestComponent.html":{}}}],["vote",{"_index":211,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["vote(votedirection",{"_index":240,"title":{},"body":{"components/EpisodeComponent.html":{}}}],["vote?vote",{"_index":627,"title":{},"body":{"injectables/WebService.html":{}}}],["votedirection",{"_index":242,"title":{},"body":{"components/EpisodeComponent.html":{},"injectables/WebService.html":{}}}],["votetrivia",{"_index":559,"title":{},"body":{"components/TestComponent.html":{},"injectables/WebService.html":{}}}],["votetrivia(eid",{"_index":602,"title":{},"body":{"injectables/WebService.html":{}}}],["webservice",{"_index":66,"title":{"injectables/WebService.html":{}},"body":{"components/AuthButtonComponent.html":{},"components/EpisodeComponent.html":{},"components/EpisodesComponent.html":{},"components/TestComponent.html":{},"injectables/WebService.html":{},"coverage.html":{}}}],["whenever",{"_index":709,"title":{},"body":{"index.html":{}}}],["width",{"_index":333,"title":{},"body":{"components/EpisodesComponent.html":{}}}],["x",{"_index":478,"title":{},"body":{"injectables/ModalService.html":{},"injectables/WebService.html":{}}}],["x.id",{"_index":470,"title":{},"body":{"injectables/ModalService.html":{}}}],["x.isopen",{"_index":484,"title":{},"body":{"injectables/ModalService.html":{}}}],["zone.js",{"_index":686,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n\n            \n                imports\n                \n                            RouterOutlet\n                                NavComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n            \n                styleUrl\n                ./app.component.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'bcsFanSiteFE'\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { NavComponent } from '../nav/nav.component'\n\n@Component({\n  selector: 'app-root',\n  imports: [RouterOutlet, NavComponent],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.css'\n})\nexport class AppComponent {\n  title = 'bcsFanSiteFE';\n}\n\n    \n\n    \n        \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthButtonComponent', 'selector': 'auth-button'},{'name': 'EpisodeComponent', 'selector': 'episode'},{'name': 'EpisodesComponent', 'selector': 'episodes'},{'name': 'HomeComponent', 'selector': 'home'},{'name': 'ModalComponent', 'selector': 'modal'},{'name': 'NavComponent', 'selector': 'navigation'},{'name': 'TestComponent', 'selector': 'test'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AuthButtonComponent.html":{"url":"components/AuthButtonComponent.html","title":"component - AuthButtonComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AuthButtonComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/authButton/authButton.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                                WebService\n                                ModalService\n                \n            \n\n\n            \n                selector\n                auth-button\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            ReactiveFormsModule\n                            CommonModule\n                                ModalComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                authButton.component.html\n            \n\n\n\n            \n                styleUrl\n                authButton.component.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                errorMessage\n                            \n                            \n                                loginForm\n                            \n                            \n                                    Public\n                                modalService\n                            \n                            \n                                registerForm\n                            \n                            \n                                    Protected\n                                    Readonly\n                                sessionStorage\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isIncompleteLogin\n                            \n                            \n                                isIncompleteRegister\n                            \n                            \n                                isInvalidLogin\n                            \n                            \n                                isInvalidRegister\n                            \n                            \n                                isUntouchedLogin\n                            \n                            \n                                isUntouchedRegister\n                            \n                            \n                                login\n                            \n                            \n                                logout\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(webService: WebService, modalService: ModalService, formBuilder: FormBuilder)\n                    \n                \n                        \n                            \n                                Defined in src/authButton/authButton.component.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        webService\n                                                  \n                                                        \n                                                                        WebService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        modalService\n                                                  \n                                                        \n                                                                        ModalService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        formBuilder\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isIncompleteLogin\n                        \n                    \n                \n            \n            \n                \nisIncompleteLogin()\n                \n            \n\n\n                    \n                        \n                            Defined in src/authButton/authButton.component.ts:46\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isIncompleteRegister\n                        \n                    \n                \n            \n            \n                \nisIncompleteRegister()\n                \n            \n\n\n                    \n                        \n                            Defined in src/authButton/authButton.component.ts:60\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isInvalidLogin\n                        \n                    \n                \n            \n            \n                \nisInvalidLogin(control: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/authButton/authButton.component.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                control\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isInvalidRegister\n                        \n                    \n                \n            \n            \n                \nisInvalidRegister(control: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/authButton/authButton.component.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                control\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isUntouchedLogin\n                        \n                    \n                \n            \n            \n                \nisUntouchedLogin()\n                \n            \n\n\n                    \n                        \n                            Defined in src/authButton/authButton.component.ts:42\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isUntouchedRegister\n                        \n                    \n                \n            \n            \n                \nisUntouchedRegister()\n                \n            \n\n\n                    \n                        \n                            Defined in src/authButton/authButton.component.ts:56\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin()\n                \n            \n\n\n                    \n                        \n                            Defined in src/authButton/authButton.component.ts:82\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logout\n                        \n                    \n                \n            \n            \n                \nlogout()\n                \n            \n\n\n                    \n                        \n                            Defined in src/authButton/authButton.component.ts:99\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/authButton/authButton.component.ts:25\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister()\n                \n            \n\n\n                    \n                        \n                            Defined in src/authButton/authButton.component.ts:68\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        errorMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/authButton/authButton.component.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loginForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/authButton/authButton.component.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        modalService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ModalService\n\n                    \n                \n                    \n                        \n                                Defined in src/authButton/authButton.component.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/authButton/authButton.component.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        sessionStorage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : sessionStorage\n                    \n                \n                    \n                        \n                                Defined in src/authButton/authButton.component.ts:116\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport {WebService} from '../app/web.service';\nimport {FormBuilder, ReactiveFormsModule, Validators} from '@angular/forms';\nimport {ModalService} from '../modal/modal.service';\nimport {CommonModule} from '@angular/common';\nimport {ModalComponent} from '../modal/modal.component';\n\n@Component({\n  selector: 'auth-button',\n  templateUrl: 'authButton.component.html',\n  styleUrl: 'authButton.component.css',\n  imports: [ReactiveFormsModule, CommonModule, ModalComponent],\n  providers: [WebService, ModalService],\n  standalone: true\n})\nexport class AuthButtonComponent {\n  loginForm: any;\n  registerForm: any;\n  errorMessage: any;\n\n  constructor(private webService: WebService,\n              public modalService: ModalService,\n              private formBuilder: FormBuilder) {}\n\n  ngOnInit() {\n    this.loginForm = this.formBuilder.group( {\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n    })\n    this.registerForm = this.formBuilder.group( {\n      name: ['', Validators.required],\n      username: ['', Validators.required],\n      password: ['', Validators.required],\n      email: ['', Validators.required]\n    })\n  }\n\n  isInvalidLogin(control: any) {\n    return this.loginForm.controls[control].invalid &&\n      this.loginForm.controls[control].touched;\n  }\n  isUntouchedLogin() {\n    return this.loginForm.controls.username.pristine ||\n      this.loginForm.controls.password.pristine\n  }\n  isIncompleteLogin() {\n    return this.isInvalidLogin('username') ||\n      this.isInvalidLogin('password') ||\n      this.isUntouchedLogin();\n  }\n\n  isInvalidRegister(control: any) {\n    return this.registerForm.controls[control].invalid &&\n      this.registerForm.controls[control].touched;\n  }\n  isUntouchedRegister() {\n    return this.registerForm.controls.username.pristine ||\n      this.registerForm.controls.password.pristine\n  }\n  isIncompleteRegister() {\n    return this.isInvalidRegister('name') ||\n      this.isInvalidRegister('username') ||\n      this.isInvalidRegister('password') ||\n      this.isInvalidRegister('email') ||\n      this.isUntouchedRegister();\n  }\n\n  register() {\n    this.errorMessage = ''\n    this.webService.register(\n      this.registerForm.value)\n      .subscribe(response => {\n      this.registerForm.reset();\n      this.modalService.close();\n      alert('User successfully created, you may login')\n    }, error => {\n      this.errorMessage = error.error.error\n      setTimeout(() => this.errorMessage = '', 3000)\n    })\n  }\n\n  login() {\n    this.errorMessage = ''\n    this.webService.login(\n      this.loginForm.value)\n      .subscribe(response => {\n        this.loginForm.reset();\n        this.modalService.close()\n        sessionStorage['x-access-token'] = response['token']\n        sessionStorage['loggedInUsername'] = response['user']['username']\n        sessionStorage['loggedInName'] = response['user']['name']\n        sessionStorage['admin'] = response['user']['admin']\n        }, error => {\n        this.errorMessage = error.error.error\n        setTimeout(() => this.errorMessage = '', 3000)\n      });\n  }\n\n  logout() {\n    this.webService.logout(\n      sessionStorage['x-access-token'])\n      .subscribe(response => {\n          sessionStorage.removeItem('x-access-token')\n          sessionStorage.removeItem('loggedInUsername')\n          sessionStorage.removeItem('loggedInName')\n          sessionStorage.removeItem('admin')\n        },\n        error => {\n          console.log('token expired')\n          sessionStorage.removeItem('x-access-token')\n          sessionStorage.removeItem('loggedInUsername')\n          sessionStorage.removeItem('loggedInName')\n          sessionStorage.removeItem('admin')\n        });\n  }\n  protected readonly sessionStorage = sessionStorage;\n}\n\n    \n\n    \n        \n  \n    \n      Log in\n    \n  \n  \n    Register\n  \n\n\n\n  \n    Log out\n  \n\n\n\n  \n    \n      \n        \n          Login\n        \n        \n          \n            \n              Username\n            \n          \n          \n            \n              Password\n            \n          \n          \n          ! You must complete all fields\n          \n          Submit\n          \n            Error! {{errorMessage}}\n          \n        \n      \n    \n  \n\n\n\n  \n    \n      \n        \n          Register\n        \n        \n          \n            \n              Name\n            \n          \n          \n            \n              Username\n            \n          \n          \n            \n              Email\n            \n          \n          \n            \n              Password\n            \n          \n          \n          ! You must complete all fields\n          \n          Submit\n          \n            Error! {{errorMessage}}\n          \n        \n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Log in            Register        Log out                                Login                                                    Username                                                          Password                                          ! You must complete all fields                    Submit                      Error! {{errorMessage}}                                                            Register                                                    Name                                                          Username                                                          Email                                                          Password                                          ! You must complete all fields                    Submit                      Error! {{errorMessage}}                              '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthButtonComponent', 'selector': 'auth-button'},{'name': 'EpisodeComponent', 'selector': 'episode'},{'name': 'EpisodesComponent', 'selector': 'episodes'},{'name': 'HomeComponent', 'selector': 'home'},{'name': 'ModalComponent', 'selector': 'modal'},{'name': 'NavComponent', 'selector': 'navigation'},{'name': 'TestComponent', 'selector': 'test'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AuthButtonComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/EpisodeComponent.html":{"url":"components/EpisodeComponent.html","title":"component - EpisodeComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  EpisodeComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/episode/episode.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                                WebService\n                                ModalService\n                \n            \n\n\n            \n                selector\n                episode\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            ReactiveFormsModule\n                                ModalComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./episode.component.html\n            \n\n\n\n            \n                styleUrl\n                ./episode.component.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Readonly\n                                alert\n                            \n                            \n                                editForm\n                            \n                            \n                                episode_list\n                            \n                            \n                                episode_loaded\n                            \n                            \n                                    Protected\n                                    Readonly\n                                Math\n                            \n                            \n                                    Public\n                                modalService\n                            \n                            \n                                    Protected\n                                    Readonly\n                                sessionStorage\n                            \n                            \n                                sortBy\n                            \n                            \n                                trivia_list\n                            \n                            \n                                triviaForm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ban\n                            \n                            \n                                delete\n                            \n                            \n                                edit\n                            \n                            \n                                isIncomplete\n                            \n                            \n                                isInvalid\n                            \n                            \n                                isUntouched\n                            \n                            \n                                logout\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onSortSelection\n                            \n                            \n                                onSubmit\n                            \n                            \n                                processIfEdited\n                            \n                            \n                                sort\n                            \n                            \n                                updateEditFormValue\n                            \n                            \n                                vote\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(webService: WebService, modalService: ModalService, route: ActivatedRoute, formBuilder: FormBuilder)\n                    \n                \n                        \n                            \n                                Defined in src/episode/episode.component.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        webService\n                                                  \n                                                        \n                                                                        WebService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        modalService\n                                                  \n                                                        \n                                                                        ModalService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        route\n                                                  \n                                                        \n                                                                    ActivatedRoute\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        formBuilder\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ban\n                        \n                    \n                \n            \n            \n                \nban(username: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/episode/episode.component.ts:164\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(tId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/episode/episode.component.ts:146\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        edit\n                        \n                    \n                \n            \n            \n                \nedit(tId: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/episode/episode.component.ts:95\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tId\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isIncomplete\n                        \n                    \n                \n            \n            \n                \nisIncomplete(form, control: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/episode/episode.component.ts:187\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                form\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                control\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isInvalid\n                        \n                    \n                \n            \n            \n                \nisInvalid(form, control: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/episode/episode.component.ts:181\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                form\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                control\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isUntouched\n                        \n                    \n                \n            \n            \n                \nisUntouched(form, control: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/episode/episode.component.ts:184\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                form\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                control\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logout\n                        \n                    \n                \n            \n            \n                \nlogout()\n                \n            \n\n\n                    \n                        \n                            Defined in src/episode/episode.component.ts:68\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/episode/episode.component.ts:32\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSortSelection\n                        \n                    \n                \n            \n            \n                \nonSortSelection(event: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/episode/episode.component.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSubmit\n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/episode/episode.component.ts:125\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        processIfEdited\n                        \n                    \n                \n            \n            \n                \nprocessIfEdited()\n                \n            \n\n\n                    \n                        \n                            Defined in src/episode/episode.component.ts:117\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sort\n                        \n                    \n                \n            \n            \n                \nsort()\n                \n            \n\n\n                    \n                        \n                            Defined in src/episode/episode.component.ts:63\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateEditFormValue\n                        \n                    \n                \n            \n            \n                \nupdateEditFormValue(editedValue: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/episode/episode.component.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                editedValue\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        vote\n                        \n                    \n                \n            \n            \n                \nvote(voteDirection: string, tId: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/episode/episode.component.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                voteDirection\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tId\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        alert\n                        \n                    \n                \n            \n                \n                    \n                        Default value : alert\n                    \n                \n                    \n                        \n                                Defined in src/episode/episode.component.ts:194\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        editForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/episode/episode.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        episode_list\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/episode/episode.component.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        episode_loaded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/episode/episode.component.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        Math\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Math\n                    \n                \n                    \n                        \n                                Defined in src/episode/episode.component.ts:192\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        modalService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ModalService\n\n                    \n                \n                    \n                        \n                                Defined in src/episode/episode.component.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        sessionStorage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : sessionStorage\n                    \n                \n                    \n                        \n                                Defined in src/episode/episode.component.ts:193\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sortBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'new'\n                    \n                \n                    \n                        \n                                Defined in src/episode/episode.component.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        trivia_list\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/episode/episode.component.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        triviaForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/episode/episode.component.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { WebService } from '../app/web.service';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport {ModalService} from '../modal/modal.service';\nimport {ModalComponent} from '../modal/modal.component';\n\n@Component({\n  selector: 'episode',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule, ModalComponent],\n  providers: [WebService, ModalService],\n  templateUrl: './episode.component.html',\n  styleUrl: './episode.component.css'\n})\n\nexport class EpisodeComponent {\n  episode_list: any;\n  trivia_list: any;\n  triviaForm: any;\n  editForm: any;\n  episode_loaded: boolean = false;\n  sortBy: string = 'new'\n\n  constructor( private webService: WebService,\n               public modalService: ModalService,\n               private route: ActivatedRoute,\n               private formBuilder: FormBuilder) {}\n\n  ngOnInit() {\n    this.webService.getEpisode(\n      this.route.snapshot.paramMap.get('id'))\n      .subscribe( (response: any) => {\n        this.episode_list = [response];\n        this.webService.getTrivias(\n          this.route.snapshot.paramMap.get('id'))\n          .subscribe( (response) => {\n            this.trivia_list = response;\n            this.sort()\n            this.processIfEdited()\n            this.episode_loaded = true;\n          });\n      })\n\n    this.triviaForm = this.formBuilder.group( {\n      trivia: ['', Validators.required] })\n    this.editForm = this.formBuilder.group({\n      editedTrivia: ['', Validators.required] })\n  }\n\n  updateEditFormValue(editedValue: any) {\n    this.editForm = this.formBuilder.group({\n      editedTrivia: [editedValue, Validators.required]  })\n  }\n\n  onSortSelection (event: any ) {\n    this.sortBy = event.target.value;\n    this.sort();\n  }\n\n  sort() {\n    this.sortBy == 'top'? this.trivia_list.sort((a: any, b: any) => b.score - a.score) :\n      this.trivia_list.sort((a: any, b: any) => Date.parse(b.createdDtm) - Date.parse(a.createdDtm))\n  }\n\n  logout(){\n    sessionStorage.removeItem('x-access-token')\n    sessionStorage.removeItem('loggedInUsername')\n    sessionStorage.removeItem('loggedInName')\n    sessionStorage.removeItem('admin')\n  }\n\n  vote(voteDirection: string, tId:any){\n    this.webService.voteTrivia(\n      this.route.snapshot.paramMap.get('id'),\n      tId,\n      voteDirection,\n      sessionStorage['x-access-token']\n    ).subscribe((response) => {\n      this.webService.getTrivias(\n        this.route.snapshot.paramMap.get('id'))\n        .subscribe( (response) => {\n          this.trivia_list = response;\n          this.sort()\n          this.processIfEdited()  });\n    },\n      error => {\n      alert('Session Expired, please log in again')\n        this.logout();\n        this.modalService.close();  })\n  }\n\n  edit(tId:any) {\n    this.webService.editTrivia(\n      this.route.snapshot.paramMap.get('id'),\n      tId,\n      this.editForm.value,\n      sessionStorage['x-access-token']\n    ).subscribe((response) => {\n      this.editForm.reset();\n      this.modalService.close();\n      this.webService.getTrivias(\n        this.route.snapshot.paramMap.get('id'))\n        .subscribe( (response) => {\n          this.trivia_list = response;\n          this.sort()\n          this.processIfEdited()  });\n    },\n      error => {\n        alert('Session Expired, please log in again')\n        this.logout()\n        this.modalService.close() })\n  }\n\n  processIfEdited() {\n    for (var trivia= 0; trivia  {\n        this.triviaForm.reset();\n        this.modalService.close();\n        this.webService.getTrivias(\n        this.route.snapshot.paramMap.get('id'))\n        .subscribe( (response) => {\n          this.trivia_list = response;\n          this.sort()\n          this.processIfEdited()  });\n      },\n        error => {\n          alert('Session Expired, please log in again')\n          this.logout()\n          this.modalService.close();  });\n  }\n\n  delete(tId: string){\n    this.webService.deleteTrivia(\n      this.route.snapshot.paramMap.get('id'),\n      tId,\n      sessionStorage['x-access-token'])\n      .subscribe( (response) => {\n          this.webService.getTrivias(\n            this.route.snapshot.paramMap.get('id'))\n            .subscribe( (response) => {\n              this.trivia_list = response;\n              this.sort()\n              this.processIfEdited()  });\n        },\n        error => {\n          alert('Session Expired, please log in again')\n          this.logout() });\n  }\n\n  ban(username: string) {\n    this.webService.ban(\n      username,\n      sessionStorage['x-access-token']\n    ).subscribe((response) => {\n      this.webService.getTrivias(\n        this.route.snapshot.paramMap.get('id'))\n        .subscribe( (response) => {\n          this.trivia_list = response;\n          this.sort()\n          this.processIfEdited()  })\n    },\n      error => {\n        alert('Session Expired, please log in again')\n        this.logout() })\n  }\n\n  isInvalid(form: keyof EpisodeComponent, control: string) {\n    return this[form].controls[control].invalid\n  }\n  isUntouched(form: keyof EpisodeComponent, control: string) {\n    return this[form].controls[control].pristine\n  }\n  isIncomplete(form: keyof EpisodeComponent, control: string) {\n    return this.isInvalid(form, control) ||\n      this.isUntouched(form, control);\n  }\n\n  protected readonly Math = Math;\n  protected readonly sessionStorage = sessionStorage;\n  protected readonly alert = alert;\n}\n\n    \n\n    \n        \n\n  \n  @for ( episode of episode_list; track episode.title ) {\n    \n      \n        \n          {{ episode.title }}\n        \n        \n          \n        \n      \n      \n        \n          Season:\n          {{ episode.seasonNumber}} \n          Episode Number:\n          {{ episode.episodeNumber }}\n        \n      \n    \n\n    \n      \n        Submit Trivia\n      \n    \n\n    \n      \n        Sort by\n      \n      \n        New\n        Top\n      \n    \n\n    \n      \n        @for ( trivia of trivia_list; track trivia ) {\n          \n\n            \n              \n              \n                🛇\n              \n              {{ trivia.user }}\n              \n              \n              \n                \n                  Edit\n                \n              \n              \n                \n                  Delete\n                \n              \n              \n                \n                  Ban\n                \n              \n              \n            \n\n            \n              {{ trivia.text }}\n            \n\n            \n              \n                \n                  \n                    edited\n                  \n                \n                \n\n                  \n                  \n                    \n                     {{ trivia.score }} \n                    \n                  \n\n                  \n                  \n                    \n                     {{ trivia.score }} \n                    \n                  \n\n                  \n                  \n                    \n                     {{ trivia.score }} \n                    \n                  \n\n                  \n                  \n                    \n                    {{ trivia.score }}\n                    \n                  \n                \n              \n            \n          \n\n          \n            \n              \n                \n                  \n                    Edit Trivia\n                  \n                  \n                    \n                      >\n                      \n                    \n                    \n                      ! You must complete all fields\n                    \n                    Submit\n                  \n                \n              \n            \n          \n        }\n      \n    \n  }\n  \n\n  \n  \n    \n  \n\n  \n    \n      \n        \n          \n            Submit Trivia\n          \n          \n            \n              >\n              \n            \n            \n              ! You must complete all fields\n            \n            Submit\n          \n        \n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    @for ( episode of episode_list; track episode.title ) {                            {{ episode.title }}                                                                Season:          {{ episode.seasonNumber}}           Episode Number:          {{ episode.episodeNumber }}                                    Submit Trivia                            Sort by                    New        Top                            @for ( trivia of trivia_list; track trivia ) {                                                                  🛇                            {{ trivia.user }}                                                                            Edit                                                                              Delete                                                                              Ban                                                                                  {{ trivia.text }}                                                                                            edited                                                                                                                               {{ trivia.score }}                                                                                                                    {{ trivia.score }}                                                                                                                    {{ trivia.score }}                                                                                                                   {{ trivia.score }}                                                                                                                                                                                    Edit Trivia                                                                              >                                                                                    ! You must complete all fields                                        Submit                                                                              }            }                                                      Submit Trivia                                              >                                                    ! You must complete all fields                        Submit                              '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthButtonComponent', 'selector': 'auth-button'},{'name': 'EpisodeComponent', 'selector': 'episode'},{'name': 'EpisodesComponent', 'selector': 'episodes'},{'name': 'HomeComponent', 'selector': 'home'},{'name': 'ModalComponent', 'selector': 'modal'},{'name': 'NavComponent', 'selector': 'navigation'},{'name': 'TestComponent', 'selector': 'test'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'EpisodeComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/EpisodesComponent.html":{"url":"components/EpisodesComponent.html","title":"component - EpisodesComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  EpisodesComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/episodes/episodes.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                                WebService\n                \n            \n\n\n            \n                selector\n                episodes\n            \n\n\n            \n                imports\n                \n                            RouterModule\n                            CommonModule\n                            AgGridAngular\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./episodes.component.html\n            \n\n\n\n            \n                styleUrl\n                ./episodes.component.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                episodes_loaded\n                            \n                            \n                                gridOptions\n                            \n                            \n                                headings\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                onRowClicked\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(webService: WebService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/episodes/episodes.component.ts:45\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        webService\n                                                  \n                                                        \n                                                                        WebService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/episodes/episodes.component.ts:49\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onRowClicked\n                        \n                    \n                \n            \n            \n                \nonRowClicked(event: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/episodes/episodes.component.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/episodes/episodes.component.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        episodes_loaded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/episodes/episodes.component.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gridOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     GridOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n    rowStyle: {cursor: 'pointer', backgroundColor: 'rgba(0,0,0,0.5)'},\n    autoSizeStrategy: {type: 'fitProvidedWidth', width: 700},\n    getRowStyle: (params: any) => {\n      const pageSize = 17;\n      const pageIndex = params.api.paginationGetCurrentPage();\n      const rowIndexOnPage = params.rowIndex - pageIndex * pageSize;\n      // Find last 6 rows on current page, select odd\n      if (rowIndexOnPage >= pageSize - 6 && rowIndexOnPage \n                    \n                \n                    \n                        \n                                Defined in src/episodes/episodes.component.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        headings\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ColDef[]\n\n                    \n                \n                \n                    \n                        Default value : [\n    { field: 'title',\n          filter: true,\n          floatingFilter: true,\n          sortable: false,\n          },\n    { field: 'imdbRating',\n          headerName: 'Rating' },\n    { headerName: 'Episode',\n          valueGetter: p => 'S' + p.data.seasonNumber + 'E' + p.data.episodeNumber,\n          sortable: false }\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/episodes/episodes.component.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { Router, RouterModule} from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { WebService } from '../app/web.service';\nimport {AgGridAngular} from 'ag-grid-angular';\nimport { ColDef, GridOptions } from 'ag-grid-community';\n\n@Component({\n  selector: 'episodes',\n  imports: [RouterModule, CommonModule, AgGridAngular],\n  providers: [WebService],\n  templateUrl: './episodes.component.html',\n  styleUrl: './episodes.component.css'\n})\n\nexport class EpisodesComponent {\n  data: any;\n  episodes_loaded: boolean = false;\n\n  headings: ColDef[] = [\n    { field: 'title',\n          filter: true,\n          floatingFilter: true,\n          sortable: false,\n          },\n    { field: 'imdbRating',\n          headerName: 'Rating' },\n    { headerName: 'Episode',\n          valueGetter: p => 'S' + p.data.seasonNumber + 'E' + p.data.episodeNumber,\n          sortable: false }\n  ]\n\n  gridOptions: GridOptions = {\n    rowStyle: {cursor: 'pointer', backgroundColor: 'rgba(0,0,0,0.5)'},\n    autoSizeStrategy: {type: 'fitProvidedWidth', width: 700},\n    getRowStyle: (params: any) => {\n      const pageSize = 17;\n      const pageIndex = params.api.paginationGetCurrentPage();\n      const rowIndexOnPage = params.rowIndex - pageIndex * pageSize;\n      // Find last 6 rows on current page, select odd\n      if (rowIndexOnPage >= pageSize - 6 && rowIndexOnPage  {\n        this.data = response['data']\n        this.episodes_loaded = true;  })\n  }\n\n  onRowClicked(event: any) {\n    this.router.navigate(['/episodes/' + event.data._id])\n  }\n}\n\n    \n\n    \n        \n\n  \n    \n  \n  \n  \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthButtonComponent', 'selector': 'auth-button'},{'name': 'EpisodeComponent', 'selector': 'episode'},{'name': 'EpisodesComponent', 'selector': 'episodes'},{'name': 'HomeComponent', 'selector': 'home'},{'name': 'ModalComponent', 'selector': 'modal'},{'name': 'NavComponent', 'selector': 'navigation'},{'name': 'TestComponent', 'selector': 'test'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'EpisodesComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/HomeComponent.html":{"url":"components/HomeComponent.html","title":"component - HomeComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  HomeComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/home/home.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                home\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./home.component.html\n            \n\n\n\n            \n                styleUrl\n                ./home.component.css\n            \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport {RouterModule} from '@angular/router';\n\n@Component({\n    selector: 'home',\n    standalone: true,\n    templateUrl: './home.component.html',\n    imports: [RouterModule],\n    styleUrl: './home.component.css'\n})\nexport class HomeComponent { }\n\n    \n\n    \n        \n  \n    \n    \n      \n    \n    \n    \n      \n      \n        &nbsp;&nbsp;Click to enter site\n      \n    \n    \n    \n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                  Click to enter site                              '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthButtonComponent', 'selector': 'auth-button'},{'name': 'EpisodeComponent', 'selector': 'episode'},{'name': 'EpisodesComponent', 'selector': 'episodes'},{'name': 'HomeComponent', 'selector': 'home'},{'name': 'ModalComponent', 'selector': 'modal'},{'name': 'NavComponent', 'selector': 'navigation'},{'name': 'TestComponent', 'selector': 'test'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'HomeComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ModalComponent.html":{"url":"components/ModalComponent.html","title":"component - ModalComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ModalComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/modal/modal.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n            \n                encapsulation\n                ViewEncapsulation.None\n            \n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                modal\n            \n\n\n\n            \n                styleUrls\n                modal.component.css\n            \n\n\n\n            \n                templateUrl\n                modal.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                element\n                            \n                            \n                                isOpen\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                close\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                open\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(modalService: ModalService, el: ElementRef)\n                    \n                \n                        \n                            \n                                Defined in src/modal/modal.component.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        modalService\n                                                  \n                                                        \n                                                                        ModalService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        el\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        id\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/modal/modal.component.ts:11\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        close\n                        \n                    \n                \n            \n            \n                \nclose()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modal/modal.component.ts:48\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modal/modal.component.ts:34\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modal/modal.component.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        open\n                        \n                    \n                \n            \n            \n                \nopen()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modal/modal.component.ts:42\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        element\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/modal/modal.component.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isOpen\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/modal/modal.component.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, ViewEncapsulation, ElementRef, Input, OnInit, OnDestroy } from '@angular/core';\nimport { ModalService } from './modal.service';\n\n@Component({\n  selector: 'modal',\n  templateUrl: 'modal.component.html',\n  styleUrls: ['modal.component.css'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class ModalComponent implements OnInit, OnDestroy {\n  @Input() id?: string;\n  isOpen = false;\n  private element: any;\n\n  constructor(private modalService: ModalService, private el: ElementRef) {\n    this.element = el.nativeElement;\n  }\n\n  ngOnInit() {\n    // add self (this modal instance) to the modal service so it can be opened from any component\n    this.modalService.add(this);\n\n    // move element to bottom of page (just before ) so it can be displayed above everything else\n    document.body.appendChild(this.element);\n\n    // close modal on background click\n    this.element.addEventListener('click', (el: any) => {\n      if (el.target.className === 'modal') {\n        this.close();\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    // remove self from modal service\n    this.modalService.remove(this);\n\n    // remove modal element from html\n    this.element.remove();\n  }\n\n  open() {\n    this.element.style.display = 'block';\n    document.body.classList.add('modal-open');\n    this.isOpen = true;\n  }\n\n  close() {\n    this.element.style.display = 'none';\n    document.body.classList.remove('modal-open');\n    this.isOpen = false;\n  }\n}\n\n    \n\n    \n        \n  \n    \n      \n    \n  \n\n\n\n    \n\n    \n                \n                    modal.component.css\n                \n                modal {\n  display: none;\n}\nbody.modal-open {\n  overflow: hidden;\n}\n.modal-backdrop {\n  opacity: 0.7 !important;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthButtonComponent', 'selector': 'auth-button'},{'name': 'EpisodeComponent', 'selector': 'episode'},{'name': 'EpisodesComponent', 'selector': 'episodes'},{'name': 'HomeComponent', 'selector': 'home'},{'name': 'ModalComponent', 'selector': 'modal'},{'name': 'NavComponent', 'selector': 'navigation'},{'name': 'TestComponent', 'selector': 'test'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ModalComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ModalService.html":{"url":"injectables/ModalService.html","title":"injectable - ModalService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ModalService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modal/modal.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                modals\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                close\n                            \n                            \n                                open\n                            \n                            \n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(modal: ModalComponent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modal/modal.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                modal\n                                            \n                                                            ModalComponent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        close\n                        \n                    \n                \n            \n            \n                \nclose()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modal/modal.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        open\n                        \n                    \n                \n            \n            \n                \nopen(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modal/modal.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(modal: ModalComponent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modal/modal.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                modal\n                                            \n                                                            ModalComponent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        modals\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ModalComponent[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/modal/modal.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nimport { ModalComponent } from './modal.component';\n\n@Injectable({ providedIn: 'root' })\nexport class ModalService {\n  private modals: ModalComponent[] = [];\n\n  add(modal: ModalComponent) {\n    // ensure component has a unique id attribute\n    if (!modal.id || this.modals.find(x => x.id === modal.id)) {\n      throw new Error('modal must have a unique id attribute');\n    }\n\n    // add modal to array of active modals\n    this.modals.push(modal);\n  }\n\n  remove(modal: ModalComponent) {\n    // remove modal from array of active modals\n    this.modals = this.modals.filter(x => x !== modal);\n  }\n\n  open(id: string) {\n    // open modal specified by id\n    const modal = this.modals.find(x => x.id === id);\n\n    if (!modal) {\n      throw new Error(`modal '${id}' not found`);\n    }\n\n    modal.open();\n  }\n\n  close() {\n    // close the modal that is currently open\n    const modal = this.modals.find(x => x.isOpen);\n    modal?.close();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NavComponent.html":{"url":"components/NavComponent.html","title":"component - NavComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NavComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/nav/nav.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                navigation\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterModule\n                                AuthButtonComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./nav.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Readonly\n                                sessionStorage\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        sessionStorage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : sessionStorage\n                    \n                \n                    \n                        \n                                Defined in src/nav/nav.component.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {AuthButtonComponent} from '../authButton/authButton.component';\n\n@Component({\n  selector: 'navigation',\n  standalone: true,\n  imports: [RouterModule, AuthButtonComponent],\n  templateUrl: './nav.component.html'\n})\nexport class NavComponent {\n  protected readonly sessionStorage = sessionStorage;\n}\n\n    \n\n    \n        \n  \n    \n  \n  \n    \n      Home\n    \n    \n      Episodes\n    \n  \n  \n    {{sessionStorage['loggedInName']}}\n    \n  \n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    Home              Episodes            {{sessionStorage[\\'loggedInName\\']}}      '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthButtonComponent', 'selector': 'auth-button'},{'name': 'EpisodeComponent', 'selector': 'episode'},{'name': 'EpisodesComponent', 'selector': 'episodes'},{'name': 'HomeComponent', 'selector': 'home'},{'name': 'ModalComponent', 'selector': 'modal'},{'name': 'NavComponent', 'selector': 'navigation'},{'name': 'TestComponent', 'selector': 'test'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NavComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TestComponent.html":{"url":"components/TestComponent.html","title":"component - TestComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TestComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/test/test.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                                WebService\n                \n            \n\n\n            \n                selector\n                test\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n\n            \n                templateUrl\n                ./test.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                creds\n                            \n                            \n                                episodeId\n                            \n                            \n                                registerUser\n                            \n                            \n                                test_output\n                            \n                            \n                                token\n                            \n                            \n                                triviaId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                    Private\n                                testBanUser\n                            \n                            \n                                    Private\n                                testDeleteTrivia\n                            \n                            \n                                    Private\n                                testEditTrivia\n                            \n                            \n                                    Private\n                                testGetEpisodes\n                            \n                            \n                                    Private\n                                testGetTrivias\n                            \n                            \n                                    Private\n                                testLogin\n                            \n                            \n                                    Private\n                                testLogout\n                            \n                            \n                                    Private\n                                testPostTrivia\n                            \n                            \n                                    Private\n                                testRegister\n                            \n                            \n                                    Private\n                                testVoteTrivia\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(webService: WebService)\n                    \n                \n                        \n                            \n                                Defined in src/test/test.component.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        webService\n                                                  \n                                                        \n                                                                        WebService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/test/test.component.ts:216\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        testBanUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    testBanUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/test/test.component.ts:176\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        testDeleteTrivia\n                        \n                    \n                \n            \n            \n                \n                        \n                    testDeleteTrivia()\n                \n            \n\n\n                    \n                        \n                            Defined in src/test/test.component.ts:138\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        testEditTrivia\n                        \n                    \n                \n            \n            \n                \n                        \n                    testEditTrivia()\n                \n            \n\n\n                    \n                        \n                            Defined in src/test/test.component.ts:88\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        testGetEpisodes\n                        \n                    \n                \n            \n            \n                \n                        \n                    testGetEpisodes()\n                \n            \n\n\n                    \n                        \n                            Defined in src/test/test.component.ts:33\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        testGetTrivias\n                        \n                    \n                \n            \n            \n                \n                        \n                    testGetTrivias()\n                \n            \n\n\n                    \n                        \n                            Defined in src/test/test.component.ts:49\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        testLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    testLogin()\n                \n            \n\n\n                    \n                        \n                            Defined in src/test/test.component.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        testLogout\n                        \n                    \n                \n            \n            \n                \n                        \n                    testLogout()\n                \n            \n\n\n                    \n                        \n                            Defined in src/test/test.component.ts:196\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        testPostTrivia\n                        \n                    \n                \n            \n            \n                \n                        \n                    testPostTrivia()\n                \n            \n\n\n                    \n                        \n                            Defined in src/test/test.component.ts:64\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        testRegister\n                        \n                    \n                \n            \n            \n                \n                        \n                    testRegister()\n                \n            \n\n\n                    \n                        \n                            Defined in src/test/test.component.ts:162\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        testVoteTrivia\n                        \n                    \n                \n            \n            \n                \n                        \n                    testVoteTrivia()\n                \n            \n\n\n                    \n                        \n                            Defined in src/test/test.component.ts:113\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        creds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : { username: 'TheRealHowardHamlin', password: 'hamlindigo'}\n                    \n                \n                    \n                        \n                                Defined in src/test/test.component.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        episodeId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '671158ec61e58bf0aa084615'\n                    \n                \n                    \n                        \n                                Defined in src/test/test.component.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : { name: 'TestUser', username: 'TestUser', email: 'test@email.com', password: 'testPass'}\n                    \n                \n                    \n                        \n                                Defined in src/test/test.component.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        test_output\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/test/test.component.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/test/test.component.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        triviaId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '6751cf1ab316ca28510ca2f1'\n                    \n                \n                    \n                        \n                                Defined in src/test/test.component.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport {WebService} from '../app/web.service';\n@Component({\n  selector: 'test',\n  standalone: true,\n  providers: [WebService],\n  templateUrl: './test.component.html'\n})\nexport class TestComponent {\n  test_output: string[] = [];\n  token: any;\n\n  creds = { username: 'TheRealHowardHamlin', password: 'hamlindigo'}\n  registerUser = { name: 'TestUser', username: 'TestUser', email: 'test@email.com', password: 'testPass'}\n  episodeId = '671158ec61e58bf0aa084615'\n  triviaId = '6751cf1ab316ca28510ca2f1' //TODO: replace with existing for each run\n\n  constructor(private webService: WebService) {}\n\n  private testLogin() {\n    this.webService.login(\n      this.creds\n    ).subscribe((response) => {\n      this.test_output.push(\n        'Login... PASS')\n    }, error => {\n      this.test_output.push(\n        'Login... FAIL'\n      )\n    })\n  }\n\n  private testGetEpisodes() {\n    this.webService.getEpisodes()\n      .subscribe( (response) => {\n        let data = response['data'];\n        if (Array.isArray(data) && data.length == 63)\n          this.test_output.push(\n            \"Episodes fetched... PASS\");\n        else\n          this.test_output.push(\n            \"Episodes fetched... FAIL\");\n      }, error => {\n        this.test_output.push(\n          \"Episodes fetched... FAIL\");\n      });\n  }\n\n  private testGetTrivias() {\n    this.webService.getTrivias(this.episodeId)\n      .subscribe((response) => {\n        if (Array.isArray(response))\n          this.test_output.push(\n            \"Trivias fetched... PASS\");\n        else\n          this.test_output.push(\n            \"Trivias fetched... FAIL\");\n        }, error => {\n          this.test_output.push(\n            \"Trivias fetched... FAIL\");\n        })\n  }\n\n  private testPostTrivia() {\n    this.webService.login(\n      this.creds\n    ).subscribe((response) => {\n      this.webService.postTrivia(\n        this.episodeId,\n        { trivia: 'myTrivia' },\n        response.token\n      ).subscribe((response) => {\n        this.test_output.push(\n          'PostTrivia... PASS'\n        )\n      }, error => {\n        this.test_output.push(\n          'PostTrivia... FAIL'\n        )\n      })\n    }, error => {\n      this.test_output.push(\n        'PostTrivia... FAIL'\n      )\n    })\n  }\n\n  private testEditTrivia() {\n    this.webService.login(\n      this.creds\n    ).subscribe((response) => {\n      this.webService.editTrivia(\n        this.episodeId,\n        this.triviaId,\n        { trivia: 'myTrivia' },\n        response.token\n      ).subscribe((response) => {\n        this.test_output.push(\n          'EditTrivia... PASS'\n        )\n      }, error => {\n        this.test_output.push(\n          'EditTrivia... FAIL'\n        )\n      })\n    }, error => {\n      this.test_output.push(\n        'EditTrivia... FAIL'\n      )\n    })\n  }\n\n  private testVoteTrivia() {\n    this.webService.login(\n      this.creds\n    ).subscribe((response) => {\n      this.webService.voteTrivia(\n        this.episodeId,\n        this.triviaId,\n        'up',\n        response.token\n      ).subscribe((response) => {\n        this.test_output.push(\n          'VoteTrivia... PASS'\n        )\n      }, error => {\n        this.test_output.push(\n          'VoteTrivia... FAIL'\n        )\n      })\n    }, error => {\n      this.test_output.push(\n        'VoteTrivia... FAIL'\n      )\n    })\n  }\n\n  private testDeleteTrivia() {\n    this.webService.login(\n      this.creds\n    ).subscribe((response) => {\n      this.webService.deleteTrivia(\n        this.episodeId,\n        this.triviaId,\n        response.token\n      ).subscribe((response) => {\n        this.test_output.push(\n          'DeleteTrivia... PASS'\n        )\n      }, error => {\n        this.test_output.push(\n          'DeleteTrivia... FAIL'\n        )\n      })\n    }, error => {\n      this.test_output.push(\n        'DeleteTrivia... FAIL'\n      )\n    })\n  }\n\n  private testRegister() {\n    this.webService.register(\n      this.registerUser\n    ).subscribe((response) => {\n      this.test_output.push(\n        'Register... PASS'\n      )\n    }, error => {\n      this.test_output.push(\n        'Register... FAIL'\n      )\n    })\n  }\n\n  private testBanUser() {\n    this.webService.login(\n      this.creds\n    ).subscribe((response) => {\n      this.webService.ban('SlippinJimmy', response.token)\n        .subscribe((response) => {\n          this.test_output.push(\n            'Ban... PASS'\n          )\n        }, error => {\n          this.test_output.push(\n            'Ban... FAIL'\n          )\n        })\n    }, error => {\n      this.test_output.push(\n        'Ban... FAIL')\n    });\n  }\n\n  private testLogout() {\n    this.webService.login(\n      this.creds\n    ).subscribe((response) => {\n      this.webService.logout(response.token)\n        .subscribe((response) => {\n          this.test_output.push(\n            'Logout... PASS')\n        }, error => {\n          this.test_output.push(\n            'Logout... FAIL'\n          )\n        })\n    }, error => {\n      this.test_output.push(\n        'Logout... FAIL'\n      )\n    })\n  }\n\n  ngOnInit() {\n    this.testLogin();\n    this.testGetEpisodes();\n    this.testGetTrivias();\n    this.testPostTrivia();\n    this.testEditTrivia();\n    this.testVoteTrivia();\n    this.testDeleteTrivia();\n    this.testRegister();\n    this.testBanUser();\n    this.testLogout();\n  }\n}\n\n    \n\n    \n        \n  Test Report\n  \n    @for (report of test_output; track report) {\n      {{ report }}\n    }\n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  Test Report      @for (report of test_output; track report) {      {{ report }}    }  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthButtonComponent', 'selector': 'auth-button'},{'name': 'EpisodeComponent', 'selector': 'episode'},{'name': 'EpisodesComponent', 'selector': 'episodes'},{'name': 'HomeComponent', 'selector': 'home'},{'name': 'ModalComponent', 'selector': 'modal'},{'name': 'NavComponent', 'selector': 'navigation'},{'name': 'TestComponent', 'selector': 'test'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TestComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WebService.html":{"url":"injectables/WebService.html","title":"injectable - WebService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WebService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/web.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                pageSize\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ban\n                            \n                            \n                                deleteTrivia\n                            \n                            \n                                editTrivia\n                            \n                            \n                                getEpisode\n                            \n                            \n                                getEpisodes\n                            \n                            \n                                getTrivias\n                            \n                            \n                                login\n                            \n                            \n                                logout\n                            \n                            \n                                postTrivia\n                            \n                            \n                                register\n                            \n                            \n                                voteTrivia\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/web.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ban\n                        \n                    \n                \n            \n            \n                \nban(username: any, token: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/web.service.ts:95\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                token\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteTrivia\n                        \n                    \n                \n            \n            \n                \ndeleteTrivia(eId: any, tId: any, token: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/web.service.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                eId\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tId\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                token\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        editTrivia\n                        \n                    \n                \n            \n            \n                \neditTrivia(eId: any, tId: any, trivia: any, token: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/web.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                eId\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tId\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                trivia\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                token\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEpisode\n                        \n                    \n                \n            \n            \n                \ngetEpisode(id: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/web.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEpisodes\n                        \n                    \n                \n            \n            \n                \ngetEpisodes()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/web.service.ts:8\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTrivias\n                        \n                    \n                \n            \n            \n                \ngetTrivias(id: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/web.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(creds: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/web.service.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                creds\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logout\n                        \n                    \n                \n            \n            \n                \nlogout(token: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/web.service.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postTrivia\n                        \n                    \n                \n            \n            \n                \npostTrivia(id: any, trivia: any, token: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/web.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                trivia\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                token\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(form: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/web.service.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                form\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        voteTrivia\n                        \n                    \n                \n            \n            \n                \nvoteTrivia(eId: any, tId: any, voteDirection: string, token: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/web.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                eId\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tId\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                voteDirection\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                token\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        pageSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 65\n                    \n                \n                    \n                        \n                                Defined in src/app/web.service.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {HttpClient, HttpHeaders} from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\n\n@Injectable()\nexport class WebService{\n  pageSize: number = 65\n  constructor(private http: HttpClient) { }\n  getEpisodes() {\n    return this.http.get(\n      // pull all records, pagination handled on frontend\n      'http://localhost:5000/api/v1.0/episodes?pn='+'&ps=' + this.pageSize);\n  }\n  getEpisode(id: any) {\n    return this.http.get(\n      'http://localhost:5000/api/v1.0/episodes/' + id);\n  }\n  getTrivias(id: any) {\n    return this.http.get('http://localhost:5000/api/v1.0/episodes/' +\n      id + '/trivias');\n  }\n  postTrivia(id: any, trivia: any, token:any) {\n      let postData = new FormData();\n      postData.append(\"text\", trivia.trivia);\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'x-access-token': token })\n      };\n      return this.http.post(\n        'http://localhost:5000/api/v1.0/episodes/' +\n        id + \"/trivias\", postData, httpOptions);\n    }\n  editTrivia(eId: any, tId: any, trivia: any, token:any) {\n    let postData = new FormData();\n    postData.append(\"text\", trivia.editedTrivia);\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'x-access-token': token })\n    };\n    return this.http.patch(\n      'http://localhost:5000/api/v1.0/episodes/' +\n      eId + \"/trivias/\" + tId, postData, httpOptions);\n  }\n\n  voteTrivia(eId: any, tId: any, voteDirection: string, token: any) {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'x-access-token': token })\n      };\n      return this.http.patch(\n        'http://localhost:5000/api/v1.0/episodes/' + eId + '/trivias/' + tId + '/vote?vote=' + voteDirection,\n        '', httpOptions )\n  }\n\n  deleteTrivia(eId: any, tId: any, token:any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'x-access-token': token })\n    };\n    return this.http.delete(\n      'http://localhost:5000/api/v1.0/episodes/' + eId + '/trivias/' + tId,\n      httpOptions )\n  }\n\n  register(form: any) {\n    let postData = new FormData();\n    postData.append('name', form.name)\n    postData.append('username', form.username)\n    postData.append('password', form.password)\n    postData.append('email', form.email)\n    return this.http.post(\n      'http://localhost:5000/api/v1.0/register', postData);\n  }\n\n  login(creds: any) {\n    let authData = 'Basic ' + btoa(creds.username + ':' + creds.password);\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type':  'application/json',\n        'authorization': authData })\n    };\n    return this.http.get('http://localhost:5000/api/v1.0/login',\n      httpOptions)\n  }\n\n  logout(token: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type':  'application/json',\n        'x-access-token': token })\n    };\n    return this.http.get('http://localhost:5000/api/v1.0/logout',\n      httpOptions)\n  }\n\n  ban(username: any, token: any) {\n    console.log(token)\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'x-access-token': token })\n    };\n    return this.http.patch('http://localhost:5000/api/v1.0/ban/' + username,\n      '', httpOptions)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/app/app.config.ts\n            \n            variable\n            appConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/web.service.ts\n            \n            injectable\n            WebService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/authButton/authButton.component.ts\n            \n            component\n            AuthButtonComponent\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/episode/episode.component.ts\n            \n            component\n            EpisodeComponent\n            \n                0 %\n                (0/26)\n            \n        \n        \n            \n                \n                src/episodes/episodes.component.ts\n            \n            component\n            EpisodesComponent\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/home/home.component.ts\n            \n            component\n            HomeComponent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modal/modal.component.ts\n            \n            component\n            ModalComponent\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modal/modal.service.ts\n            \n            injectable\n            ModalService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/nav/nav.component.ts\n            \n            component\n            NavComponent\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/test/test.component.ts\n            \n            component\n            TestComponent\n            \n                0 %\n                (0/19)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^19.0.0\n        \n            @angular/common : ^19.0.0\n        \n            @angular/compiler : ^19.0.0\n        \n            @angular/core : ^19.0.0\n        \n            @angular/forms : ^19.0.0\n        \n            @angular/platform-browser : ^19.0.0\n        \n            @angular/platform-browser-dynamic : ^19.0.0\n        \n            @angular/router : ^19.0.0\n        \n            @compodoc/compodoc : ^1.1.26\n        \n            ag-grid-angular : ^32.3.3\n        \n            bootstrap : ^5.3.3\n        \n            jquery : ^3.7.1\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.15.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nBcsFanSiteFE\nThis project was generated using Angular CLI version 19.0.2.\nDevelopment server\nTo start a local development server, run:\nExample :ng serveOnce the server is running, open your browser and navigate to http://localhost:4200/. The application will automatically reload whenever you modify any of the source files.\nCode scaffolding\nAngular CLI includes powerful code scaffolding tools. To generate a new component, run:\nExample :ng generate component component-nameFor a complete list of available schematics (such as components, directives, or pipes), run:\nExample :ng generate --helpBuilding\nTo build the project run:\nExample :ng buildThis will compile your project and store the build artifacts in the dist/ directory. By default, the production build optimizes your application for performance and speed.\nRunning unit tests\nTo execute unit tests with the Karma test runner, use the following command:\nExample :ng testRunning end-to-end tests\nFor end-to-end (e2e) testing, run:\nExample :ng e2eAngular CLI does not come with an end-to-end testing framework by default. You can choose one that suits your needs.\nAdditional Resources\nFor more information on using the Angular CLI, including detailed command references, visit the Angular CLI Overview and Command Reference page.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    8 Components\n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appConfig   (src/.../app.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ApplicationConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  providers: [provideZoneChangeDetection({ eventCoalescing: true }),\n    provideRouter(routes), provideHttpClient()]\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
